package org.openapitools.client.api;

import org.openapitools.client.ApiClient;

import org.openapitools.client.model.ActionDecisionManagerCase200Response;
import org.openapitools.client.model.ActionDecisionManagerCase400Response;
import org.openapitools.client.model.ActionDecisionManagerCase403Response;
import org.openapitools.client.model.ActionDecisionManagerCase422Response;
import org.openapitools.client.model.ActionDecisionManagerCase500Response;
import org.openapitools.client.model.ActionDecisionManagerCase502Response;
import org.openapitools.client.model.ActionDecisionManagerCase503Response;
import org.openapitools.client.model.ActionDecisionManagerCaseRequest;
import org.openapitools.client.model.AddNegativeRequest;
import org.openapitools.client.model.CommentDecisionManagerCase201Response;
import org.openapitools.client.model.CommentDecisionManagerCaseRequest;
import org.openapitools.client.model.CreateBundledDecisionManagerCaseRequest;
import org.openapitools.client.model.FraudUpdateRequest;
import org.openapitools.client.model.RiskV1DecisionsPost201Response;
import org.openapitools.client.model.RiskV1DecisionsPost400Response;
import org.openapitools.client.model.RiskV1DecisionsPost400Response1;
import org.openapitools.client.model.RiskV1DecisionsPost502Response;
import org.openapitools.client.model.RiskV1UpdatePost201Response;

import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.web.reactive.function.client.WebClient.ResponseSpec;
import org.springframework.web.reactive.function.client.WebClientResponseException;
import org.springframework.core.io.FileSystemResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import reactor.core.publisher.Mono;
import reactor.core.publisher.Flux;

//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T19:17:21.826843+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class DecisionManagerApi {
    private ApiClient apiClient;

    public DecisionManagerApi() {
        this(new ApiClient());
    }

    @Autowired
    public DecisionManagerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Take action on a DM post-transactional case
     * Take action on a DM post-transactional case
     * <p><b>200</b> - Successful response
     * <p><b>400</b> - Invalid Request
     * <p><b>403</b> - Access Denied
     * <p><b>422</b> - Unprocessable Entity
     * <p><b>500</b> - Server Error
     * <p><b>502</b> - Bad Gateway
     * <p><b>503</b> - Service Unavailable
     * @param id An unique identification number generated by Cybersource to identify the submitted request.
     * @param caseManagementActionsRequest The caseManagementActionsRequest parameter
     * @return ActionDecisionManagerCase200Response
     * @throws WebClientResponseException if an error occurs while attempting to invoke the API
     */
    private ResponseSpec actionDecisionManagerCaseRequestCreation(String id, ActionDecisionManagerCaseRequest caseManagementActionsRequest) throws WebClientResponseException {
        Object postBody = caseManagementActionsRequest;
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new WebClientResponseException("Missing the required parameter 'id' when calling actionDecisionManagerCase", HttpStatus.BAD_REQUEST.value(), HttpStatus.BAD_REQUEST.getReasonPhrase(), null, null, null);
        }
        // verify the required parameter 'caseManagementActionsRequest' is set
        if (caseManagementActionsRequest == null) {
            throw new WebClientResponseException("Missing the required parameter 'caseManagementActionsRequest' when calling actionDecisionManagerCase", HttpStatus.BAD_REQUEST.value(), HttpStatus.BAD_REQUEST.getReasonPhrase(), null, null, null);
        }
        // create path and map variables
        final Map<String, Object> pathParams = new HashMap<String, Object>();

        pathParams.put("id", id);

        final MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders headerParams = new HttpHeaders();
        final MultiValueMap<String, String> cookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> formParams = new LinkedMultiValueMap<String, Object>();

        final String[] localVarAccepts = { 
            "application/json"
        };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = { 
            "application/json"
        };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] {  };

        ParameterizedTypeReference<ActionDecisionManagerCase200Response> localVarReturnType = new ParameterizedTypeReference<ActionDecisionManagerCase200Response>() {};
        return apiClient.invokeAPI("/risk/v1/decisions/{id}/actions", HttpMethod.POST, pathParams, queryParams, postBody, headerParams, cookieParams, formParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
    }

    /**
     * Take action on a DM post-transactional case
     * Take action on a DM post-transactional case
     * <p><b>200</b> - Successful response
     * <p><b>400</b> - Invalid Request
     * <p><b>403</b> - Access Denied
     * <p><b>422</b> - Unprocessable Entity
     * <p><b>500</b> - Server Error
     * <p><b>502</b> - Bad Gateway
     * <p><b>503</b> - Service Unavailable
     * @param id An unique identification number generated by Cybersource to identify the submitted request.
     * @param caseManagementActionsRequest The caseManagementActionsRequest parameter
     * @return ActionDecisionManagerCase200Response
     * @throws WebClientResponseException if an error occurs while attempting to invoke the API
     */
    public Mono<ActionDecisionManagerCase200Response> actionDecisionManagerCase(String id, ActionDecisionManagerCaseRequest caseManagementActionsRequest) throws WebClientResponseException {
        ParameterizedTypeReference<ActionDecisionManagerCase200Response> localVarReturnType = new ParameterizedTypeReference<ActionDecisionManagerCase200Response>() {};
        return actionDecisionManagerCaseRequestCreation(id, caseManagementActionsRequest).bodyToMono(localVarReturnType);
    }

    /**
     * Take action on a DM post-transactional case
     * Take action on a DM post-transactional case
     * <p><b>200</b> - Successful response
     * <p><b>400</b> - Invalid Request
     * <p><b>403</b> - Access Denied
     * <p><b>422</b> - Unprocessable Entity
     * <p><b>500</b> - Server Error
     * <p><b>502</b> - Bad Gateway
     * <p><b>503</b> - Service Unavailable
     * @param id An unique identification number generated by Cybersource to identify the submitted request.
     * @param caseManagementActionsRequest The caseManagementActionsRequest parameter
     * @return ResponseEntity&lt;ActionDecisionManagerCase200Response&gt;
     * @throws WebClientResponseException if an error occurs while attempting to invoke the API
     */
    public Mono<ResponseEntity<ActionDecisionManagerCase200Response>> actionDecisionManagerCaseWithHttpInfo(String id, ActionDecisionManagerCaseRequest caseManagementActionsRequest) throws WebClientResponseException {
        ParameterizedTypeReference<ActionDecisionManagerCase200Response> localVarReturnType = new ParameterizedTypeReference<ActionDecisionManagerCase200Response>() {};
        return actionDecisionManagerCaseRequestCreation(id, caseManagementActionsRequest).toEntity(localVarReturnType);
    }

    /**
     * Take action on a DM post-transactional case
     * Take action on a DM post-transactional case
     * <p><b>200</b> - Successful response
     * <p><b>400</b> - Invalid Request
     * <p><b>403</b> - Access Denied
     * <p><b>422</b> - Unprocessable Entity
     * <p><b>500</b> - Server Error
     * <p><b>502</b> - Bad Gateway
     * <p><b>503</b> - Service Unavailable
     * @param id An unique identification number generated by Cybersource to identify the submitted request.
     * @param caseManagementActionsRequest The caseManagementActionsRequest parameter
     * @return ResponseSpec
     * @throws WebClientResponseException if an error occurs while attempting to invoke the API
     */
    public ResponseSpec actionDecisionManagerCaseWithResponseSpec(String id, ActionDecisionManagerCaseRequest caseManagementActionsRequest) throws WebClientResponseException {
        return actionDecisionManagerCaseRequestCreation(id, caseManagementActionsRequest);
    }
    /**
     * List Management
     * This call adds/deletes/converts the request information in the negative list.  Provide the list to be updated as the path parameter. This value can be &#39;postiive&#39;, &#39;negative&#39; or &#39;review&#39;. 
     * <p><b>201</b> - Successful response
     * <p><b>400</b> - Invalid request
     * @param type The list to be updated. It can be &#39;positive&#39;, &#39;negative&#39; or &#39;review&#39;.
     * @param addNegativeListRequest The addNegativeListRequest parameter
     * @return RiskV1UpdatePost201Response
     * @throws WebClientResponseException if an error occurs while attempting to invoke the API
     */
    private ResponseSpec addNegativeRequestCreation(String type, AddNegativeRequest addNegativeListRequest) throws WebClientResponseException {
        Object postBody = addNegativeListRequest;
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new WebClientResponseException("Missing the required parameter 'type' when calling addNegative", HttpStatus.BAD_REQUEST.value(), HttpStatus.BAD_REQUEST.getReasonPhrase(), null, null, null);
        }
        // verify the required parameter 'addNegativeListRequest' is set
        if (addNegativeListRequest == null) {
            throw new WebClientResponseException("Missing the required parameter 'addNegativeListRequest' when calling addNegative", HttpStatus.BAD_REQUEST.value(), HttpStatus.BAD_REQUEST.getReasonPhrase(), null, null, null);
        }
        // create path and map variables
        final Map<String, Object> pathParams = new HashMap<String, Object>();

        pathParams.put("type", type);

        final MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders headerParams = new HttpHeaders();
        final MultiValueMap<String, String> cookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> formParams = new LinkedMultiValueMap<String, Object>();

        final String[] localVarAccepts = { 
            "application/hal+json;charset=utf-8"
        };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = { 
            "application/json;charset=utf-8"
        };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] {  };

        ParameterizedTypeReference<RiskV1UpdatePost201Response> localVarReturnType = new ParameterizedTypeReference<RiskV1UpdatePost201Response>() {};
        return apiClient.invokeAPI("/risk/v1/lists/{type}/entries", HttpMethod.POST, pathParams, queryParams, postBody, headerParams, cookieParams, formParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
    }

    /**
     * List Management
     * This call adds/deletes/converts the request information in the negative list.  Provide the list to be updated as the path parameter. This value can be &#39;postiive&#39;, &#39;negative&#39; or &#39;review&#39;. 
     * <p><b>201</b> - Successful response
     * <p><b>400</b> - Invalid request
     * @param type The list to be updated. It can be &#39;positive&#39;, &#39;negative&#39; or &#39;review&#39;.
     * @param addNegativeListRequest The addNegativeListRequest parameter
     * @return RiskV1UpdatePost201Response
     * @throws WebClientResponseException if an error occurs while attempting to invoke the API
     */
    public Mono<RiskV1UpdatePost201Response> addNegative(String type, AddNegativeRequest addNegativeListRequest) throws WebClientResponseException {
        ParameterizedTypeReference<RiskV1UpdatePost201Response> localVarReturnType = new ParameterizedTypeReference<RiskV1UpdatePost201Response>() {};
        return addNegativeRequestCreation(type, addNegativeListRequest).bodyToMono(localVarReturnType);
    }

    /**
     * List Management
     * This call adds/deletes/converts the request information in the negative list.  Provide the list to be updated as the path parameter. This value can be &#39;postiive&#39;, &#39;negative&#39; or &#39;review&#39;. 
     * <p><b>201</b> - Successful response
     * <p><b>400</b> - Invalid request
     * @param type The list to be updated. It can be &#39;positive&#39;, &#39;negative&#39; or &#39;review&#39;.
     * @param addNegativeListRequest The addNegativeListRequest parameter
     * @return ResponseEntity&lt;RiskV1UpdatePost201Response&gt;
     * @throws WebClientResponseException if an error occurs while attempting to invoke the API
     */
    public Mono<ResponseEntity<RiskV1UpdatePost201Response>> addNegativeWithHttpInfo(String type, AddNegativeRequest addNegativeListRequest) throws WebClientResponseException {
        ParameterizedTypeReference<RiskV1UpdatePost201Response> localVarReturnType = new ParameterizedTypeReference<RiskV1UpdatePost201Response>() {};
        return addNegativeRequestCreation(type, addNegativeListRequest).toEntity(localVarReturnType);
    }

    /**
     * List Management
     * This call adds/deletes/converts the request information in the negative list.  Provide the list to be updated as the path parameter. This value can be &#39;postiive&#39;, &#39;negative&#39; or &#39;review&#39;. 
     * <p><b>201</b> - Successful response
     * <p><b>400</b> - Invalid request
     * @param type The list to be updated. It can be &#39;positive&#39;, &#39;negative&#39; or &#39;review&#39;.
     * @param addNegativeListRequest The addNegativeListRequest parameter
     * @return ResponseSpec
     * @throws WebClientResponseException if an error occurs while attempting to invoke the API
     */
    public ResponseSpec addNegativeWithResponseSpec(String type, AddNegativeRequest addNegativeListRequest) throws WebClientResponseException {
        return addNegativeRequestCreation(type, addNegativeListRequest);
    }
    /**
     * Add a comment to a DM post-transactional case
     * Add a comment to a DM post-transactional case
     * <p><b>201</b> - Successful response
     * <p><b>400</b> - Invalid Request
     * <p><b>403</b> - Access Denied
     * <p><b>422</b> - Unprocessable Entity
     * <p><b>500</b> - Server Error
     * <p><b>502</b> - Bad Gateway
     * <p><b>503</b> - Service Unavailable
     * @param id An unique identification number generated by Cybersource to identify the submitted request.
     * @param caseManagementCommentsRequest The caseManagementCommentsRequest parameter
     * @return CommentDecisionManagerCase201Response
     * @throws WebClientResponseException if an error occurs while attempting to invoke the API
     */
    private ResponseSpec commentDecisionManagerCaseRequestCreation(String id, CommentDecisionManagerCaseRequest caseManagementCommentsRequest) throws WebClientResponseException {
        Object postBody = caseManagementCommentsRequest;
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new WebClientResponseException("Missing the required parameter 'id' when calling commentDecisionManagerCase", HttpStatus.BAD_REQUEST.value(), HttpStatus.BAD_REQUEST.getReasonPhrase(), null, null, null);
        }
        // verify the required parameter 'caseManagementCommentsRequest' is set
        if (caseManagementCommentsRequest == null) {
            throw new WebClientResponseException("Missing the required parameter 'caseManagementCommentsRequest' when calling commentDecisionManagerCase", HttpStatus.BAD_REQUEST.value(), HttpStatus.BAD_REQUEST.getReasonPhrase(), null, null, null);
        }
        // create path and map variables
        final Map<String, Object> pathParams = new HashMap<String, Object>();

        pathParams.put("id", id);

        final MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders headerParams = new HttpHeaders();
        final MultiValueMap<String, String> cookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> formParams = new LinkedMultiValueMap<String, Object>();

        final String[] localVarAccepts = { 
            "application/json"
        };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = { 
            "application/json"
        };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] {  };

        ParameterizedTypeReference<CommentDecisionManagerCase201Response> localVarReturnType = new ParameterizedTypeReference<CommentDecisionManagerCase201Response>() {};
        return apiClient.invokeAPI("/risk/v1/decisions/{id}/comments", HttpMethod.POST, pathParams, queryParams, postBody, headerParams, cookieParams, formParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
    }

    /**
     * Add a comment to a DM post-transactional case
     * Add a comment to a DM post-transactional case
     * <p><b>201</b> - Successful response
     * <p><b>400</b> - Invalid Request
     * <p><b>403</b> - Access Denied
     * <p><b>422</b> - Unprocessable Entity
     * <p><b>500</b> - Server Error
     * <p><b>502</b> - Bad Gateway
     * <p><b>503</b> - Service Unavailable
     * @param id An unique identification number generated by Cybersource to identify the submitted request.
     * @param caseManagementCommentsRequest The caseManagementCommentsRequest parameter
     * @return CommentDecisionManagerCase201Response
     * @throws WebClientResponseException if an error occurs while attempting to invoke the API
     */
    public Mono<CommentDecisionManagerCase201Response> commentDecisionManagerCase(String id, CommentDecisionManagerCaseRequest caseManagementCommentsRequest) throws WebClientResponseException {
        ParameterizedTypeReference<CommentDecisionManagerCase201Response> localVarReturnType = new ParameterizedTypeReference<CommentDecisionManagerCase201Response>() {};
        return commentDecisionManagerCaseRequestCreation(id, caseManagementCommentsRequest).bodyToMono(localVarReturnType);
    }

    /**
     * Add a comment to a DM post-transactional case
     * Add a comment to a DM post-transactional case
     * <p><b>201</b> - Successful response
     * <p><b>400</b> - Invalid Request
     * <p><b>403</b> - Access Denied
     * <p><b>422</b> - Unprocessable Entity
     * <p><b>500</b> - Server Error
     * <p><b>502</b> - Bad Gateway
     * <p><b>503</b> - Service Unavailable
     * @param id An unique identification number generated by Cybersource to identify the submitted request.
     * @param caseManagementCommentsRequest The caseManagementCommentsRequest parameter
     * @return ResponseEntity&lt;CommentDecisionManagerCase201Response&gt;
     * @throws WebClientResponseException if an error occurs while attempting to invoke the API
     */
    public Mono<ResponseEntity<CommentDecisionManagerCase201Response>> commentDecisionManagerCaseWithHttpInfo(String id, CommentDecisionManagerCaseRequest caseManagementCommentsRequest) throws WebClientResponseException {
        ParameterizedTypeReference<CommentDecisionManagerCase201Response> localVarReturnType = new ParameterizedTypeReference<CommentDecisionManagerCase201Response>() {};
        return commentDecisionManagerCaseRequestCreation(id, caseManagementCommentsRequest).toEntity(localVarReturnType);
    }

    /**
     * Add a comment to a DM post-transactional case
     * Add a comment to a DM post-transactional case
     * <p><b>201</b> - Successful response
     * <p><b>400</b> - Invalid Request
     * <p><b>403</b> - Access Denied
     * <p><b>422</b> - Unprocessable Entity
     * <p><b>500</b> - Server Error
     * <p><b>502</b> - Bad Gateway
     * <p><b>503</b> - Service Unavailable
     * @param id An unique identification number generated by Cybersource to identify the submitted request.
     * @param caseManagementCommentsRequest The caseManagementCommentsRequest parameter
     * @return ResponseSpec
     * @throws WebClientResponseException if an error occurs while attempting to invoke the API
     */
    public ResponseSpec commentDecisionManagerCaseWithResponseSpec(String id, CommentDecisionManagerCaseRequest caseManagementCommentsRequest) throws WebClientResponseException {
        return commentDecisionManagerCaseRequestCreation(id, caseManagementCommentsRequest);
    }
    /**
     * Create Decision Manager
     * Decision Manager can help you automate and streamline your fraud operations. Decision Manager will return a decision based on the request values.
     * <p><b>201</b> - Successful response
     * <p><b>400</b> - Invalid request
     * <p><b>502</b> - Unexpected system error or system timeout.
     * @param createBundledDecisionManagerCaseRequest The createBundledDecisionManagerCaseRequest parameter
     * @return RiskV1DecisionsPost201Response
     * @throws WebClientResponseException if an error occurs while attempting to invoke the API
     */
    private ResponseSpec createBundledDecisionManagerCaseRequestCreation(CreateBundledDecisionManagerCaseRequest createBundledDecisionManagerCaseRequest) throws WebClientResponseException {
        Object postBody = createBundledDecisionManagerCaseRequest;
        // verify the required parameter 'createBundledDecisionManagerCaseRequest' is set
        if (createBundledDecisionManagerCaseRequest == null) {
            throw new WebClientResponseException("Missing the required parameter 'createBundledDecisionManagerCaseRequest' when calling createBundledDecisionManagerCase", HttpStatus.BAD_REQUEST.value(), HttpStatus.BAD_REQUEST.getReasonPhrase(), null, null, null);
        }
        // create path and map variables
        final Map<String, Object> pathParams = new HashMap<String, Object>();

        final MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders headerParams = new HttpHeaders();
        final MultiValueMap<String, String> cookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> formParams = new LinkedMultiValueMap<String, Object>();

        final String[] localVarAccepts = { 
            "application/hal+json;charset=utf-8"
        };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = { 
            "application/json;charset=utf-8"
        };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] {  };

        ParameterizedTypeReference<RiskV1DecisionsPost201Response> localVarReturnType = new ParameterizedTypeReference<RiskV1DecisionsPost201Response>() {};
        return apiClient.invokeAPI("/risk/v1/decisions", HttpMethod.POST, pathParams, queryParams, postBody, headerParams, cookieParams, formParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
    }

    /**
     * Create Decision Manager
     * Decision Manager can help you automate and streamline your fraud operations. Decision Manager will return a decision based on the request values.
     * <p><b>201</b> - Successful response
     * <p><b>400</b> - Invalid request
     * <p><b>502</b> - Unexpected system error or system timeout.
     * @param createBundledDecisionManagerCaseRequest The createBundledDecisionManagerCaseRequest parameter
     * @return RiskV1DecisionsPost201Response
     * @throws WebClientResponseException if an error occurs while attempting to invoke the API
     */
    public Mono<RiskV1DecisionsPost201Response> createBundledDecisionManagerCase(CreateBundledDecisionManagerCaseRequest createBundledDecisionManagerCaseRequest) throws WebClientResponseException {
        ParameterizedTypeReference<RiskV1DecisionsPost201Response> localVarReturnType = new ParameterizedTypeReference<RiskV1DecisionsPost201Response>() {};
        return createBundledDecisionManagerCaseRequestCreation(createBundledDecisionManagerCaseRequest).bodyToMono(localVarReturnType);
    }

    /**
     * Create Decision Manager
     * Decision Manager can help you automate and streamline your fraud operations. Decision Manager will return a decision based on the request values.
     * <p><b>201</b> - Successful response
     * <p><b>400</b> - Invalid request
     * <p><b>502</b> - Unexpected system error or system timeout.
     * @param createBundledDecisionManagerCaseRequest The createBundledDecisionManagerCaseRequest parameter
     * @return ResponseEntity&lt;RiskV1DecisionsPost201Response&gt;
     * @throws WebClientResponseException if an error occurs while attempting to invoke the API
     */
    public Mono<ResponseEntity<RiskV1DecisionsPost201Response>> createBundledDecisionManagerCaseWithHttpInfo(CreateBundledDecisionManagerCaseRequest createBundledDecisionManagerCaseRequest) throws WebClientResponseException {
        ParameterizedTypeReference<RiskV1DecisionsPost201Response> localVarReturnType = new ParameterizedTypeReference<RiskV1DecisionsPost201Response>() {};
        return createBundledDecisionManagerCaseRequestCreation(createBundledDecisionManagerCaseRequest).toEntity(localVarReturnType);
    }

    /**
     * Create Decision Manager
     * Decision Manager can help you automate and streamline your fraud operations. Decision Manager will return a decision based on the request values.
     * <p><b>201</b> - Successful response
     * <p><b>400</b> - Invalid request
     * <p><b>502</b> - Unexpected system error or system timeout.
     * @param createBundledDecisionManagerCaseRequest The createBundledDecisionManagerCaseRequest parameter
     * @return ResponseSpec
     * @throws WebClientResponseException if an error occurs while attempting to invoke the API
     */
    public ResponseSpec createBundledDecisionManagerCaseWithResponseSpec(CreateBundledDecisionManagerCaseRequest createBundledDecisionManagerCaseRequest) throws WebClientResponseException {
        return createBundledDecisionManagerCaseRequestCreation(createBundledDecisionManagerCaseRequest);
    }
    /**
     * Fraud Marking
     * This can be used to - 1. Add known fraudulent data to the fraud history 2. Remove data added to history with Transaction Marking Tool or by uploading chargeback files 3. Remove chargeback data from history that was automatically added. For detailed information, contact your Cybersource representative  Place the request ID of the transaction you want to mark as suspect (or remove from history) as the path parameter in this request. 
     * <p><b>201</b> - Successful response
     * <p><b>400</b> - Invalid request
     * @param id Request ID of the transaction that you want to mark as suspect or remove from history.
     * @param fraudMarkingActionRequest The fraudMarkingActionRequest parameter
     * @return RiskV1UpdatePost201Response
     * @throws WebClientResponseException if an error occurs while attempting to invoke the API
     */
    private ResponseSpec fraudUpdateRequestCreation(String id, FraudUpdateRequest fraudMarkingActionRequest) throws WebClientResponseException {
        Object postBody = fraudMarkingActionRequest;
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new WebClientResponseException("Missing the required parameter 'id' when calling fraudUpdate", HttpStatus.BAD_REQUEST.value(), HttpStatus.BAD_REQUEST.getReasonPhrase(), null, null, null);
        }
        // verify the required parameter 'fraudMarkingActionRequest' is set
        if (fraudMarkingActionRequest == null) {
            throw new WebClientResponseException("Missing the required parameter 'fraudMarkingActionRequest' when calling fraudUpdate", HttpStatus.BAD_REQUEST.value(), HttpStatus.BAD_REQUEST.getReasonPhrase(), null, null, null);
        }
        // create path and map variables
        final Map<String, Object> pathParams = new HashMap<String, Object>();

        pathParams.put("id", id);

        final MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders headerParams = new HttpHeaders();
        final MultiValueMap<String, String> cookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> formParams = new LinkedMultiValueMap<String, Object>();

        final String[] localVarAccepts = { 
            "application/hal+json;charset=utf-8"
        };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = { 
            "application/json;charset=utf-8"
        };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] {  };

        ParameterizedTypeReference<RiskV1UpdatePost201Response> localVarReturnType = new ParameterizedTypeReference<RiskV1UpdatePost201Response>() {};
        return apiClient.invokeAPI("/risk/v1/decisions/{id}/marking", HttpMethod.POST, pathParams, queryParams, postBody, headerParams, cookieParams, formParams, localVarAccept, localVarContentType, localVarAuthNames, localVarReturnType);
    }

    /**
     * Fraud Marking
     * This can be used to - 1. Add known fraudulent data to the fraud history 2. Remove data added to history with Transaction Marking Tool or by uploading chargeback files 3. Remove chargeback data from history that was automatically added. For detailed information, contact your Cybersource representative  Place the request ID of the transaction you want to mark as suspect (or remove from history) as the path parameter in this request. 
     * <p><b>201</b> - Successful response
     * <p><b>400</b> - Invalid request
     * @param id Request ID of the transaction that you want to mark as suspect or remove from history.
     * @param fraudMarkingActionRequest The fraudMarkingActionRequest parameter
     * @return RiskV1UpdatePost201Response
     * @throws WebClientResponseException if an error occurs while attempting to invoke the API
     */
    public Mono<RiskV1UpdatePost201Response> fraudUpdate(String id, FraudUpdateRequest fraudMarkingActionRequest) throws WebClientResponseException {
        ParameterizedTypeReference<RiskV1UpdatePost201Response> localVarReturnType = new ParameterizedTypeReference<RiskV1UpdatePost201Response>() {};
        return fraudUpdateRequestCreation(id, fraudMarkingActionRequest).bodyToMono(localVarReturnType);
    }

    /**
     * Fraud Marking
     * This can be used to - 1. Add known fraudulent data to the fraud history 2. Remove data added to history with Transaction Marking Tool or by uploading chargeback files 3. Remove chargeback data from history that was automatically added. For detailed information, contact your Cybersource representative  Place the request ID of the transaction you want to mark as suspect (or remove from history) as the path parameter in this request. 
     * <p><b>201</b> - Successful response
     * <p><b>400</b> - Invalid request
     * @param id Request ID of the transaction that you want to mark as suspect or remove from history.
     * @param fraudMarkingActionRequest The fraudMarkingActionRequest parameter
     * @return ResponseEntity&lt;RiskV1UpdatePost201Response&gt;
     * @throws WebClientResponseException if an error occurs while attempting to invoke the API
     */
    public Mono<ResponseEntity<RiskV1UpdatePost201Response>> fraudUpdateWithHttpInfo(String id, FraudUpdateRequest fraudMarkingActionRequest) throws WebClientResponseException {
        ParameterizedTypeReference<RiskV1UpdatePost201Response> localVarReturnType = new ParameterizedTypeReference<RiskV1UpdatePost201Response>() {};
        return fraudUpdateRequestCreation(id, fraudMarkingActionRequest).toEntity(localVarReturnType);
    }

    /**
     * Fraud Marking
     * This can be used to - 1. Add known fraudulent data to the fraud history 2. Remove data added to history with Transaction Marking Tool or by uploading chargeback files 3. Remove chargeback data from history that was automatically added. For detailed information, contact your Cybersource representative  Place the request ID of the transaction you want to mark as suspect (or remove from history) as the path parameter in this request. 
     * <p><b>201</b> - Successful response
     * <p><b>400</b> - Invalid request
     * @param id Request ID of the transaction that you want to mark as suspect or remove from history.
     * @param fraudMarkingActionRequest The fraudMarkingActionRequest parameter
     * @return ResponseSpec
     * @throws WebClientResponseException if an error occurs while attempting to invoke the API
     */
    public ResponseSpec fraudUpdateWithResponseSpec(String id, FraudUpdateRequest fraudMarkingActionRequest) throws WebClientResponseException {
        return fraudUpdateRequestCreation(id, fraudMarkingActionRequest);
    }
}
