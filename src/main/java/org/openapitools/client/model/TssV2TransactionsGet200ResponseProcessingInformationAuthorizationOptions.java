/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.client.model.TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptionsInitiator;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions
 */
@JsonPropertyOrder({
  TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions.JSON_PROPERTY_AUTH_TYPE,
  TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions.JSON_PROPERTY_AUTH_INDICATOR,
  TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions.JSON_PROPERTY_EXTEND_AUTH_INDICATOR,
  TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions.JSON_PROPERTY_CARD_VERIFICATION_INDICATOR,
  TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions.JSON_PROPERTY_INITIATOR
})
@JsonTypeName("tssV2TransactionsGet200Response_processingInformation_authorizationOptions")
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T19:17:21.826843+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions {
  public static final String JSON_PROPERTY_AUTH_TYPE = "authType";
  private String authType;

  public static final String JSON_PROPERTY_AUTH_INDICATOR = "authIndicator";
  private String authIndicator;

  public static final String JSON_PROPERTY_EXTEND_AUTH_INDICATOR = "extendAuthIndicator";
  private String extendAuthIndicator;

  public static final String JSON_PROPERTY_CARD_VERIFICATION_INDICATOR = "cardVerificationIndicator";
  private Boolean cardVerificationIndicator;

  public static final String JSON_PROPERTY_INITIATOR = "initiator";
  private TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptionsInitiator initiator;

  public TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions() {
  }

  public TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions authType(String authType) {
    
    this.authType = authType;
    return this;
  }

  /**
   * Authorization type. Possible values:   - &#x60;AUTOCAPTURE&#x60;: automatic capture.  - &#x60;STANDARDCAPTURE&#x60;: standard capture.  - &#x60;VERBAL&#x60;: forced capture. Include it in the payment request for a forced capture. Include it in the capture request for a verbal payment.  #### Asia, Middle East, and Africa Gateway; Cielo; Comercio Latino; and CyberSource Latin American Processing Set this field to &#x60;AUTOCAPTURE&#x60; and include it in a bundled request to indicate that you are requesting an automatic capture. If your account is configured to enable automatic captures, set this field to &#x60;STANDARDCAPTURE&#x60; and include it in a standard authorization or bundled request to indicate that you are overriding an automatic capture.  #### Forced Capture Set this field to &#x60;VERBAL&#x60; and include it in the authorization request to indicate that you are performing a forced capture; therefore, you receive the authorization code outside the CyberSource system.  #### Verbal Authorization Set this field to &#x60;VERBAL&#x60; and include it in the capture request to indicate that the request is for a verbal authorization. 
   * @return authType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTH_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAuthType() {
    return authType;
  }


  @JsonProperty(JSON_PROPERTY_AUTH_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAuthType(String authType) {
    this.authType = authType;
  }

  public TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions authIndicator(String authIndicator) {
    
    this.authIndicator = authIndicator;
    return this;
  }

  /**
   * Flag that specifies the purpose of the authorization.  Possible values:  - **0**: Preauthorization  - **1**: Final authorization  To set the default for this field, contact CyberSource Customer Support.  #### Barclays and Elavon The default for Barclays and Elavon is 1 (final authorization). To change the default for this field, contact CyberSource Customer Support.  #### CyberSource through VisaNet When the value for this field is 0, it corresponds to the following data in the TC 33 capture file:  - Record: CP01 TCR0  - Position: 164  - Field: Additional Authorization Indicators When the value for this field is 1, it does not correspond to any data in the TC 33 capture file. 
   * @return authIndicator
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTH_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAuthIndicator() {
    return authIndicator;
  }


  @JsonProperty(JSON_PROPERTY_AUTH_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAuthIndicator(String authIndicator) {
    this.authIndicator = authIndicator;
  }

  public TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions extendAuthIndicator(String extendAuthIndicator) {
    
    this.extendAuthIndicator = extendAuthIndicator;
    return this;
  }

  /**
   * Flag that indicates whether the transaction is an extended authorization. 
   * @return extendAuthIndicator
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXTEND_AUTH_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExtendAuthIndicator() {
    return extendAuthIndicator;
  }


  @JsonProperty(JSON_PROPERTY_EXTEND_AUTH_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExtendAuthIndicator(String extendAuthIndicator) {
    this.extendAuthIndicator = extendAuthIndicator;
  }

  public TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions cardVerificationIndicator(Boolean cardVerificationIndicator) {
    
    this.cardVerificationIndicator = cardVerificationIndicator;
    return this;
  }

  /**
   * This API field will indicate whether a card verification check is being performed during the transaction  Possible values:   - &#x60;true&#x60;   - &#x60;false&#x60; (default value) 
   * @return cardVerificationIndicator
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CARD_VERIFICATION_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCardVerificationIndicator() {
    return cardVerificationIndicator;
  }


  @JsonProperty(JSON_PROPERTY_CARD_VERIFICATION_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCardVerificationIndicator(Boolean cardVerificationIndicator) {
    this.cardVerificationIndicator = cardVerificationIndicator;
  }

  public TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions initiator(TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptionsInitiator initiator) {
    
    this.initiator = initiator;
    return this;
  }

  /**
   * Get initiator
   * @return initiator
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INITIATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptionsInitiator getInitiator() {
    return initiator;
  }


  @JsonProperty(JSON_PROPERTY_INITIATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInitiator(TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptionsInitiator initiator) {
    this.initiator = initiator;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions tssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions = (TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions) o;
    return Objects.equals(this.authType, tssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions.authType) &&
        Objects.equals(this.authIndicator, tssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions.authIndicator) &&
        Objects.equals(this.extendAuthIndicator, tssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions.extendAuthIndicator) &&
        Objects.equals(this.cardVerificationIndicator, tssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions.cardVerificationIndicator) &&
        Objects.equals(this.initiator, tssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions.initiator);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authType, authIndicator, extendAuthIndicator, cardVerificationIndicator, initiator);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TssV2TransactionsGet200ResponseProcessingInformationAuthorizationOptions {\n");
    sb.append("    authType: ").append(toIndentedString(authType)).append("\n");
    sb.append("    authIndicator: ").append(toIndentedString(authIndicator)).append("\n");
    sb.append("    extendAuthIndicator: ").append(toIndentedString(extendAuthIndicator)).append("\n");
    sb.append("    cardVerificationIndicator: ").append(toIndentedString(cardVerificationIndicator)).append("\n");
    sb.append("    initiator: ").append(toIndentedString(initiator)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

