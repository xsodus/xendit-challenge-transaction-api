/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.client.model.ShippingAddressListForCustomerEmbedded;
import org.openapitools.client.model.ShippingAddressListForCustomerLinks;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * A paginated container of Shipping Addresses. 
 */
@JsonPropertyOrder({
  ShippingAddressListForCustomer.JSON_PROPERTY_LINKS,
  ShippingAddressListForCustomer.JSON_PROPERTY_OFFSET,
  ShippingAddressListForCustomer.JSON_PROPERTY_LIMIT,
  ShippingAddressListForCustomer.JSON_PROPERTY_COUNT,
  ShippingAddressListForCustomer.JSON_PROPERTY_TOTAL,
  ShippingAddressListForCustomer.JSON_PROPERTY_EMBEDDED
})
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T19:17:21.826843+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class ShippingAddressListForCustomer {
  public static final String JSON_PROPERTY_LINKS = "_links";
  private ShippingAddressListForCustomerLinks links;

  public static final String JSON_PROPERTY_OFFSET = "offset";
  private Integer offset;

  public static final String JSON_PROPERTY_LIMIT = "limit";
  private Integer limit;

  public static final String JSON_PROPERTY_COUNT = "count";
  private Integer count;

  public static final String JSON_PROPERTY_TOTAL = "total";
  private Integer total;

  public static final String JSON_PROPERTY_EMBEDDED = "_embedded";
  private ShippingAddressListForCustomerEmbedded embedded;

  public ShippingAddressListForCustomer() {
  }
  /**
   * Constructor with only readonly parameters
   */
  @JsonCreator
  public ShippingAddressListForCustomer(
    @JsonProperty(JSON_PROPERTY_OFFSET) Integer offset, 
    @JsonProperty(JSON_PROPERTY_LIMIT) Integer limit, 
    @JsonProperty(JSON_PROPERTY_COUNT) Integer count, 
    @JsonProperty(JSON_PROPERTY_TOTAL) Integer total
  ) {
    this();
    this.offset = offset;
    this.limit = limit;
    this.count = count;
    this.total = total;
  }

  public ShippingAddressListForCustomer links(ShippingAddressListForCustomerLinks links) {
    
    this.links = links;
    return this;
  }

  /**
   * Get links
   * @return links
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LINKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ShippingAddressListForCustomerLinks getLinks() {
    return links;
  }


  @JsonProperty(JSON_PROPERTY_LINKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLinks(ShippingAddressListForCustomerLinks links) {
    this.links = links;
  }

  /**
   * The offset parameter supplied in the request.
   * @return offset
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OFFSET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getOffset() {
    return offset;
  }



  /**
   * The limit parameter supplied in the request.
   * @return limit
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getLimit() {
    return limit;
  }



  /**
   * The number of Shipping Addresses returned in the array.
   * @return count
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getCount() {
    return count;
  }



  /**
   * The total number of Shipping Addresses associated with the Customer.
   * @return total
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTotal() {
    return total;
  }



  public ShippingAddressListForCustomer embedded(ShippingAddressListForCustomerEmbedded embedded) {
    
    this.embedded = embedded;
    return this;
  }

  /**
   * Get embedded
   * @return embedded
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EMBEDDED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ShippingAddressListForCustomerEmbedded getEmbedded() {
    return embedded;
  }


  @JsonProperty(JSON_PROPERTY_EMBEDDED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEmbedded(ShippingAddressListForCustomerEmbedded embedded) {
    this.embedded = embedded;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShippingAddressListForCustomer shippingAddressListForCustomer = (ShippingAddressListForCustomer) o;
    return Objects.equals(this.links, shippingAddressListForCustomer.links) &&
        Objects.equals(this.offset, shippingAddressListForCustomer.offset) &&
        Objects.equals(this.limit, shippingAddressListForCustomer.limit) &&
        Objects.equals(this.count, shippingAddressListForCustomer.count) &&
        Objects.equals(this.total, shippingAddressListForCustomer.total) &&
        Objects.equals(this.embedded, shippingAddressListForCustomer.embedded);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, offset, limit, count, total, embedded);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShippingAddressListForCustomer {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    embedded: ").append(toIndentedString(embedded)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

