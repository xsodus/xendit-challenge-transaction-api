/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.client.model.CreatePaymentRequestOrderInformationBillToCompany;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CreatePaymentRequestOrderInformationBillTo
 */
@JsonPropertyOrder({
  CreatePaymentRequestOrderInformationBillTo.JSON_PROPERTY_FIRST_NAME,
  CreatePaymentRequestOrderInformationBillTo.JSON_PROPERTY_LAST_NAME,
  CreatePaymentRequestOrderInformationBillTo.JSON_PROPERTY_MIDDLE_NAME,
  CreatePaymentRequestOrderInformationBillTo.JSON_PROPERTY_NAME_SUFFIX,
  CreatePaymentRequestOrderInformationBillTo.JSON_PROPERTY_TITLE,
  CreatePaymentRequestOrderInformationBillTo.JSON_PROPERTY_COMPANY,
  CreatePaymentRequestOrderInformationBillTo.JSON_PROPERTY_ADDRESS1,
  CreatePaymentRequestOrderInformationBillTo.JSON_PROPERTY_ADDRESS2,
  CreatePaymentRequestOrderInformationBillTo.JSON_PROPERTY_ADDRESS3,
  CreatePaymentRequestOrderInformationBillTo.JSON_PROPERTY_ADDRESS4,
  CreatePaymentRequestOrderInformationBillTo.JSON_PROPERTY_LOCALITY,
  CreatePaymentRequestOrderInformationBillTo.JSON_PROPERTY_ADMINISTRATIVE_AREA,
  CreatePaymentRequestOrderInformationBillTo.JSON_PROPERTY_POSTAL_CODE,
  CreatePaymentRequestOrderInformationBillTo.JSON_PROPERTY_COUNTY,
  CreatePaymentRequestOrderInformationBillTo.JSON_PROPERTY_COUNTRY,
  CreatePaymentRequestOrderInformationBillTo.JSON_PROPERTY_DISTRICT,
  CreatePaymentRequestOrderInformationBillTo.JSON_PROPERTY_BUILDING_NUMBER,
  CreatePaymentRequestOrderInformationBillTo.JSON_PROPERTY_EMAIL,
  CreatePaymentRequestOrderInformationBillTo.JSON_PROPERTY_EMAIL_DOMAIN,
  CreatePaymentRequestOrderInformationBillTo.JSON_PROPERTY_PHONE_NUMBER,
  CreatePaymentRequestOrderInformationBillTo.JSON_PROPERTY_PHONE_TYPE,
  CreatePaymentRequestOrderInformationBillTo.JSON_PROPERTY_VERIFICATION_STATUS,
  CreatePaymentRequestOrderInformationBillTo.JSON_PROPERTY_ALTERNATE_PHONE_NUMBER,
  CreatePaymentRequestOrderInformationBillTo.JSON_PROPERTY_ALTERNATE_EMAIL
})
@JsonTypeName("createPayment_request_orderInformation_billTo")
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T19:17:21.826843+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class CreatePaymentRequestOrderInformationBillTo {
  public static final String JSON_PROPERTY_FIRST_NAME = "firstName";
  private String firstName;

  public static final String JSON_PROPERTY_LAST_NAME = "lastName";
  private String lastName;

  public static final String JSON_PROPERTY_MIDDLE_NAME = "middleName";
  private String middleName;

  public static final String JSON_PROPERTY_NAME_SUFFIX = "nameSuffix";
  private String nameSuffix;

  public static final String JSON_PROPERTY_TITLE = "title";
  private String title;

  public static final String JSON_PROPERTY_COMPANY = "company";
  private CreatePaymentRequestOrderInformationBillToCompany company;

  public static final String JSON_PROPERTY_ADDRESS1 = "address1";
  private String address1;

  public static final String JSON_PROPERTY_ADDRESS2 = "address2";
  private String address2;

  public static final String JSON_PROPERTY_ADDRESS3 = "address3";
  private String address3;

  public static final String JSON_PROPERTY_ADDRESS4 = "address4";
  private String address4;

  public static final String JSON_PROPERTY_LOCALITY = "locality";
  private String locality;

  public static final String JSON_PROPERTY_ADMINISTRATIVE_AREA = "administrativeArea";
  private String administrativeArea;

  public static final String JSON_PROPERTY_POSTAL_CODE = "postalCode";
  private String postalCode;

  public static final String JSON_PROPERTY_COUNTY = "county";
  private String county;

  public static final String JSON_PROPERTY_COUNTRY = "country";
  private String country;

  public static final String JSON_PROPERTY_DISTRICT = "district";
  private String district;

  public static final String JSON_PROPERTY_BUILDING_NUMBER = "buildingNumber";
  private String buildingNumber;

  public static final String JSON_PROPERTY_EMAIL = "email";
  private String email;

  public static final String JSON_PROPERTY_EMAIL_DOMAIN = "emailDomain";
  private String emailDomain;

  public static final String JSON_PROPERTY_PHONE_NUMBER = "phoneNumber";
  private String phoneNumber;

  public static final String JSON_PROPERTY_PHONE_TYPE = "phoneType";
  private String phoneType;

  public static final String JSON_PROPERTY_VERIFICATION_STATUS = "verificationStatus";
  private String verificationStatus;

  public static final String JSON_PROPERTY_ALTERNATE_PHONE_NUMBER = "alternatePhoneNumber";
  private String alternatePhoneNumber;

  public static final String JSON_PROPERTY_ALTERNATE_EMAIL = "alternateEmail";
  private String alternateEmail;

  public CreatePaymentRequestOrderInformationBillTo() {
  }

  public CreatePaymentRequestOrderInformationBillTo firstName(String firstName) {
    
    this.firstName = firstName;
    return this;
  }

  /**
   * Customer&#39;s first name. This name must be the same as the name on the card.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### SEPA Required for Create Mandate and Import Mandate #### BACS Required for Import Mandate  #### CyberSource Latin American Processing **Important** For an authorization request, CyberSource Latin American Processing concatenates &#x60;orderInformation.billTo.firstName&#x60; and &#x60;orderInformation.billTo.lastName&#x60;. If the concatenated value exceeds 30 characters, CyberSource Latin American Processing declines the authorization request.\\ **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports. In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America. The information in this field description is for the specific processing connection called _CyberSource Latin American Processing_. It is not for any other Latin American processors that CyberSource supports.  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### For Payouts: This field may be sent only for FDC Compass.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when &#x60;processingInformation.billPaymentOptions.billPayment&#x3D;true&#x60; and &#x60;pointOfSaleInformation.entryMode&#x3D;keyed&#x60;.  #### Worldpay VAP Optional field.  #### All other processors Not used. 
   * @return firstName
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FIRST_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFirstName() {
    return firstName;
  }


  @JsonProperty(JSON_PROPERTY_FIRST_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }

  public CreatePaymentRequestOrderInformationBillTo lastName(String lastName) {
    
    this.lastName = lastName;
    return this;
  }

  /**
   * Customer&#39;s last name. This name must be the same as the name on the card.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### SEPA Required for Create Mandate and Import Mandate #### BACS Required for Import Mandate #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### CyberSource Latin American Processing **Important** For an authorization request, CyberSource Latin American Processing concatenates &#x60;orderInformation.billTo.firstName&#x60; and &#x60;orderInformation.billTo.lastName&#x60;. If the concatenated value exceeds 30 characters, CyberSource Latin American Processing declines the authorization request.\\ **Note** CyberSource Latin American Processing is the name of a specific processing connection that CyberSource supports. In the CyberSource API documentation, CyberSource Latin American Processing does not refer to the general topic of processing in Latin America. The information in this field description is for the specific processing connection called CyberSource Latin American Processing. It is not for any other Latin American processors that CyberSource supports.  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### For Payouts: This field may be sent only for FDC Compass.  #### OmniPay Direct Optional field.  #### RBS WorldPay Atlanta Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when &#x60;processingInformation.billPaymentOptions.billPayment&#x3D;true&#x60; and &#x60;pointOfSaleInformation.entryMode&#x3D;keyed&#x60;.  #### Worldpay VAP Optional field.  #### All other processors Not used. 
   * @return lastName
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LAST_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLastName() {
    return lastName;
  }


  @JsonProperty(JSON_PROPERTY_LAST_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLastName(String lastName) {
    this.lastName = lastName;
  }

  public CreatePaymentRequestOrderInformationBillTo middleName(String middleName) {
    
    this.middleName = middleName;
    return this;
  }

  /**
   * Customer&#39;s middle name. 
   * @return middleName
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MIDDLE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMiddleName() {
    return middleName;
  }


  @JsonProperty(JSON_PROPERTY_MIDDLE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMiddleName(String middleName) {
    this.middleName = middleName;
  }

  public CreatePaymentRequestOrderInformationBillTo nameSuffix(String nameSuffix) {
    
    this.nameSuffix = nameSuffix;
    return this;
  }

  /**
   * Customer&#39;s name suffix. 
   * @return nameSuffix
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME_SUFFIX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNameSuffix() {
    return nameSuffix;
  }


  @JsonProperty(JSON_PROPERTY_NAME_SUFFIX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNameSuffix(String nameSuffix) {
    this.nameSuffix = nameSuffix;
  }

  public CreatePaymentRequestOrderInformationBillTo title(String title) {
    
    this.title = title;
    return this;
  }

  /**
   * Title. 
   * @return title
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTitle() {
    return title;
  }


  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTitle(String title) {
    this.title = title;
  }

  public CreatePaymentRequestOrderInformationBillTo company(CreatePaymentRequestOrderInformationBillToCompany company) {
    
    this.company = company;
    return this;
  }

  /**
   * Get company
   * @return company
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMPANY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CreatePaymentRequestOrderInformationBillToCompany getCompany() {
    return company;
  }


  @JsonProperty(JSON_PROPERTY_COMPANY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCompany(CreatePaymentRequestOrderInformationBillToCompany company) {
    this.company = company;
  }

  public CreatePaymentRequestOrderInformationBillTo address1(String address1) {
    
    this.address1 = address1;
    return this;
  }

  /**
   * Payment card billing street address as it appears on the credit card issuer&#39;s records.  #### SEPA Required for Create Mandate and Import Mandate  #### Atos This field must not contain colons (:).  #### CyberSource through VisaNet **Important** When you populate orderInformation.billTo.address1 and orderInformation.billTo.address2, CyberSource through VisaNet concatenates the two values. If the concatenated value exceeds 40 characters, CyberSource through VisaNet truncates the value at 40 characters before sending it to Visa and the issuing bank. Truncating this value affects AVS results and therefore might also affect risk decisions and chargebacks. Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### FDMS Nashville When the street name is numeric, it must be sent in numeric format. For example, if the address is _One First Street_, it must be sent as _1 1st Street_.  Required if keyed; not used if swiped.  String (20)  #### TSYS Acquiring Solutions Required when &#x60;processingInformation.billPaymentOptions.billPayment&#x3D;true&#x60; and &#x60;pointOfSaleInformation.entryMode&#x3D;keyed&#x60;.  #### All other processors: Optional. String (60)  #### For Payouts This field may be sent only for FDC Compass.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting. 
   * @return address1
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ADDRESS1)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAddress1() {
    return address1;
  }


  @JsonProperty(JSON_PROPERTY_ADDRESS1)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAddress1(String address1) {
    this.address1 = address1;
  }

  public CreatePaymentRequestOrderInformationBillTo address2(String address2) {
    
    this.address2 = address2;
    return this;
  }

  /**
   * Used for additional address information. For example: _Attention: Accounts Payable_ Optional field.  For Payouts: This field may be sent only for FDC Compass.  #### Atos This field must not contain colons (:).  #### CyberSource through VisaNet **Important** When you populate &#x60;orderInformation.billTo.address1&#x60; and &#x60;orderInformation.billTo.address2&#x60;, CyberSource through VisaNet concatenates the two values. If the concatenated value exceeds 40 characters, CyberSource through VisaNet truncates the value at 40 characters before sending it to Visa and the issuing bank. Truncating this value affects AVS results and therefore might also affect risk decisions and chargebacks. Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### Chase Paymentech Solutions, FDC Compass, and TSYS Acquiring Solutions This value is used for AVS.  #### FDMS Nashville &#x60;orderInformation.billTo.address1&#x60; and &#x60;orderInformation.billTo.address2&#x60; together cannot exceed 20 characters. String (20)  #### All Other Processors String (60) 
   * @return address2
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ADDRESS2)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAddress2() {
    return address2;
  }


  @JsonProperty(JSON_PROPERTY_ADDRESS2)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAddress2(String address2) {
    this.address2 = address2;
  }

  public CreatePaymentRequestOrderInformationBillTo address3(String address3) {
    
    this.address3 = address3;
    return this;
  }

  /**
   * Additional address information (third line of the billing address) 
   * @return address3
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ADDRESS3)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAddress3() {
    return address3;
  }


  @JsonProperty(JSON_PROPERTY_ADDRESS3)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAddress3(String address3) {
    this.address3 = address3;
  }

  public CreatePaymentRequestOrderInformationBillTo address4(String address4) {
    
    this.address4 = address4;
    return this;
  }

  /**
   * Additional address information (fourth line of the billing address) 
   * @return address4
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ADDRESS4)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAddress4() {
    return address4;
  }


  @JsonProperty(JSON_PROPERTY_ADDRESS4)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAddress4(String address4) {
    this.address4 = address4;
  }

  public CreatePaymentRequestOrderInformationBillTo locality(String locality) {
    
    this.locality = locality;
    return this;
  }

  /**
   * Payment card billing city.  #### SEPA Required for Create Mandate and Import Mandate  #### Atos This field must not contain colons (:).  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### For Payouts: This field may be sent only for FDC Compass.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when &#x60;processingInformation.billPaymentOptions.billPayment&#x3D;true&#x60; and &#x60;pointOfSaleInformation.entryMode&#x3D;keyed&#x60;.  #### Worldpay VAP Optional field.  #### All other processors Not used. 
   * @return locality
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOCALITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLocality() {
    return locality;
  }


  @JsonProperty(JSON_PROPERTY_LOCALITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLocality(String locality) {
    this.locality = locality;
  }

  public CreatePaymentRequestOrderInformationBillTo administrativeArea(String administrativeArea) {
    
    this.administrativeArea = administrativeArea;
    return this;
  }

  /**
   * State or province of the billing address. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf).  For Payouts: This field may be sent only for FDC Compass.  ##### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when &#x60;processingInformation.billPaymentOptions.billPayment&#x3D;true&#x60; and &#x60;pointOfSaleInformation.entryMode&#x3D;keyed&#x60;.  #### Worldpay VAP Optional field.  #### All other processors Not used. 
   * @return administrativeArea
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ADMINISTRATIVE_AREA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAdministrativeArea() {
    return administrativeArea;
  }


  @JsonProperty(JSON_PROPERTY_ADMINISTRATIVE_AREA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAdministrativeArea(String administrativeArea) {
    this.administrativeArea = administrativeArea;
  }

  public CreatePaymentRequestOrderInformationBillTo postalCode(String postalCode) {
    
    this.postalCode = postalCode;
    return this;
  }

  /**
   * Postal code for the billing address. The postal code must consist of 5 to 9 digits.  When the billing country is the U.S., the 9-digit postal code must follow this format: [5 digits][dash][4 digits]  **Example** &#x60;12345-6789&#x60;  When the billing country is Canada, the 6-digit postal code must follow this format: [alpha][numeric][alpha][space][numeric][alpha][numeric]  **Example** &#x60;A1B 2C3&#x60;  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### SEPA Required for Create Mandate and Import Mandate  #### For Payouts:  This field may be sent only for FDC Compass.  #### American Express Direct Before sending the postal code to the processor, CyberSource removes all nonalphanumeric characters and, if the remaining value is longer than nine characters, truncates the value starting from the right side.  #### Atos This field must not contain colons (:).  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### FDMS Nashville Required if &#x60;pointOfSaleInformation.entryMode&#x3D;keyed&#x60; and the address is in the U.S. or Canada. Optional if &#x60;pointOfSaleInformation.entryMode&#x3D;keyed&#x60; and the address is **not** in the U.S. or Canada. Not used if swiped.  #### RBS WorldPay Atlanta: For best card-present keyed rates, send the postal code if &#x60;pointOfSaleInformation.entryMode&#x3D;keyed&#x60;.  #### TSYS Acquiring Solutions Required when &#x60;processingInformation.billPaymentOptions.billPayment&#x3D;true&#x60; and &#x60;pointOfSaleInformation.entryMode&#x3D;keyed&#x60;.  #### All other processors: Optional field. 
   * @return postalCode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_POSTAL_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPostalCode() {
    return postalCode;
  }


  @JsonProperty(JSON_PROPERTY_POSTAL_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }

  public CreatePaymentRequestOrderInformationBillTo county(String county) {
    
    this.county = county;
    return this;
  }

  /**
   * U.S. county if available.
   * @return county
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COUNTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCounty() {
    return county;
  }


  @JsonProperty(JSON_PROPERTY_COUNTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCounty(String county) {
    this.county = county;
  }

  public CreatePaymentRequestOrderInformationBillTo country(String country) {
    
    this.country = country;
    return this;
  }

  /**
   * Payment card billing country. Use the two-character [ISO Standard Country Codes](http://apps.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf).  #### SEPA/BACS Required for Create Mandate and Import Mandate  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when &#x60;processingInformation.billPaymentOptions.billPayment&#x3D;true&#x60; and &#x60;pointOfSaleInformation.entryMode&#x3D;keyed&#x60;.  #### Worldpay VAP Optional field.  #### All other processors Not used. 
   * @return country
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCountry() {
    return country;
  }


  @JsonProperty(JSON_PROPERTY_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCountry(String country) {
    this.country = country;
  }

  public CreatePaymentRequestOrderInformationBillTo district(String district) {
    
    this.district = district;
    return this;
  }

  /**
   * Customer&#39;s neighborhood, community, or region (a barrio in Brazil) within the city or municipality. This field is available only on **Cielo**. 
   * @return district
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DISTRICT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDistrict() {
    return district;
  }


  @JsonProperty(JSON_PROPERTY_DISTRICT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDistrict(String district) {
    this.district = district;
  }

  public CreatePaymentRequestOrderInformationBillTo buildingNumber(String buildingNumber) {
    
    this.buildingNumber = buildingNumber;
    return this;
  }

  /**
   * Building number in the street address.  For example, if the street address is: Rua da Quitanda 187 then the building number is 187.  This field is supported only for:  - Cielo transactions.  - Redecard customer validation with CyberSource Latin American Processing. 
   * @return buildingNumber
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BUILDING_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBuildingNumber() {
    return buildingNumber;
  }


  @JsonProperty(JSON_PROPERTY_BUILDING_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBuildingNumber(String buildingNumber) {
    this.buildingNumber = buildingNumber;
  }

  public CreatePaymentRequestOrderInformationBillTo email(String email) {
    
    this.email = email;
    return this;
  }

  /**
   * Customer&#39;s email address, including the full domain name.  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  **Important** It is your responsibility to determine whether a field is required for the transaction you are requesting.  #### Invoicing Email address for the customer for sending the invoice. If the invoice is in SENT status and email is updated, the old email customer payment link won&#39;t work and you must resend the invoice with the new payment link.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Required when &#x60;processingInformation.billPaymentOptions.billPayment&#x3D;true&#x60; and &#x60;pointOfSaleInformation.entryMode&#x3D;keyed&#x60;.  #### Worldpay VAP Optional field.  #### All other processors Not used. 
   * @return email
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EMAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEmail() {
    return email;
  }


  @JsonProperty(JSON_PROPERTY_EMAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEmail(String email) {
    this.email = email;
  }

  public CreatePaymentRequestOrderInformationBillTo emailDomain(String emailDomain) {
    
    this.emailDomain = emailDomain;
    return this;
  }

  /**
   * Email domain of the customer. The domain of the email address comprises all characters that follow the @ symbol, such as mail.example.com. For the Risk Update service, if the email address and the domain are sent in the request, the domain supersedes the email address. 
   * @return emailDomain
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EMAIL_DOMAIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEmailDomain() {
    return emailDomain;
  }


  @JsonProperty(JSON_PROPERTY_EMAIL_DOMAIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEmailDomain(String emailDomain) {
    this.emailDomain = emailDomain;
  }

  public CreatePaymentRequestOrderInformationBillTo phoneNumber(String phoneNumber) {
    
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * Customer&#39;s phone number.  It is recommended that you include the country code when the order is from outside the U.S.  #### Chase Paymentech Solutions Optional field.  ####  Credit Mutuel-CIC Optional field.  #### CyberSource through VisaNet Credit card networks cannot process transactions that contain non-ASCII characters. CyberSource through VisaNet accepts and stores non-ASCII characters correctly and displays them correctly in reports. However, the limitations of the credit card networks prevent CyberSource through VisaNet from transmitting non-ASCII characters to the credit card networks. Therefore, CyberSource through VisaNet replaces non-ASCII characters with meaningless ASCII characters for transmission to the credit card networks.  #### For Payouts: This field may be sent only for FDC Compass.  #### OmniPay Direct Optional field.  #### SIX Optional field.  #### TSYS Acquiring Solutions Optional field.  #### Worldpay VAP Optional field.  #### All other processors Not used. 
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PHONE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPhoneNumber() {
    return phoneNumber;
  }


  @JsonProperty(JSON_PROPERTY_PHONE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }

  public CreatePaymentRequestOrderInformationBillTo phoneType(String phoneType) {
    
    this.phoneType = phoneType;
    return this;
  }

  /**
   * Customer&#39;s phone number type.  #### For Payouts: This field may be sent only for FDC Compass.  Possible Values: * day * home * night * work 
   * @return phoneType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PHONE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPhoneType() {
    return phoneType;
  }


  @JsonProperty(JSON_PROPERTY_PHONE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPhoneType(String phoneType) {
    this.phoneType = phoneType;
  }

  public CreatePaymentRequestOrderInformationBillTo verificationStatus(String verificationStatus) {
    
    this.verificationStatus = verificationStatus;
    return this;
  }

  /**
   * Whether buyer has verified their identity. Used in case of PayPal transactions.  Possible Values: * VERIFIED * UNVERIFIED 
   * @return verificationStatus
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VERIFICATION_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getVerificationStatus() {
    return verificationStatus;
  }


  @JsonProperty(JSON_PROPERTY_VERIFICATION_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVerificationStatus(String verificationStatus) {
    this.verificationStatus = verificationStatus;
  }

  public CreatePaymentRequestOrderInformationBillTo alternatePhoneNumber(String alternatePhoneNumber) {
    
    this.alternatePhoneNumber = alternatePhoneNumber;
    return this;
  }

  /**
   * #### Visa Platform Connect contains customer&#39;s alternate phone number. 
   * @return alternatePhoneNumber
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALTERNATE_PHONE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAlternatePhoneNumber() {
    return alternatePhoneNumber;
  }


  @JsonProperty(JSON_PROPERTY_ALTERNATE_PHONE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAlternatePhoneNumber(String alternatePhoneNumber) {
    this.alternatePhoneNumber = alternatePhoneNumber;
  }

  public CreatePaymentRequestOrderInformationBillTo alternateEmail(String alternateEmail) {
    
    this.alternateEmail = alternateEmail;
    return this;
  }

  /**
   * #### Visa Platform Connect contains customer&#39;s alternate email address. 
   * @return alternateEmail
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALTERNATE_EMAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAlternateEmail() {
    return alternateEmail;
  }


  @JsonProperty(JSON_PROPERTY_ALTERNATE_EMAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAlternateEmail(String alternateEmail) {
    this.alternateEmail = alternateEmail;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreatePaymentRequestOrderInformationBillTo createPaymentRequestOrderInformationBillTo = (CreatePaymentRequestOrderInformationBillTo) o;
    return Objects.equals(this.firstName, createPaymentRequestOrderInformationBillTo.firstName) &&
        Objects.equals(this.lastName, createPaymentRequestOrderInformationBillTo.lastName) &&
        Objects.equals(this.middleName, createPaymentRequestOrderInformationBillTo.middleName) &&
        Objects.equals(this.nameSuffix, createPaymentRequestOrderInformationBillTo.nameSuffix) &&
        Objects.equals(this.title, createPaymentRequestOrderInformationBillTo.title) &&
        Objects.equals(this.company, createPaymentRequestOrderInformationBillTo.company) &&
        Objects.equals(this.address1, createPaymentRequestOrderInformationBillTo.address1) &&
        Objects.equals(this.address2, createPaymentRequestOrderInformationBillTo.address2) &&
        Objects.equals(this.address3, createPaymentRequestOrderInformationBillTo.address3) &&
        Objects.equals(this.address4, createPaymentRequestOrderInformationBillTo.address4) &&
        Objects.equals(this.locality, createPaymentRequestOrderInformationBillTo.locality) &&
        Objects.equals(this.administrativeArea, createPaymentRequestOrderInformationBillTo.administrativeArea) &&
        Objects.equals(this.postalCode, createPaymentRequestOrderInformationBillTo.postalCode) &&
        Objects.equals(this.county, createPaymentRequestOrderInformationBillTo.county) &&
        Objects.equals(this.country, createPaymentRequestOrderInformationBillTo.country) &&
        Objects.equals(this.district, createPaymentRequestOrderInformationBillTo.district) &&
        Objects.equals(this.buildingNumber, createPaymentRequestOrderInformationBillTo.buildingNumber) &&
        Objects.equals(this.email, createPaymentRequestOrderInformationBillTo.email) &&
        Objects.equals(this.emailDomain, createPaymentRequestOrderInformationBillTo.emailDomain) &&
        Objects.equals(this.phoneNumber, createPaymentRequestOrderInformationBillTo.phoneNumber) &&
        Objects.equals(this.phoneType, createPaymentRequestOrderInformationBillTo.phoneType) &&
        Objects.equals(this.verificationStatus, createPaymentRequestOrderInformationBillTo.verificationStatus) &&
        Objects.equals(this.alternatePhoneNumber, createPaymentRequestOrderInformationBillTo.alternatePhoneNumber) &&
        Objects.equals(this.alternateEmail, createPaymentRequestOrderInformationBillTo.alternateEmail);
  }

  @Override
  public int hashCode() {
    return Objects.hash(firstName, lastName, middleName, nameSuffix, title, company, address1, address2, address3, address4, locality, administrativeArea, postalCode, county, country, district, buildingNumber, email, emailDomain, phoneNumber, phoneType, verificationStatus, alternatePhoneNumber, alternateEmail);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreatePaymentRequestOrderInformationBillTo {\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    middleName: ").append(toIndentedString(middleName)).append("\n");
    sb.append("    nameSuffix: ").append(toIndentedString(nameSuffix)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    address1: ").append(toIndentedString(address1)).append("\n");
    sb.append("    address2: ").append(toIndentedString(address2)).append("\n");
    sb.append("    address3: ").append(toIndentedString(address3)).append("\n");
    sb.append("    address4: ").append(toIndentedString(address4)).append("\n");
    sb.append("    locality: ").append(toIndentedString(locality)).append("\n");
    sb.append("    administrativeArea: ").append(toIndentedString(administrativeArea)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    county: ").append(toIndentedString(county)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    district: ").append(toIndentedString(district)).append("\n");
    sb.append("    buildingNumber: ").append(toIndentedString(buildingNumber)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    emailDomain: ").append(toIndentedString(emailDomain)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    phoneType: ").append(toIndentedString(phoneType)).append("\n");
    sb.append("    verificationStatus: ").append(toIndentedString(verificationStatus)).append("\n");
    sb.append("    alternatePhoneNumber: ").append(toIndentedString(alternatePhoneNumber)).append("\n");
    sb.append("    alternateEmail: ").append(toIndentedString(alternateEmail)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

