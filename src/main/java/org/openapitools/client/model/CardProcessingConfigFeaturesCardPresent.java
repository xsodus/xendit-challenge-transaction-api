/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.CardProcessingConfigFeaturesCardPresentProcessorsValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CardProcessingConfigFeaturesCardPresent
 */
@JsonPropertyOrder({
  CardProcessingConfigFeaturesCardPresent.JSON_PROPERTY_PROCESSORS,
  CardProcessingConfigFeaturesCardPresent.JSON_PROPERTY_ENABLE_TERMINAL_ID_LOOKUP
})
@JsonTypeName("CardProcessingConfig_features_cardPresent")
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T19:17:21.826843+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class CardProcessingConfigFeaturesCardPresent {
  public static final String JSON_PROPERTY_PROCESSORS = "processors";
  private Map<String, CardProcessingConfigFeaturesCardPresentProcessorsValue> processors = new HashMap<>();

  public static final String JSON_PROPERTY_ENABLE_TERMINAL_ID_LOOKUP = "enableTerminalIdLookup";
  private Boolean enableTerminalIdLookup;

  public CardProcessingConfigFeaturesCardPresent() {
  }

  public CardProcessingConfigFeaturesCardPresent processors(Map<String, CardProcessingConfigFeaturesCardPresentProcessorsValue> processors) {
    
    this.processors = processors;
    return this;
  }

  public CardProcessingConfigFeaturesCardPresent putProcessorsItem(String key, CardProcessingConfigFeaturesCardPresentProcessorsValue processorsItem) {
    if (this.processors == null) {
      this.processors = new HashMap<>();
    }
    this.processors.put(key, processorsItem);
    return this;
  }

  /**
   * e.g. * amexdirect * barclays2 * CUP * EFTPOS * fdiglobal * gpx * smartfdc * tsys * vero * VPC  For VPC, CUP and EFTPOS processors, replace the processor name from VPC or CUP or EFTPOS to the actual processor name in the sample request. e.g. replace VPC with &amp;lt;your vpc processor&amp;gt; 
   * @return processors
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROCESSORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, CardProcessingConfigFeaturesCardPresentProcessorsValue> getProcessors() {
    return processors;
  }


  @JsonProperty(JSON_PROPERTY_PROCESSORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProcessors(Map<String, CardProcessingConfigFeaturesCardPresentProcessorsValue> processors) {
    this.processors = processors;
  }

  public CardProcessingConfigFeaturesCardPresent enableTerminalIdLookup(Boolean enableTerminalIdLookup) {
    
    this.enableTerminalIdLookup = enableTerminalIdLookup;
    return this;
  }

  /**
   * Used for Card Present and Virtual Terminal Transactions for Terminal ID lookup. Applicable for GPX (gpx) processor.
   * @return enableTerminalIdLookup
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_TERMINAL_ID_LOOKUP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnableTerminalIdLookup() {
    return enableTerminalIdLookup;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_TERMINAL_ID_LOOKUP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableTerminalIdLookup(Boolean enableTerminalIdLookup) {
    this.enableTerminalIdLookup = enableTerminalIdLookup;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardProcessingConfigFeaturesCardPresent cardProcessingConfigFeaturesCardPresent = (CardProcessingConfigFeaturesCardPresent) o;
    return Objects.equals(this.processors, cardProcessingConfigFeaturesCardPresent.processors) &&
        Objects.equals(this.enableTerminalIdLookup, cardProcessingConfigFeaturesCardPresent.enableTerminalIdLookup);
  }

  @Override
  public int hashCode() {
    return Objects.hash(processors, enableTerminalIdLookup);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardProcessingConfigFeaturesCardPresent {\n");
    sb.append("    processors: ").append(toIndentedString(processors)).append("\n");
    sb.append("    enableTerminalIdLookup: ").append(toIndentedString(enableTerminalIdLookup)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

