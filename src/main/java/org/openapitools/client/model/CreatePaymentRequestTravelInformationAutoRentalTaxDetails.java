/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CreatePaymentRequestTravelInformationAutoRentalTaxDetails
 */
@JsonPropertyOrder({
  CreatePaymentRequestTravelInformationAutoRentalTaxDetails.JSON_PROPERTY_AMOUNT,
  CreatePaymentRequestTravelInformationAutoRentalTaxDetails.JSON_PROPERTY_RATE,
  CreatePaymentRequestTravelInformationAutoRentalTaxDetails.JSON_PROPERTY_APPLIED,
  CreatePaymentRequestTravelInformationAutoRentalTaxDetails.JSON_PROPERTY_EXEMPTION_CODE,
  CreatePaymentRequestTravelInformationAutoRentalTaxDetails.JSON_PROPERTY_TAX_TYPE,
  CreatePaymentRequestTravelInformationAutoRentalTaxDetails.JSON_PROPERTY_TAX_SUMMARY
})
@JsonTypeName("createPayment_request_travelInformation_autoRental_taxDetails")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T18:32:10.370382+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class CreatePaymentRequestTravelInformationAutoRentalTaxDetails {
  public static final String JSON_PROPERTY_AMOUNT = "amount";
  private String amount;

  public static final String JSON_PROPERTY_RATE = "rate";
  private String rate;

  public static final String JSON_PROPERTY_APPLIED = "applied";
  private Boolean applied;

  public static final String JSON_PROPERTY_EXEMPTION_CODE = "exemptionCode";
  private String exemptionCode;

  public static final String JSON_PROPERTY_TAX_TYPE = "taxType";
  private String taxType;

  public static final String JSON_PROPERTY_TAX_SUMMARY = "taxSummary";
  private String taxSummary;

  public CreatePaymentRequestTravelInformationAutoRentalTaxDetails() {
  }

  public CreatePaymentRequestTravelInformationAutoRentalTaxDetails amount(String amount) {
    
    this.amount = amount;
    return this;
  }

  /**
   * Indicates the amount of tax based on the &#x60;type&#x60; field as described in the table below: 
   * @return amount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAmount() {
    return amount;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAmount(String amount) {
    this.amount = amount;
  }

  public CreatePaymentRequestTravelInformationAutoRentalTaxDetails rate(String rate) {
    
    this.rate = rate;
    return this;
  }

  /**
   * Rate of VAT or other tax for the order.  Example 0.040 (&#x3D;4%)  Valid range: 0.01 to 0.99 (1% to 99%, with only whole percentage values accepted; values with additional decimal places will be truncated) 
   * @return rate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRate() {
    return rate;
  }


  @JsonProperty(JSON_PROPERTY_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRate(String rate) {
    this.rate = rate;
  }

  public CreatePaymentRequestTravelInformationAutoRentalTaxDetails applied(Boolean applied) {
    
    this.applied = applied;
    return this;
  }

  /**
   * Flag that indicates whether the tax amount (&#x60;travelInformation.autoRental.taxDetails.amount&#x60;) is included in the request.  Possible values: - &#x60;false&#x60;: tax amount is not included in the request. - &#x60;true&#x60;:  tax amount is included in the request. 
   * @return applied
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_APPLIED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getApplied() {
    return applied;
  }


  @JsonProperty(JSON_PROPERTY_APPLIED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setApplied(Boolean applied) {
    this.applied = applied;
  }

  public CreatePaymentRequestTravelInformationAutoRentalTaxDetails exemptionCode(String exemptionCode) {
    
    this.exemptionCode = exemptionCode;
    return this;
  }

  /**
   * Status code for exemption from sales and use tax. This field is a pass-through, which means that CyberSource does not verify the value or modify it in any way before sending it to the processor. 
   * @return exemptionCode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXEMPTION_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExemptionCode() {
    return exemptionCode;
  }


  @JsonProperty(JSON_PROPERTY_EXEMPTION_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExemptionCode(String exemptionCode) {
    this.exemptionCode = exemptionCode;
  }

  public CreatePaymentRequestTravelInformationAutoRentalTaxDetails taxType(String taxType) {
    
    this.taxType = taxType;
    return this;
  }

  /**
   * Different taxes the rental agency applies to the rental agreement such as tourist tax, airport tax, or rental tax. 
   * @return taxType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAX_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTaxType() {
    return taxType;
  }


  @JsonProperty(JSON_PROPERTY_TAX_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaxType(String taxType) {
    this.taxType = taxType;
  }

  public CreatePaymentRequestTravelInformationAutoRentalTaxDetails taxSummary(String taxSummary) {
    
    this.taxSummary = taxSummary;
    return this;
  }

  /**
   * Summary of all tax types 
   * @return taxSummary
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAX_SUMMARY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTaxSummary() {
    return taxSummary;
  }


  @JsonProperty(JSON_PROPERTY_TAX_SUMMARY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaxSummary(String taxSummary) {
    this.taxSummary = taxSummary;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreatePaymentRequestTravelInformationAutoRentalTaxDetails createPaymentRequestTravelInformationAutoRentalTaxDetails = (CreatePaymentRequestTravelInformationAutoRentalTaxDetails) o;
    return Objects.equals(this.amount, createPaymentRequestTravelInformationAutoRentalTaxDetails.amount) &&
        Objects.equals(this.rate, createPaymentRequestTravelInformationAutoRentalTaxDetails.rate) &&
        Objects.equals(this.applied, createPaymentRequestTravelInformationAutoRentalTaxDetails.applied) &&
        Objects.equals(this.exemptionCode, createPaymentRequestTravelInformationAutoRentalTaxDetails.exemptionCode) &&
        Objects.equals(this.taxType, createPaymentRequestTravelInformationAutoRentalTaxDetails.taxType) &&
        Objects.equals(this.taxSummary, createPaymentRequestTravelInformationAutoRentalTaxDetails.taxSummary);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, rate, applied, exemptionCode, taxType, taxSummary);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreatePaymentRequestTravelInformationAutoRentalTaxDetails {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("    applied: ").append(toIndentedString(applied)).append("\n");
    sb.append("    exemptionCode: ").append(toIndentedString(exemptionCode)).append("\n");
    sb.append("    taxType: ").append(toIndentedString(taxType)).append("\n");
    sb.append("    taxSummary: ").append(toIndentedString(taxSummary)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

