/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CreatePushFundsTransferRequestOrderInformationAmountDetails
 */
@JsonPropertyOrder({
  CreatePushFundsTransferRequestOrderInformationAmountDetails.JSON_PROPERTY_TOTAL_AMOUNT,
  CreatePushFundsTransferRequestOrderInformationAmountDetails.JSON_PROPERTY_CURRENCY,
  CreatePushFundsTransferRequestOrderInformationAmountDetails.JSON_PROPERTY_SOURCE_CURRENCY,
  CreatePushFundsTransferRequestOrderInformationAmountDetails.JSON_PROPERTY_DESTINATION_CURRENCY
})
@JsonTypeName("createPushFundsTransfer_request_orderInformation_amountDetails")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T18:32:10.370382+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class CreatePushFundsTransferRequestOrderInformationAmountDetails {
  public static final String JSON_PROPERTY_TOTAL_AMOUNT = "totalAmount";
  private String totalAmount;

  public static final String JSON_PROPERTY_CURRENCY = "currency";
  private String currency;

  public static final String JSON_PROPERTY_SOURCE_CURRENCY = "sourceCurrency";
  private JsonNullable<String> sourceCurrency = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_DESTINATION_CURRENCY = "destinationCurrency";
  private JsonNullable<String> destinationCurrency = JsonNullable.<String>undefined();

  public CreatePushFundsTransferRequestOrderInformationAmountDetails() {
  }

  public CreatePushFundsTransferRequestOrderInformationAmountDetails totalAmount(String totalAmount) {
    
    this.totalAmount = totalAmount;
    return this;
  }

  /**
   * Grand total for the order. This value cannot be negative. You can include a decimal point (.), but no other special characters. CyberSource truncates the amount to the correct number of decimal places. 
   * @return totalAmount
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOTAL_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTotalAmount() {
    return totalAmount;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTotalAmount(String totalAmount) {
    this.totalAmount = totalAmount;
  }

  public CreatePushFundsTransferRequestOrderInformationAmountDetails currency(String currency) {
    
    this.currency = currency;
    return this;
  }

  /**
   * Use a 3-character alpha currency code for currency of the funds transfer.  ISO standard currencies: http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf  Currency must be supported by the processor. 
   * @return currency
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCurrency() {
    return currency;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCurrency(String currency) {
    this.currency = currency;
  }

  public CreatePushFundsTransferRequestOrderInformationAmountDetails sourceCurrency(String sourceCurrency) {
    this.sourceCurrency = JsonNullable.<String>of(sourceCurrency);
    
    return this;
  }

  /**
   * Use a 3-character alpha currency code for source currency of the funds transfer. Supported for card and bank account based cross border funds transfers.  ISO standard currencies: http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf 
   * @return sourceCurrency
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public String getSourceCurrency() {
        return sourceCurrency.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SOURCE_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getSourceCurrency_JsonNullable() {
    return sourceCurrency;
  }
  
  @JsonProperty(JSON_PROPERTY_SOURCE_CURRENCY)
  public void setSourceCurrency_JsonNullable(JsonNullable<String> sourceCurrency) {
    this.sourceCurrency = sourceCurrency;
  }

  public void setSourceCurrency(String sourceCurrency) {
    this.sourceCurrency = JsonNullable.<String>of(sourceCurrency);
  }

  public CreatePushFundsTransferRequestOrderInformationAmountDetails destinationCurrency(String destinationCurrency) {
    this.destinationCurrency = JsonNullable.<String>of(destinationCurrency);
    
    return this;
  }

  /**
   * Use a 3-character alpha currency code for destination currency of the funds transfer. Supported for card and bank account based cross border funds transfers.  ISO standard currencies: http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf NOTE: This field is supported only for Visa Platform Connect 
   * @return destinationCurrency
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public String getDestinationCurrency() {
        return destinationCurrency.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DESTINATION_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getDestinationCurrency_JsonNullable() {
    return destinationCurrency;
  }
  
  @JsonProperty(JSON_PROPERTY_DESTINATION_CURRENCY)
  public void setDestinationCurrency_JsonNullable(JsonNullable<String> destinationCurrency) {
    this.destinationCurrency = destinationCurrency;
  }

  public void setDestinationCurrency(String destinationCurrency) {
    this.destinationCurrency = JsonNullable.<String>of(destinationCurrency);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreatePushFundsTransferRequestOrderInformationAmountDetails createPushFundsTransferRequestOrderInformationAmountDetails = (CreatePushFundsTransferRequestOrderInformationAmountDetails) o;
    return Objects.equals(this.totalAmount, createPushFundsTransferRequestOrderInformationAmountDetails.totalAmount) &&
        Objects.equals(this.currency, createPushFundsTransferRequestOrderInformationAmountDetails.currency) &&
        equalsNullable(this.sourceCurrency, createPushFundsTransferRequestOrderInformationAmountDetails.sourceCurrency) &&
        equalsNullable(this.destinationCurrency, createPushFundsTransferRequestOrderInformationAmountDetails.destinationCurrency);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(totalAmount, currency, hashCodeNullable(sourceCurrency), hashCodeNullable(destinationCurrency));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreatePushFundsTransferRequestOrderInformationAmountDetails {\n");
    sb.append("    totalAmount: ").append(toIndentedString(totalAmount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    sourceCurrency: ").append(toIndentedString(sourceCurrency)).append("\n");
    sb.append("    destinationCurrency: ").append(toIndentedString(destinationCurrency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

