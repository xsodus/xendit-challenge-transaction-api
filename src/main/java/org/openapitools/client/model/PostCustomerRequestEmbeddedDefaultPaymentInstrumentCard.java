/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.client.model.PostCustomerRequestEmbeddedDefaultPaymentInstrumentCardTokenizedInformation;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * PostCustomerRequestEmbeddedDefaultPaymentInstrumentCard
 */
@JsonPropertyOrder({
  PostCustomerRequestEmbeddedDefaultPaymentInstrumentCard.JSON_PROPERTY_EXPIRATION_MONTH,
  PostCustomerRequestEmbeddedDefaultPaymentInstrumentCard.JSON_PROPERTY_EXPIRATION_YEAR,
  PostCustomerRequestEmbeddedDefaultPaymentInstrumentCard.JSON_PROPERTY_TYPE,
  PostCustomerRequestEmbeddedDefaultPaymentInstrumentCard.JSON_PROPERTY_ISSUE_NUMBER,
  PostCustomerRequestEmbeddedDefaultPaymentInstrumentCard.JSON_PROPERTY_START_MONTH,
  PostCustomerRequestEmbeddedDefaultPaymentInstrumentCard.JSON_PROPERTY_START_YEAR,
  PostCustomerRequestEmbeddedDefaultPaymentInstrumentCard.JSON_PROPERTY_USE_AS,
  PostCustomerRequestEmbeddedDefaultPaymentInstrumentCard.JSON_PROPERTY_HASH,
  PostCustomerRequestEmbeddedDefaultPaymentInstrumentCard.JSON_PROPERTY_TOKENIZED_INFORMATION
})
@JsonTypeName("postCustomer_request__embedded_defaultPaymentInstrument_card")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T18:32:10.370382+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class PostCustomerRequestEmbeddedDefaultPaymentInstrumentCard {
  public static final String JSON_PROPERTY_EXPIRATION_MONTH = "expirationMonth";
  private String expirationMonth;

  public static final String JSON_PROPERTY_EXPIRATION_YEAR = "expirationYear";
  private String expirationYear;

  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  public static final String JSON_PROPERTY_ISSUE_NUMBER = "issueNumber";
  private String issueNumber;

  public static final String JSON_PROPERTY_START_MONTH = "startMonth";
  private String startMonth;

  public static final String JSON_PROPERTY_START_YEAR = "startYear";
  private String startYear;

  public static final String JSON_PROPERTY_USE_AS = "useAs";
  private String useAs;

  public static final String JSON_PROPERTY_HASH = "hash";
  private String hash;

  public static final String JSON_PROPERTY_TOKENIZED_INFORMATION = "tokenizedInformation";
  private PostCustomerRequestEmbeddedDefaultPaymentInstrumentCardTokenizedInformation tokenizedInformation;

  public PostCustomerRequestEmbeddedDefaultPaymentInstrumentCard() {
  }
  /**
   * Constructor with only readonly parameters
   */
  @JsonCreator
  public PostCustomerRequestEmbeddedDefaultPaymentInstrumentCard(
    @JsonProperty(JSON_PROPERTY_HASH) String hash
  ) {
    this();
    this.hash = hash;
  }

  public PostCustomerRequestEmbeddedDefaultPaymentInstrumentCard expirationMonth(String expirationMonth) {
    
    this.expirationMonth = expirationMonth;
    return this;
  }

  /**
   * Two-digit month in which the payment card expires.  Format: &#x60;MM&#x60;.  Possible Values: &#x60;01&#x60; through &#x60;12&#x60;. 
   * @return expirationMonth
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXPIRATION_MONTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExpirationMonth() {
    return expirationMonth;
  }


  @JsonProperty(JSON_PROPERTY_EXPIRATION_MONTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpirationMonth(String expirationMonth) {
    this.expirationMonth = expirationMonth;
  }

  public PostCustomerRequestEmbeddedDefaultPaymentInstrumentCard expirationYear(String expirationYear) {
    
    this.expirationYear = expirationYear;
    return this;
  }

  /**
   * Four-digit year in which the credit card expires.  Format: &#x60;YYYY&#x60;. 
   * @return expirationYear
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXPIRATION_YEAR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExpirationYear() {
    return expirationYear;
  }


  @JsonProperty(JSON_PROPERTY_EXPIRATION_YEAR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpirationYear(String expirationYear) {
    this.expirationYear = expirationYear;
  }

  public PostCustomerRequestEmbeddedDefaultPaymentInstrumentCard type(String type) {
    
    this.type = type;
    return this;
  }

  /**
   * Value that indicates the card type. Possible Values v2 : v1:   * 001 : visa   * 002 : mastercard - Eurocard—European regional brand of Mastercard   * 003 : american express   * 004 : discover   * 005 : diners club   * 006 : carte blanche   * 007 : jcb   * 008 : optima   * 011 : twinpay credit   * 012 : twinpay debit   * 013 : walmart   * 014 : enRoute   * 015 : lowes consumer   * 016 : home depot consumer   * 017 : mbna   * 018 : dicks sportswear   * 019 : casual corner   * 020 : sears   * 021 : jal   * 023 : disney   * 024 : maestro uk domestic   * 025 : sams club consumer   * 026 : sams club business   * 028 : bill me later   * 029 : bebe   * 030 : restoration hardware   * 031 : delta online — use this value only for Ingenico ePayments. For other processors, use 001 for all Visa card types.   * 032 : solo   * 033 : visa electron   * 034 : dankort   * 035 : laser   * 036 : carte bleue — formerly Cartes Bancaires   * 037 : carta si   * 038 : pinless debit   * 039 : encoded account   * 040 : uatp   * 041 : household   * 042 : maestro international   * 043 : ge money uk   * 044 : korean cards   * 045 : style   * 046 : jcrew   * 047 : payease china processing ewallet   * 048 : payease china processing bank transfer   * 049 : meijer private label   * 050 : hipercard — supported only by the Comercio Latino processor.   * 051 : aura — supported only by the Comercio Latino processor.   * 052 : redecard   * 054 : elo — supported only by the Comercio Latino processor.   * 055 : capital one private label   * 056 : synchrony private label   * 057 : costco private label   * 060 : mada   * 062 : china union pay   * 063 : falabella private label 
   * @return type
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(String type) {
    this.type = type;
  }

  public PostCustomerRequestEmbeddedDefaultPaymentInstrumentCard issueNumber(String issueNumber) {
    
    this.issueNumber = issueNumber;
    return this;
  }

  /**
   * Number of times a Maestro (UK Domestic) card has been issued to the account holder. The card might or might not have an issue number. The number can consist of one or two digits, and the first digit might be a zero. When you include this value in your request, include exactly what is printed on the card. A value of 2 is different than a value of 02. Do not include the field, even with a blank value, if the card is not a Maestro (UK Domestic) card.  **Note** The issue number is not required for Maestro (UK Domestic) transactions. 
   * @return issueNumber
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ISSUE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIssueNumber() {
    return issueNumber;
  }


  @JsonProperty(JSON_PROPERTY_ISSUE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIssueNumber(String issueNumber) {
    this.issueNumber = issueNumber;
  }

  public PostCustomerRequestEmbeddedDefaultPaymentInstrumentCard startMonth(String startMonth) {
    
    this.startMonth = startMonth;
    return this;
  }

  /**
   * Month of the start of the Maestro (UK Domestic) card validity period. Do not include the field, even with a blank value, if the card is not a Maestro (UK Domestic) card. &#x60;Format: MM&#x60;. Possible Values: 01 through 12.  **Note** The start date is not required for Maestro (UK Domestic) transactions. 
   * @return startMonth
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_START_MONTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getStartMonth() {
    return startMonth;
  }


  @JsonProperty(JSON_PROPERTY_START_MONTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStartMonth(String startMonth) {
    this.startMonth = startMonth;
  }

  public PostCustomerRequestEmbeddedDefaultPaymentInstrumentCard startYear(String startYear) {
    
    this.startYear = startYear;
    return this;
  }

  /**
   * Year of the start of the Maestro (UK Domestic) card validity period. Do not include the field, even with a blank value, if the card is not a Maestro (UK Domestic) card. &#x60;Format: YYYY&#x60;.  **Note** The start date is not required for Maestro (UK Domestic) transactions. 
   * @return startYear
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_START_YEAR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getStartYear() {
    return startYear;
  }


  @JsonProperty(JSON_PROPERTY_START_YEAR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStartYear(String startYear) {
    this.startYear = startYear;
  }

  public PostCustomerRequestEmbeddedDefaultPaymentInstrumentCard useAs(String useAs) {
    
    this.useAs = useAs;
    return this;
  }

  /**
   * &#39;Payment Instrument was created / updated as part of a pinless debit transaction.&#39; 
   * @return useAs
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USE_AS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUseAs() {
    return useAs;
  }


  @JsonProperty(JSON_PROPERTY_USE_AS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUseAs(String useAs) {
    this.useAs = useAs;
  }

  /**
   * Hash value representing the card. 
   * @return hash
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HASH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHash() {
    return hash;
  }



  public PostCustomerRequestEmbeddedDefaultPaymentInstrumentCard tokenizedInformation(PostCustomerRequestEmbeddedDefaultPaymentInstrumentCardTokenizedInformation tokenizedInformation) {
    
    this.tokenizedInformation = tokenizedInformation;
    return this;
  }

  /**
   * Get tokenizedInformation
   * @return tokenizedInformation
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOKENIZED_INFORMATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PostCustomerRequestEmbeddedDefaultPaymentInstrumentCardTokenizedInformation getTokenizedInformation() {
    return tokenizedInformation;
  }


  @JsonProperty(JSON_PROPERTY_TOKENIZED_INFORMATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTokenizedInformation(PostCustomerRequestEmbeddedDefaultPaymentInstrumentCardTokenizedInformation tokenizedInformation) {
    this.tokenizedInformation = tokenizedInformation;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostCustomerRequestEmbeddedDefaultPaymentInstrumentCard postCustomerRequestEmbeddedDefaultPaymentInstrumentCard = (PostCustomerRequestEmbeddedDefaultPaymentInstrumentCard) o;
    return Objects.equals(this.expirationMonth, postCustomerRequestEmbeddedDefaultPaymentInstrumentCard.expirationMonth) &&
        Objects.equals(this.expirationYear, postCustomerRequestEmbeddedDefaultPaymentInstrumentCard.expirationYear) &&
        Objects.equals(this.type, postCustomerRequestEmbeddedDefaultPaymentInstrumentCard.type) &&
        Objects.equals(this.issueNumber, postCustomerRequestEmbeddedDefaultPaymentInstrumentCard.issueNumber) &&
        Objects.equals(this.startMonth, postCustomerRequestEmbeddedDefaultPaymentInstrumentCard.startMonth) &&
        Objects.equals(this.startYear, postCustomerRequestEmbeddedDefaultPaymentInstrumentCard.startYear) &&
        Objects.equals(this.useAs, postCustomerRequestEmbeddedDefaultPaymentInstrumentCard.useAs) &&
        Objects.equals(this.hash, postCustomerRequestEmbeddedDefaultPaymentInstrumentCard.hash) &&
        Objects.equals(this.tokenizedInformation, postCustomerRequestEmbeddedDefaultPaymentInstrumentCard.tokenizedInformation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expirationMonth, expirationYear, type, issueNumber, startMonth, startYear, useAs, hash, tokenizedInformation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostCustomerRequestEmbeddedDefaultPaymentInstrumentCard {\n");
    sb.append("    expirationMonth: ").append(toIndentedString(expirationMonth)).append("\n");
    sb.append("    expirationYear: ").append(toIndentedString(expirationYear)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    issueNumber: ").append(toIndentedString(issueNumber)).append("\n");
    sb.append("    startMonth: ").append(toIndentedString(startMonth)).append("\n");
    sb.append("    startYear: ").append(toIndentedString(startYear)).append("\n");
    sb.append("    useAs: ").append(toIndentedString(useAs)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    tokenizedInformation: ").append(toIndentedString(tokenizedInformation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

