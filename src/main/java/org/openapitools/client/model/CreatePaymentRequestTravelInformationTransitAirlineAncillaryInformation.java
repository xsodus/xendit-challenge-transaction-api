/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreatePaymentRequestTravelInformationTransitAirlineAncillaryInformationServiceInner;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CreatePaymentRequestTravelInformationTransitAirlineAncillaryInformation
 */
@JsonPropertyOrder({
  CreatePaymentRequestTravelInformationTransitAirlineAncillaryInformation.JSON_PROPERTY_TICKET_NUMBER,
  CreatePaymentRequestTravelInformationTransitAirlineAncillaryInformation.JSON_PROPERTY_PASSENGER_NAME,
  CreatePaymentRequestTravelInformationTransitAirlineAncillaryInformation.JSON_PROPERTY_CONNECTED_TICKET_NUMBER,
  CreatePaymentRequestTravelInformationTransitAirlineAncillaryInformation.JSON_PROPERTY_CREDIT_REASON_INDICATOR,
  CreatePaymentRequestTravelInformationTransitAirlineAncillaryInformation.JSON_PROPERTY_SERVICE
})
@JsonTypeName("createPayment_request_travelInformation_transit_airline_ancillaryInformation")
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T19:17:21.826843+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class CreatePaymentRequestTravelInformationTransitAirlineAncillaryInformation {
  public static final String JSON_PROPERTY_TICKET_NUMBER = "ticketNumber";
  private String ticketNumber;

  public static final String JSON_PROPERTY_PASSENGER_NAME = "passengerName";
  private String passengerName;

  public static final String JSON_PROPERTY_CONNECTED_TICKET_NUMBER = "connectedTicketNumber";
  private String connectedTicketNumber;

  public static final String JSON_PROPERTY_CREDIT_REASON_INDICATOR = "creditReasonIndicator";
  private String creditReasonIndicator;

  public static final String JSON_PROPERTY_SERVICE = "service";
  private List<CreatePaymentRequestTravelInformationTransitAirlineAncillaryInformationServiceInner> service = new ArrayList<>();

  public CreatePaymentRequestTravelInformationTransitAirlineAncillaryInformation() {
  }

  public CreatePaymentRequestTravelInformationTransitAirlineAncillaryInformation ticketNumber(String ticketNumber) {
    
    this.ticketNumber = ticketNumber;
    return this;
  }

  /**
   * Ticket number, which consists of the carrier code, form, and serial number, without the check digit. **Important** This field is required in the U.S. in order for you to qualify for either the custom payment service (CPS) or the electronic interchange reimbursement fee (EIRF) program. Format: English characters only. Optional field for ancillary services. 
   * @return ticketNumber
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TICKET_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTicketNumber() {
    return ticketNumber;
  }


  @JsonProperty(JSON_PROPERTY_TICKET_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTicketNumber(String ticketNumber) {
    this.ticketNumber = ticketNumber;
  }

  public CreatePaymentRequestTravelInformationTransitAirlineAncillaryInformation passengerName(String passengerName) {
    
    this.passengerName = passengerName;
    return this;
  }

  /**
   * Name of the passenger. If the passenger&#39;s name is not available, this value is the cardholder&#39;s name. If neither the passenger&#39;s name nor the cardholder&#39;s name is available, this value is a description of the ancillary purchase. **Important** This field is required in the U.S. in order for you to qualify for either the custom payment service (CPS) or the electronic interchange reimbursement fee (EIRF) program. Format: English characters only. Optional field for ancillary service. 
   * @return passengerName
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PASSENGER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPassengerName() {
    return passengerName;
  }


  @JsonProperty(JSON_PROPERTY_PASSENGER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPassengerName(String passengerName) {
    this.passengerName = passengerName;
  }

  public CreatePaymentRequestTravelInformationTransitAirlineAncillaryInformation connectedTicketNumber(String connectedTicketNumber) {
    
    this.connectedTicketNumber = connectedTicketNumber;
    return this;
  }

  /**
   * Number for the airline ticket to which the ancillary purchase is connected.  If this purchase has a connection or relationship to another purchase such as a baggage fee for a passenger transport ticket, this field must contain the ticket number for the other purchase.  For a stand-alone purchase, the value for this field must be the same as the value for the &#x60;travelInformation.transit.airline.ancillaryInformation.ticketNumber&#x60; field. **Important** This field is required in the U.S. in order for you to qualify for either the custom payment service (CPS) or the electronic interchange reimbursement fee (EIRF) program. Format: English characters only. Optional request field for ancillary services. 
   * @return connectedTicketNumber
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONNECTED_TICKET_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getConnectedTicketNumber() {
    return connectedTicketNumber;
  }


  @JsonProperty(JSON_PROPERTY_CONNECTED_TICKET_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConnectedTicketNumber(String connectedTicketNumber) {
    this.connectedTicketNumber = connectedTicketNumber;
  }

  public CreatePaymentRequestTravelInformationTransitAirlineAncillaryInformation creditReasonIndicator(String creditReasonIndicator) {
    
    this.creditReasonIndicator = creditReasonIndicator;
    return this;
  }

  /**
   * Reason for the credit. Possible values: - &#x60;A&#x60;: Cancellation of the ancillary passenger transport purchase. - &#x60;B&#x60;: Cancellation of the airline ticket and the passenger transport ancillary purchase. - &#x60;C&#x60;: Cancellation of the airline ticket. - &#x60;O&#x60;: Other. - &#x60;P&#x60;: Partial refund of the airline ticket. Format: English characters only. Optional field for ancillary services. 
   * @return creditReasonIndicator
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREDIT_REASON_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCreditReasonIndicator() {
    return creditReasonIndicator;
  }


  @JsonProperty(JSON_PROPERTY_CREDIT_REASON_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreditReasonIndicator(String creditReasonIndicator) {
    this.creditReasonIndicator = creditReasonIndicator;
  }

  public CreatePaymentRequestTravelInformationTransitAirlineAncillaryInformation service(List<CreatePaymentRequestTravelInformationTransitAirlineAncillaryInformationServiceInner> service) {
    
    this.service = service;
    return this;
  }

  public CreatePaymentRequestTravelInformationTransitAirlineAncillaryInformation addServiceItem(CreatePaymentRequestTravelInformationTransitAirlineAncillaryInformationServiceInner serviceItem) {
    if (this.service == null) {
      this.service = new ArrayList<>();
    }
    this.service.add(serviceItem);
    return this;
  }

  /**
   * Get service
   * @return service
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SERVICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<CreatePaymentRequestTravelInformationTransitAirlineAncillaryInformationServiceInner> getService() {
    return service;
  }


  @JsonProperty(JSON_PROPERTY_SERVICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setService(List<CreatePaymentRequestTravelInformationTransitAirlineAncillaryInformationServiceInner> service) {
    this.service = service;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreatePaymentRequestTravelInformationTransitAirlineAncillaryInformation createPaymentRequestTravelInformationTransitAirlineAncillaryInformation = (CreatePaymentRequestTravelInformationTransitAirlineAncillaryInformation) o;
    return Objects.equals(this.ticketNumber, createPaymentRequestTravelInformationTransitAirlineAncillaryInformation.ticketNumber) &&
        Objects.equals(this.passengerName, createPaymentRequestTravelInformationTransitAirlineAncillaryInformation.passengerName) &&
        Objects.equals(this.connectedTicketNumber, createPaymentRequestTravelInformationTransitAirlineAncillaryInformation.connectedTicketNumber) &&
        Objects.equals(this.creditReasonIndicator, createPaymentRequestTravelInformationTransitAirlineAncillaryInformation.creditReasonIndicator) &&
        Objects.equals(this.service, createPaymentRequestTravelInformationTransitAirlineAncillaryInformation.service);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ticketNumber, passengerName, connectedTicketNumber, creditReasonIndicator, service);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreatePaymentRequestTravelInformationTransitAirlineAncillaryInformation {\n");
    sb.append("    ticketNumber: ").append(toIndentedString(ticketNumber)).append("\n");
    sb.append("    passengerName: ").append(toIndentedString(passengerName)).append("\n");
    sb.append("    connectedTicketNumber: ").append(toIndentedString(connectedTicketNumber)).append("\n");
    sb.append("    creditReasonIndicator: ").append(toIndentedString(creditReasonIndicator)).append("\n");
    sb.append("    service: ").append(toIndentedString(service)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

