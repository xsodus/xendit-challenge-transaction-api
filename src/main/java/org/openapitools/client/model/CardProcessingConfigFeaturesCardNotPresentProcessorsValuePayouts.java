/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayoutsCurrenciesValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayouts
 */
@JsonPropertyOrder({
  CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayouts.JSON_PROPERTY_REIMBURSEMENT_CODE,
  CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayouts.JSON_PROPERTY_ACQUIRING_INSTITUTION_ID,
  CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayouts.JSON_PROPERTY_BUSINESS_APPLICATION_ID,
  CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayouts.JSON_PROPERTY_FINANCIAL_INSTITUTION_ID,
  CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayouts.JSON_PROPERTY_MERCHANT_ABA_NUMBER,
  CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayouts.JSON_PROPERTY_NETWORK_ORDER,
  CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayouts.JSON_PROPERTY_CURRENCIES,
  CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayouts.JSON_PROPERTY_MERCHANT_ID,
  CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayouts.JSON_PROPERTY_TERMINAL_ID
})
@JsonTypeName("CardProcessingConfig_features_cardNotPresent_processors_value_payouts")
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T19:17:21.826843+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayouts {
  public static final String JSON_PROPERTY_REIMBURSEMENT_CODE = "reimbursementCode";
  private String reimbursementCode;

  public static final String JSON_PROPERTY_ACQUIRING_INSTITUTION_ID = "acquiringInstitutionId";
  private String acquiringInstitutionId;

  public static final String JSON_PROPERTY_BUSINESS_APPLICATION_ID = "businessApplicationId";
  private String businessApplicationId;

  public static final String JSON_PROPERTY_FINANCIAL_INSTITUTION_ID = "financialInstitutionId";
  private String financialInstitutionId;

  public static final String JSON_PROPERTY_MERCHANT_ABA_NUMBER = "merchantAbaNumber";
  private String merchantAbaNumber;

  public static final String JSON_PROPERTY_NETWORK_ORDER = "networkOrder";
  private String networkOrder;

  public static final String JSON_PROPERTY_CURRENCIES = "currencies";
  private Map<String, CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayoutsCurrenciesValue> currencies = new HashMap<>();

  public static final String JSON_PROPERTY_MERCHANT_ID = "merchantId";
  private String merchantId;

  public static final String JSON_PROPERTY_TERMINAL_ID = "terminalId";
  private String terminalId;

  public CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayouts() {
  }

  public CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayouts reimbursementCode(String reimbursementCode) {
    
    this.reimbursementCode = reimbursementCode;
    return this;
  }

  /**
   * Applicable for VPC processors.
   * @return reimbursementCode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REIMBURSEMENT_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getReimbursementCode() {
    return reimbursementCode;
  }


  @JsonProperty(JSON_PROPERTY_REIMBURSEMENT_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReimbursementCode(String reimbursementCode) {
    this.reimbursementCode = reimbursementCode;
  }

  public CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayouts acquiringInstitutionId(String acquiringInstitutionId) {
    
    this.acquiringInstitutionId = acquiringInstitutionId;
    return this;
  }

  /**
   * This code identifies the financial institution acting as the acquirer of this customer transaction. The acquirer is the member or system user that signed the merchant. This number is usually a Visa-assigned. Applicable for VPC processors.
   * @return acquiringInstitutionId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACQUIRING_INSTITUTION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAcquiringInstitutionId() {
    return acquiringInstitutionId;
  }


  @JsonProperty(JSON_PROPERTY_ACQUIRING_INSTITUTION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAcquiringInstitutionId(String acquiringInstitutionId) {
    this.acquiringInstitutionId = acquiringInstitutionId;
  }

  public CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayouts businessApplicationId(String businessApplicationId) {
    
    this.businessApplicationId = businessApplicationId;
    return this;
  }

  /**
   * Transaction type. List of supported identifiers documented in the Developer Guide. Applicable for GPX (gpx) and VPC processors.
   * @return businessApplicationId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BUSINESS_APPLICATION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBusinessApplicationId() {
    return businessApplicationId;
  }


  @JsonProperty(JSON_PROPERTY_BUSINESS_APPLICATION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBusinessApplicationId(String businessApplicationId) {
    this.businessApplicationId = businessApplicationId;
  }

  public CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayouts financialInstitutionId(String financialInstitutionId) {
    
    this.financialInstitutionId = financialInstitutionId;
    return this;
  }

  /**
   * Applicable for GPX (gpx) and VPC processors.
   * @return financialInstitutionId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FINANCIAL_INSTITUTION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFinancialInstitutionId() {
    return financialInstitutionId;
  }


  @JsonProperty(JSON_PROPERTY_FINANCIAL_INSTITUTION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFinancialInstitutionId(String financialInstitutionId) {
    this.financialInstitutionId = financialInstitutionId;
  }

  public CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayouts merchantAbaNumber(String merchantAbaNumber) {
    
    this.merchantAbaNumber = merchantAbaNumber;
    return this;
  }

  /**
   * Routing Number to identify banks within the United States. Applicable for VPC processors.
   * @return merchantAbaNumber
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MERCHANT_ABA_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMerchantAbaNumber() {
    return merchantAbaNumber;
  }


  @JsonProperty(JSON_PROPERTY_MERCHANT_ABA_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMerchantAbaNumber(String merchantAbaNumber) {
    this.merchantAbaNumber = merchantAbaNumber;
  }

  public CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayouts networkOrder(String networkOrder) {
    
    this.networkOrder = networkOrder;
    return this;
  }

  /**
   * Order of the networks in which Visa should make routing decisions. Applicable for VPC processors.
   * @return networkOrder
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NETWORK_ORDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNetworkOrder() {
    return networkOrder;
  }


  @JsonProperty(JSON_PROPERTY_NETWORK_ORDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNetworkOrder(String networkOrder) {
    this.networkOrder = networkOrder;
  }

  public CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayouts currencies(Map<String, CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayoutsCurrenciesValue> currencies) {
    
    this.currencies = currencies;
    return this;
  }

  public CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayouts putCurrenciesItem(String key, CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayoutsCurrenciesValue currenciesItem) {
    if (this.currencies == null) {
      this.currencies = new HashMap<>();
    }
    this.currencies.put(key, currenciesItem);
    return this;
  }

  /**
   * Three-character [ISO 4217 ALPHA-3 Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)
   * @return currencies
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CURRENCIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayoutsCurrenciesValue> getCurrencies() {
    return currencies;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrencies(Map<String, CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayoutsCurrenciesValue> currencies) {
    this.currencies = currencies;
  }

  public CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayouts merchantId(String merchantId) {
    
    this.merchantId = merchantId;
    return this;
  }

  /**
   * Merchant ID assigned by an acquirer or a processor. Should not be overridden by any other party.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Min. Length&lt;/th&gt;&lt;th&gt;Max. Length&lt;/th&gt;&lt;th&gt;Regex&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays&lt;/td&gt;&lt;td&gt;cnp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;11&lt;/td&gt;&lt;td&gt;^[0-9]+$&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
   * @return merchantId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MERCHANT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMerchantId() {
    return merchantId;
  }


  @JsonProperty(JSON_PROPERTY_MERCHANT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }

  public CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayouts terminalId(String terminalId) {
    
    this.terminalId = terminalId;
    return this;
  }

  /**
   * The &#39;Terminal Id&#39; aka TID, is an identifier used for with your payments processor. Depending on the processor and payment acceptance type this may also be the default Terminal ID used for Card Present and Virtual Terminal transactions.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Min. Length&lt;/th&gt;&lt;th&gt;Max. Length&lt;/th&gt;&lt;th&gt;Regex&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays&lt;/td&gt;&lt;td&gt;cnp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;255&lt;/td&gt;&lt;td&gt;^[0-9:&amp;#92;-]+$&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
   * @return terminalId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TERMINAL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTerminalId() {
    return terminalId;
  }


  @JsonProperty(JSON_PROPERTY_TERMINAL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTerminalId(String terminalId) {
    this.terminalId = terminalId;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayouts cardProcessingConfigFeaturesCardNotPresentProcessorsValuePayouts = (CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayouts) o;
    return Objects.equals(this.reimbursementCode, cardProcessingConfigFeaturesCardNotPresentProcessorsValuePayouts.reimbursementCode) &&
        Objects.equals(this.acquiringInstitutionId, cardProcessingConfigFeaturesCardNotPresentProcessorsValuePayouts.acquiringInstitutionId) &&
        Objects.equals(this.businessApplicationId, cardProcessingConfigFeaturesCardNotPresentProcessorsValuePayouts.businessApplicationId) &&
        Objects.equals(this.financialInstitutionId, cardProcessingConfigFeaturesCardNotPresentProcessorsValuePayouts.financialInstitutionId) &&
        Objects.equals(this.merchantAbaNumber, cardProcessingConfigFeaturesCardNotPresentProcessorsValuePayouts.merchantAbaNumber) &&
        Objects.equals(this.networkOrder, cardProcessingConfigFeaturesCardNotPresentProcessorsValuePayouts.networkOrder) &&
        Objects.equals(this.currencies, cardProcessingConfigFeaturesCardNotPresentProcessorsValuePayouts.currencies) &&
        Objects.equals(this.merchantId, cardProcessingConfigFeaturesCardNotPresentProcessorsValuePayouts.merchantId) &&
        Objects.equals(this.terminalId, cardProcessingConfigFeaturesCardNotPresentProcessorsValuePayouts.terminalId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(reimbursementCode, acquiringInstitutionId, businessApplicationId, financialInstitutionId, merchantAbaNumber, networkOrder, currencies, merchantId, terminalId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayouts {\n");
    sb.append("    reimbursementCode: ").append(toIndentedString(reimbursementCode)).append("\n");
    sb.append("    acquiringInstitutionId: ").append(toIndentedString(acquiringInstitutionId)).append("\n");
    sb.append("    businessApplicationId: ").append(toIndentedString(businessApplicationId)).append("\n");
    sb.append("    financialInstitutionId: ").append(toIndentedString(financialInstitutionId)).append("\n");
    sb.append("    merchantAbaNumber: ").append(toIndentedString(merchantAbaNumber)).append("\n");
    sb.append("    networkOrder: ").append(toIndentedString(networkOrder)).append("\n");
    sb.append("    currencies: ").append(toIndentedString(currencies)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    terminalId: ").append(toIndentedString(terminalId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

