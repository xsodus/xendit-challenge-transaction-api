/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformationInner
 */
@JsonPropertyOrder({
  PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformationInner.JSON_PROPERTY_PAYMENT_TYPE,
  PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformationInner.JSON_PROPERTY_FEE_TYPE,
  PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformationInner.JSON_PROPERTY_FEE_AMOUNT,
  PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformationInner.JSON_PROPERTY_PERCENTAGE,
  PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformationInner.JSON_PROPERTY_FEE_CAP
})
@JsonTypeName("paymentsProducts_serviceFee_configurationInformation_configurations_paymentInformation_inner")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T18:32:10.370382+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformationInner {
  /**
   * Payment types accepted by this merchant. The supported values are: MASTERDEBIT, MASTERCREDIT, VISACREDIT, VISADEBIT, DISCOVERCREDIT, AMEXCREDIT, ECHECK
   */
  public enum PaymentTypeEnum {
    MASTERDEBIT("MASTERDEBIT"),
    
    MASTERCREDIT("MASTERCREDIT"),
    
    VISACREDIT("VISACREDIT"),
    
    VISADEBIT("VISADEBIT"),
    
    DISCOVERCREDIT("DISCOVERCREDIT"),
    
    AMEXCREDIT("AMEXCREDIT"),
    
    ECHECK("ECHECK");

    private String value;

    PaymentTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PaymentTypeEnum fromValue(String value) {
      for (PaymentTypeEnum b : PaymentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PAYMENT_TYPE = "paymentType";
  private PaymentTypeEnum paymentType;

  /**
   * Fee type for the selected payment type. Supported values are: Flat or Percentage. 
   */
  public enum FeeTypeEnum {
    FLAT("FLAT"),
    
    PERCENTAGE("PERCENTAGE");

    private String value;

    FeeTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static FeeTypeEnum fromValue(String value) {
      for (FeeTypeEnum b : FeeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_FEE_TYPE = "feeType";
  private FeeTypeEnum feeType;

  public static final String JSON_PROPERTY_FEE_AMOUNT = "feeAmount";
  private BigDecimal feeAmount;

  public static final String JSON_PROPERTY_PERCENTAGE = "percentage";
  private BigDecimal percentage;

  public static final String JSON_PROPERTY_FEE_CAP = "feeCap";
  private BigDecimal feeCap;

  public PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformationInner() {
  }

  public PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformationInner paymentType(PaymentTypeEnum paymentType) {
    
    this.paymentType = paymentType;
    return this;
  }

  /**
   * Payment types accepted by this merchant. The supported values are: MASTERDEBIT, MASTERCREDIT, VISACREDIT, VISADEBIT, DISCOVERCREDIT, AMEXCREDIT, ECHECK
   * @return paymentType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAYMENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PaymentTypeEnum getPaymentType() {
    return paymentType;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentType(PaymentTypeEnum paymentType) {
    this.paymentType = paymentType;
  }

  public PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformationInner feeType(FeeTypeEnum feeType) {
    
    this.feeType = feeType;
    return this;
  }

  /**
   * Fee type for the selected payment type. Supported values are: Flat or Percentage. 
   * @return feeType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FEE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FeeTypeEnum getFeeType() {
    return feeType;
  }


  @JsonProperty(JSON_PROPERTY_FEE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFeeType(FeeTypeEnum feeType) {
    this.feeType = feeType;
  }

  public PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformationInner feeAmount(BigDecimal feeAmount) {
    
    this.feeAmount = feeAmount;
    return this;
  }

  /**
   * Fee Amount of the selected payment type if you chose Flat fee type. 
   * @return feeAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FEE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getFeeAmount() {
    return feeAmount;
  }


  @JsonProperty(JSON_PROPERTY_FEE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFeeAmount(BigDecimal feeAmount) {
    this.feeAmount = feeAmount;
  }

  public PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformationInner percentage(BigDecimal percentage) {
    
    this.percentage = percentage;
    return this;
  }

  /**
   * Percentage of the selected payment type if you chose Percentage Fee type. Supported values use numbers with decimals. For example, 1.0 
   * @return percentage
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PERCENTAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getPercentage() {
    return percentage;
  }


  @JsonProperty(JSON_PROPERTY_PERCENTAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPercentage(BigDecimal percentage) {
    this.percentage = percentage;
  }

  public PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformationInner feeCap(BigDecimal feeCap) {
    
    this.feeCap = feeCap;
    return this;
  }

  /**
   * Fee cap for the selected payment type. Supported values use numbers with decimals. For example, 1.0 
   * @return feeCap
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FEE_CAP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getFeeCap() {
    return feeCap;
  }


  @JsonProperty(JSON_PROPERTY_FEE_CAP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFeeCap(BigDecimal feeCap) {
    this.feeCap = feeCap;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformationInner paymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformationInner = (PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformationInner) o;
    return Objects.equals(this.paymentType, paymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformationInner.paymentType) &&
        Objects.equals(this.feeType, paymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformationInner.feeType) &&
        Objects.equals(this.feeAmount, paymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformationInner.feeAmount) &&
        Objects.equals(this.percentage, paymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformationInner.percentage) &&
        Objects.equals(this.feeCap, paymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformationInner.feeCap);
  }

  @Override
  public int hashCode() {
    return Objects.hash(paymentType, feeType, feeAmount, percentage, feeCap);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentsProductsServiceFeeConfigurationInformationConfigurationsPaymentInformationInner {\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    feeType: ").append(toIndentedString(feeType)).append("\n");
    sb.append("    feeAmount: ").append(toIndentedString(feeAmount)).append("\n");
    sb.append("    percentage: ").append(toIndentedString(percentage)).append("\n");
    sb.append("    feeCap: ").append(toIndentedString(feeCap)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

