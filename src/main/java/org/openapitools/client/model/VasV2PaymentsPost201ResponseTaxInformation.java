/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * VasV2PaymentsPost201ResponseTaxInformation
 */
@JsonPropertyOrder({
  VasV2PaymentsPost201ResponseTaxInformation.JSON_PROPERTY_COMMIT_INDICATOR,
  VasV2PaymentsPost201ResponseTaxInformation.JSON_PROPERTY_REFUND_INDICATOR
})
@JsonTypeName("vasV2PaymentsPost201Response_taxInformation")
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T19:17:21.826843+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class VasV2PaymentsPost201ResponseTaxInformation {
  public static final String JSON_PROPERTY_COMMIT_INDICATOR = "commitIndicator";
  private Boolean commitIndicator;

  public static final String JSON_PROPERTY_REFUND_INDICATOR = "refundIndicator";
  private Boolean refundIndicator;

  public VasV2PaymentsPost201ResponseTaxInformation() {
  }

  public VasV2PaymentsPost201ResponseTaxInformation commitIndicator(Boolean commitIndicator) {
    
    this.commitIndicator = commitIndicator;
    return this;
  }

  /**
   * Indicates whether this is a committed tax transaction. For a committed tax transaction, the status in the Tax Detail Report is \&quot;Committed.\&quot; For an uncommitted tax transaction, the status in the Tax Detail Report is \&quot;Uncommitted.\&quot; Possible values: - &#x60;true&#x60;: This is a committed tax transaction. - &#x60;false&#x60; (default): This is not a committed tax transaction.  A committed tax request is a tax service request that sets the status field in the Tax Detail Report to committed. The committed status indicates that the amount calculated by the tax service is included in the amount of a capture or credit.  Use a void service request to cancel a committed tax request or a committed refund tax request. The void transaction is included as a separate entry in the Tax Detail Report. The value of the status field is cancelled. The value of the link ID is the request ID of the committed tax request or refund tax request that was voided. You can use the value of the link ID to reconcile your orders.  Optional for U.S., Canadian, international tax, and value added taxes. For more information on Tax Detail Report features refer the [Tax Service Guide](https://developer.cybersource.com/docs/cybs/en-us/tax-calculation/developer/all/rest/tax-calculation/tax-overview.html). 
   * @return commitIndicator
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMMIT_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCommitIndicator() {
    return commitIndicator;
  }


  @JsonProperty(JSON_PROPERTY_COMMIT_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCommitIndicator(Boolean commitIndicator) {
    this.commitIndicator = commitIndicator;
  }

  public VasV2PaymentsPost201ResponseTaxInformation refundIndicator(Boolean refundIndicator) {
    
    this.refundIndicator = refundIndicator;
    return this;
  }

  /**
   * Indicates whether this is a refund tax transaction. For a refund tax transaction, amounts in the Tax Detail Report will be negative. Possible values: - &#x60;true&#x60;: This is a refund tax transaction. - &#x60;false&#x60; (default): This is not a refund tax transaction.  A refund tax request is a tax service request that sets the transaction type field in the Tax Detail Report to refunded and makes the reported amount negative. Tax amounts are returned as positive amounts in reply messages, but they are saved in reports as negative amounts which enables the reporting software to accurately calculate the aggregate amounts.  Optional for U.S., Canadian, international tax, and value added taxes. For more information on Tax Detail Report features refer the [Tax Service Guide](https://developer.cybersource.com/docs/cybs/en-us/tax-calculation/developer/all/rest/tax-calculation/tax-overview.html). 
   * @return refundIndicator
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REFUND_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRefundIndicator() {
    return refundIndicator;
  }


  @JsonProperty(JSON_PROPERTY_REFUND_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRefundIndicator(Boolean refundIndicator) {
    this.refundIndicator = refundIndicator;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VasV2PaymentsPost201ResponseTaxInformation vasV2PaymentsPost201ResponseTaxInformation = (VasV2PaymentsPost201ResponseTaxInformation) o;
    return Objects.equals(this.commitIndicator, vasV2PaymentsPost201ResponseTaxInformation.commitIndicator) &&
        Objects.equals(this.refundIndicator, vasV2PaymentsPost201ResponseTaxInformation.refundIndicator);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commitIndicator, refundIndicator);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VasV2PaymentsPost201ResponseTaxInformation {\n");
    sb.append("    commitIndicator: ").append(toIndentedString(commitIndicator)).append("\n");
    sb.append("    refundIndicator: ").append(toIndentedString(refundIndicator)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

