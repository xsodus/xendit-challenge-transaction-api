/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreatePaymentRequestOrderInformationAmountDetailsTaxDetailsInner;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * RefundPaymentRequestOrderInformationLineItemsInner
 */
@JsonPropertyOrder({
  RefundPaymentRequestOrderInformationLineItemsInner.JSON_PROPERTY_PRODUCT_CODE,
  RefundPaymentRequestOrderInformationLineItemsInner.JSON_PROPERTY_PRODUCT_NAME,
  RefundPaymentRequestOrderInformationLineItemsInner.JSON_PROPERTY_PRODUCT_SKU,
  RefundPaymentRequestOrderInformationLineItemsInner.JSON_PROPERTY_QUANTITY,
  RefundPaymentRequestOrderInformationLineItemsInner.JSON_PROPERTY_UNIT_PRICE,
  RefundPaymentRequestOrderInformationLineItemsInner.JSON_PROPERTY_UNIT_OF_MEASURE,
  RefundPaymentRequestOrderInformationLineItemsInner.JSON_PROPERTY_TOTAL_AMOUNT,
  RefundPaymentRequestOrderInformationLineItemsInner.JSON_PROPERTY_TAX_AMOUNT,
  RefundPaymentRequestOrderInformationLineItemsInner.JSON_PROPERTY_TAX_RATE,
  RefundPaymentRequestOrderInformationLineItemsInner.JSON_PROPERTY_TAX_APPLIED_AFTER_DISCOUNT,
  RefundPaymentRequestOrderInformationLineItemsInner.JSON_PROPERTY_TAX_STATUS_INDICATOR,
  RefundPaymentRequestOrderInformationLineItemsInner.JSON_PROPERTY_TAX_TYPE_CODE,
  RefundPaymentRequestOrderInformationLineItemsInner.JSON_PROPERTY_AMOUNT_INCLUDES_TAX,
  RefundPaymentRequestOrderInformationLineItemsInner.JSON_PROPERTY_TYPE_OF_SUPPLY,
  RefundPaymentRequestOrderInformationLineItemsInner.JSON_PROPERTY_COMMODITY_CODE,
  RefundPaymentRequestOrderInformationLineItemsInner.JSON_PROPERTY_DISCOUNT_AMOUNT,
  RefundPaymentRequestOrderInformationLineItemsInner.JSON_PROPERTY_DISCOUNT_APPLIED,
  RefundPaymentRequestOrderInformationLineItemsInner.JSON_PROPERTY_DISCOUNT_RATE,
  RefundPaymentRequestOrderInformationLineItemsInner.JSON_PROPERTY_INVOICE_NUMBER,
  RefundPaymentRequestOrderInformationLineItemsInner.JSON_PROPERTY_TAX_DETAILS
})
@JsonTypeName("refundPayment_request_orderInformation_lineItems_inner")
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T19:17:21.826843+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class RefundPaymentRequestOrderInformationLineItemsInner {
  public static final String JSON_PROPERTY_PRODUCT_CODE = "productCode";
  private String productCode;

  public static final String JSON_PROPERTY_PRODUCT_NAME = "productName";
  private String productName;

  public static final String JSON_PROPERTY_PRODUCT_SKU = "productSku";
  private String productSku;

  public static final String JSON_PROPERTY_QUANTITY = "quantity";
  private Integer quantity;

  public static final String JSON_PROPERTY_UNIT_PRICE = "unitPrice";
  private String unitPrice;

  public static final String JSON_PROPERTY_UNIT_OF_MEASURE = "unitOfMeasure";
  private String unitOfMeasure;

  public static final String JSON_PROPERTY_TOTAL_AMOUNT = "totalAmount";
  private String totalAmount;

  public static final String JSON_PROPERTY_TAX_AMOUNT = "taxAmount";
  private String taxAmount;

  public static final String JSON_PROPERTY_TAX_RATE = "taxRate";
  private String taxRate;

  public static final String JSON_PROPERTY_TAX_APPLIED_AFTER_DISCOUNT = "taxAppliedAfterDiscount";
  private String taxAppliedAfterDiscount;

  public static final String JSON_PROPERTY_TAX_STATUS_INDICATOR = "taxStatusIndicator";
  private String taxStatusIndicator;

  public static final String JSON_PROPERTY_TAX_TYPE_CODE = "taxTypeCode";
  private String taxTypeCode;

  public static final String JSON_PROPERTY_AMOUNT_INCLUDES_TAX = "amountIncludesTax";
  private Boolean amountIncludesTax;

  public static final String JSON_PROPERTY_TYPE_OF_SUPPLY = "typeOfSupply";
  private String typeOfSupply;

  public static final String JSON_PROPERTY_COMMODITY_CODE = "commodityCode";
  private String commodityCode;

  public static final String JSON_PROPERTY_DISCOUNT_AMOUNT = "discountAmount";
  private String discountAmount;

  public static final String JSON_PROPERTY_DISCOUNT_APPLIED = "discountApplied";
  private Boolean discountApplied;

  public static final String JSON_PROPERTY_DISCOUNT_RATE = "discountRate";
  private String discountRate;

  public static final String JSON_PROPERTY_INVOICE_NUMBER = "invoiceNumber";
  private String invoiceNumber;

  public static final String JSON_PROPERTY_TAX_DETAILS = "taxDetails";
  private List<CreatePaymentRequestOrderInformationAmountDetailsTaxDetailsInner> taxDetails = new ArrayList<>();

  public RefundPaymentRequestOrderInformationLineItemsInner() {
  }

  public RefundPaymentRequestOrderInformationLineItemsInner productCode(String productCode) {
    
    this.productCode = productCode;
    return this;
  }

  /**
   * Type of product. The value for this field is used to identify the product category (electronic, handling, physical, service, or shipping). The default value is &#x60;default&#x60;.  If you are performing an authorization transaction (&#x60;processingOptions.capture&#x60; is set to &#x60;false&#x60;), and you set this field to a value other than &#x60;default&#x60; or one of the values related to shipping and/or handling, then &#x60;orderInformation.lineItems[].quantity&#x60;, &#x60;orderInformation.lineItems[].productName&#x60;, and &#x60;orderInformation.lineItems[].productSku&#x60; fields are required.  Optional field.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes.  The Product Codes for the tax service are located in the Cybersource Tax Codes guide. Contact Customer Support to request the guide. If you don&#39;t send a tax service Product Code in your tax request, product-based rules or exemptions will not be applied and the transaction will default to fully taxable in the locations where you&#39;ve indicated you need to collect tax [by way of nexus, no nexus, or seller registration number fields]. 
   * @return productCode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PRODUCT_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProductCode() {
    return productCode;
  }


  @JsonProperty(JSON_PROPERTY_PRODUCT_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProductCode(String productCode) {
    this.productCode = productCode;
  }

  public RefundPaymentRequestOrderInformationLineItemsInner productName(String productName) {
    
    this.productName = productName;
    return this;
  }

  /**
   * For an authorization or capture transaction (&#x60;processingOptions.capture&#x60; is &#x60;true&#x60; or &#x60;false&#x60;), this field is required when &#x60;orderInformation.lineItems[].productCode&#x60; is not &#x60;default&#x60; or one of the other values that are related to shipping and/or handling.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes. 
   * @return productName
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PRODUCT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProductName() {
    return productName;
  }


  @JsonProperty(JSON_PROPERTY_PRODUCT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProductName(String productName) {
    this.productName = productName;
  }

  public RefundPaymentRequestOrderInformationLineItemsInner productSku(String productSku) {
    
    this.productSku = productSku;
    return this;
  }

  /**
   * Product identifier code. Also known as the Stock Keeping Unit (SKU) code for the product.  For an authorization or capture transaction (&#x60;processingOptions.capture&#x60; is set to &#x60;true&#x60; or &#x60;false&#x60;), this field is required when &#x60;orderInformation.lineItems[].productCode&#x60; is not set to **default** or one of the other values that are related to shipping and/or handling.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. For an authorization or capture transaction (&#x60;processingOptions.capture&#x60; is set to &#x60;true&#x60; or &#x60;false&#x60;), this field is required when &#x60;orderInformation.lineItems[].productCode&#x60; is not &#x60;default&#x60; or one of the values related to shipping and/or handling. 
   * @return productSku
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PRODUCT_SKU)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProductSku() {
    return productSku;
  }


  @JsonProperty(JSON_PROPERTY_PRODUCT_SKU)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProductSku(String productSku) {
    this.productSku = productSku;
  }

  public RefundPaymentRequestOrderInformationLineItemsInner quantity(Integer quantity) {
    
    this.quantity = quantity;
    return this;
  }

  /**
   * Number of units for this order. Must be a non-negative integer.  The default is &#x60;1&#x60;. For an authorization or capture transaction (&#x60;processingOptions.capture&#x60; is set to &#x60;true&#x60; or &#x60;false&#x60;), this field is required when &#x60;orderInformation.lineItems[].productCode&#x60; is not &#x60;default&#x60; or one of the other values related to shipping and/or handling.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes. 
   * minimum: 1
   * maximum: 999999999
   * @return quantity
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_QUANTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getQuantity() {
    return quantity;
  }


  @JsonProperty(JSON_PROPERTY_QUANTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }

  public RefundPaymentRequestOrderInformationLineItemsInner unitPrice(String unitPrice) {
    
    this.unitPrice = unitPrice;
    return this;
  }

  /**
   * Per-item price of the product. This value for this field cannot be negative.  You must include either this field or the request-level field &#x60;orderInformation.amountDetails.totalAmount&#x60; in your request.  You can include a decimal point (.), but you cannot include any other special characters. The value is truncated to the correct number of decimal places.  #### DCC with a Third-Party Provider Set this field to the converted amount that was returned by the DCC provider. You must include either the 1st line item in the order and this field, or the request-level field &#x60;orderInformation.amountDetails.totalAmount&#x60; in your request.  #### Tax Calculation Required field for U.S., Canadian, international and value added taxes.  #### Zero Amount Authorizations If your processor supports zero amount authorizations, you can set this field to 0 for the authorization to check if the card is lost or stolen.  #### Maximum Field Lengths For GPN and JCN Gateway: Decimal (10) All other processors: Decimal (15) 
   * @return unitPrice
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UNIT_PRICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUnitPrice() {
    return unitPrice;
  }


  @JsonProperty(JSON_PROPERTY_UNIT_PRICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUnitPrice(String unitPrice) {
    this.unitPrice = unitPrice;
  }

  public RefundPaymentRequestOrderInformationLineItemsInner unitOfMeasure(String unitOfMeasure) {
    
    this.unitOfMeasure = unitOfMeasure;
    return this;
  }

  /**
   * Unit of measure, or unit of measure code, for the item. 
   * @return unitOfMeasure
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UNIT_OF_MEASURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUnitOfMeasure() {
    return unitOfMeasure;
  }


  @JsonProperty(JSON_PROPERTY_UNIT_OF_MEASURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUnitOfMeasure(String unitOfMeasure) {
    this.unitOfMeasure = unitOfMeasure;
  }

  public RefundPaymentRequestOrderInformationLineItemsInner totalAmount(String totalAmount) {
    
    this.totalAmount = totalAmount;
    return this;
  }

  /**
   * Total amount for the item. Normally calculated as the unit price times quantity.  When &#x60;orderInformation.lineItems[].productCode&#x60; is \&quot;gift_card\&quot;, this is the purchase amount total for prepaid gift cards in major units.  Example: 123.45 USD &#x3D; 123 
   * @return totalAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTotalAmount() {
    return totalAmount;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalAmount(String totalAmount) {
    this.totalAmount = totalAmount;
  }

  public RefundPaymentRequestOrderInformationLineItemsInner taxAmount(String taxAmount) {
    
    this.taxAmount = taxAmount;
    return this;
  }

  /**
   * Total tax to apply to the product. This value cannot be negative. The tax amount and the offer amount must be in the same currency. The tax amount field is additive.  The following example uses a two-exponent currency such as USD:   1. You include each line item in your request.  ..- 1st line item has amount&#x3D;10.00, quantity&#x3D;1, and taxAmount&#x3D;0.80  ..- 2nd line item has amount&#x3D;20.00, quantity&#x3D;1, and taxAmount&#x3D;1.60  2. The total amount authorized will be 32.40, not 30.00 with 2.40 of tax included.  Optional field.  #### Airlines processing Tax portion of the order amount. This value cannot exceed 99999999999999 (fourteen 9s). Format: English characters only. Optional request field for a line item.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes.  Note if you send this field in your tax request, the value in the field will override the tax engine 
   * @return taxAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAX_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTaxAmount() {
    return taxAmount;
  }


  @JsonProperty(JSON_PROPERTY_TAX_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaxAmount(String taxAmount) {
    this.taxAmount = taxAmount;
  }

  public RefundPaymentRequestOrderInformationLineItemsInner taxRate(String taxRate) {
    
    this.taxRate = taxRate;
    return this;
  }

  /**
   * Tax rate applied to the item.  **Visa**: Valid range is 0.01 to 0.99 (1% to 99%, with only whole percentage values accepted; values with additional decimal places will be truncated).  **Mastercard**: Valid range is 0.00001 to 0.99999 (0.001% to 99.999%). 
   * @return taxRate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAX_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTaxRate() {
    return taxRate;
  }


  @JsonProperty(JSON_PROPERTY_TAX_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaxRate(String taxRate) {
    this.taxRate = taxRate;
  }

  public RefundPaymentRequestOrderInformationLineItemsInner taxAppliedAfterDiscount(String taxAppliedAfterDiscount) {
    
    this.taxAppliedAfterDiscount = taxAppliedAfterDiscount;
    return this;
  }

  /**
   * Flag to indicate how you handle discount at the line item level.   - 0: no line level discount provided  - 1: tax was calculated on the post-discount line item total  - 2: tax was calculated on the pre-discount line item total  &#x60;Note&#x60; Visa will inset 0 (zero) if an invalid value is included in this field.  This field relates to the value in the _lineItems[].discountAmount_ field. 
   * @return taxAppliedAfterDiscount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAX_APPLIED_AFTER_DISCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTaxAppliedAfterDiscount() {
    return taxAppliedAfterDiscount;
  }


  @JsonProperty(JSON_PROPERTY_TAX_APPLIED_AFTER_DISCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaxAppliedAfterDiscount(String taxAppliedAfterDiscount) {
    this.taxAppliedAfterDiscount = taxAppliedAfterDiscount;
  }

  public RefundPaymentRequestOrderInformationLineItemsInner taxStatusIndicator(String taxStatusIndicator) {
    
    this.taxStatusIndicator = taxStatusIndicator;
    return this;
  }

  /**
   * Flag to indicate whether tax is exempted or not included.   - 0: tax not included  - 1: tax included  - 2: transaction is not subject to tax 
   * @return taxStatusIndicator
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAX_STATUS_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTaxStatusIndicator() {
    return taxStatusIndicator;
  }


  @JsonProperty(JSON_PROPERTY_TAX_STATUS_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaxStatusIndicator(String taxStatusIndicator) {
    this.taxStatusIndicator = taxStatusIndicator;
  }

  public RefundPaymentRequestOrderInformationLineItemsInner taxTypeCode(String taxTypeCode) {
    
    this.taxTypeCode = taxTypeCode;
    return this;
  }

  /**
   * Type of tax being applied to the item.  #### FDC Nashville Global - &#x60;alternate_tax_type_applied&#x60; - &#x60;alternate_tax_type_identifier&#x60;  #### Worldpay VAP - &#x60;alternate_tax_type_identifier&#x60;  #### RBS WorldPay Atlanta - &#x60;tax_type_applied&#x60;  #### TSYS Acquiring Solutions - &#x60;tax_type_applied&#x60; - &#x60;local_tax_indicator&#x60;  #### Chase Paymentech Solutions - &#x60;tax_type_applied&#x60;  #### Elavon Americas - &#x60;local_tax_indicator&#x60;  #### FDC Compass - &#x60;tax_type_applied&#x60;  #### OmniPay Direct - &#x60;local_tax_indicator&#x60; 
   * @return taxTypeCode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAX_TYPE_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTaxTypeCode() {
    return taxTypeCode;
  }


  @JsonProperty(JSON_PROPERTY_TAX_TYPE_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaxTypeCode(String taxTypeCode) {
    this.taxTypeCode = taxTypeCode;
  }

  public RefundPaymentRequestOrderInformationLineItemsInner amountIncludesTax(Boolean amountIncludesTax) {
    
    this.amountIncludesTax = amountIncludesTax;
    return this;
  }

  /**
   * Flag that indicates whether the tax amount is included in the Line Item Total.  Possible values:  - **true**  - **false** 
   * @return amountIncludesTax
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AMOUNT_INCLUDES_TAX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAmountIncludesTax() {
    return amountIncludesTax;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT_INCLUDES_TAX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAmountIncludesTax(Boolean amountIncludesTax) {
    this.amountIncludesTax = amountIncludesTax;
  }

  public RefundPaymentRequestOrderInformationLineItemsInner typeOfSupply(String typeOfSupply) {
    
    this.typeOfSupply = typeOfSupply;
    return this;
  }

  /**
   * Flag to indicate whether the purchase is categorized as goods or services. Possible values:   - 00: goods  - 01: services 
   * @return typeOfSupply
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE_OF_SUPPLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTypeOfSupply() {
    return typeOfSupply;
  }


  @JsonProperty(JSON_PROPERTY_TYPE_OF_SUPPLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTypeOfSupply(String typeOfSupply) {
    this.typeOfSupply = typeOfSupply;
  }

  public RefundPaymentRequestOrderInformationLineItemsInner commodityCode(String commodityCode) {
    
    this.commodityCode = commodityCode;
    return this;
  }

  /**
   * Commodity code or International description code used to classify the item. Contact your acquirer for a list of codes. 
   * @return commodityCode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMMODITY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCommodityCode() {
    return commodityCode;
  }


  @JsonProperty(JSON_PROPERTY_COMMODITY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCommodityCode(String commodityCode) {
    this.commodityCode = commodityCode;
  }

  public RefundPaymentRequestOrderInformationLineItemsInner discountAmount(String discountAmount) {
    
    this.discountAmount = discountAmount;
    return this;
  }

  /**
   * Discount applied to the item.
   * @return discountAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DISCOUNT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDiscountAmount() {
    return discountAmount;
  }


  @JsonProperty(JSON_PROPERTY_DISCOUNT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDiscountAmount(String discountAmount) {
    this.discountAmount = discountAmount;
  }

  public RefundPaymentRequestOrderInformationLineItemsInner discountApplied(Boolean discountApplied) {
    
    this.discountApplied = discountApplied;
    return this;
  }

  /**
   * Flag that indicates whether the amount is discounted.  If you do not provide a value but you set Discount Amount to a value greater than zero, then CyberSource sets this field to **true**.  Possible values:  - **true**  - **false** 
   * @return discountApplied
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DISCOUNT_APPLIED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getDiscountApplied() {
    return discountApplied;
  }


  @JsonProperty(JSON_PROPERTY_DISCOUNT_APPLIED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDiscountApplied(Boolean discountApplied) {
    this.discountApplied = discountApplied;
  }

  public RefundPaymentRequestOrderInformationLineItemsInner discountRate(String discountRate) {
    
    this.discountRate = discountRate;
    return this;
  }

  /**
   * Rate the item is discounted. Maximum of 2 decimal places.  Example 5.25 (&#x3D;5.25%) 
   * @return discountRate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DISCOUNT_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDiscountRate() {
    return discountRate;
  }


  @JsonProperty(JSON_PROPERTY_DISCOUNT_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDiscountRate(String discountRate) {
    this.discountRate = discountRate;
  }

  public RefundPaymentRequestOrderInformationLineItemsInner invoiceNumber(String invoiceNumber) {
    
    this.invoiceNumber = invoiceNumber;
    return this;
  }

  /**
   * Field to support an invoice number for a transaction. You must specify the number of line items that will include an invoice number. By default, the first line item will include an invoice number field. The invoice number field can be included for up to 10 line items. 
   * @return invoiceNumber
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INVOICE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getInvoiceNumber() {
    return invoiceNumber;
  }


  @JsonProperty(JSON_PROPERTY_INVOICE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInvoiceNumber(String invoiceNumber) {
    this.invoiceNumber = invoiceNumber;
  }

  public RefundPaymentRequestOrderInformationLineItemsInner taxDetails(List<CreatePaymentRequestOrderInformationAmountDetailsTaxDetailsInner> taxDetails) {
    
    this.taxDetails = taxDetails;
    return this;
  }

  public RefundPaymentRequestOrderInformationLineItemsInner addTaxDetailsItem(CreatePaymentRequestOrderInformationAmountDetailsTaxDetailsInner taxDetailsItem) {
    if (this.taxDetails == null) {
      this.taxDetails = new ArrayList<>();
    }
    this.taxDetails.add(taxDetailsItem);
    return this;
  }

  /**
   * Get taxDetails
   * @return taxDetails
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAX_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<CreatePaymentRequestOrderInformationAmountDetailsTaxDetailsInner> getTaxDetails() {
    return taxDetails;
  }


  @JsonProperty(JSON_PROPERTY_TAX_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaxDetails(List<CreatePaymentRequestOrderInformationAmountDetailsTaxDetailsInner> taxDetails) {
    this.taxDetails = taxDetails;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RefundPaymentRequestOrderInformationLineItemsInner refundPaymentRequestOrderInformationLineItemsInner = (RefundPaymentRequestOrderInformationLineItemsInner) o;
    return Objects.equals(this.productCode, refundPaymentRequestOrderInformationLineItemsInner.productCode) &&
        Objects.equals(this.productName, refundPaymentRequestOrderInformationLineItemsInner.productName) &&
        Objects.equals(this.productSku, refundPaymentRequestOrderInformationLineItemsInner.productSku) &&
        Objects.equals(this.quantity, refundPaymentRequestOrderInformationLineItemsInner.quantity) &&
        Objects.equals(this.unitPrice, refundPaymentRequestOrderInformationLineItemsInner.unitPrice) &&
        Objects.equals(this.unitOfMeasure, refundPaymentRequestOrderInformationLineItemsInner.unitOfMeasure) &&
        Objects.equals(this.totalAmount, refundPaymentRequestOrderInformationLineItemsInner.totalAmount) &&
        Objects.equals(this.taxAmount, refundPaymentRequestOrderInformationLineItemsInner.taxAmount) &&
        Objects.equals(this.taxRate, refundPaymentRequestOrderInformationLineItemsInner.taxRate) &&
        Objects.equals(this.taxAppliedAfterDiscount, refundPaymentRequestOrderInformationLineItemsInner.taxAppliedAfterDiscount) &&
        Objects.equals(this.taxStatusIndicator, refundPaymentRequestOrderInformationLineItemsInner.taxStatusIndicator) &&
        Objects.equals(this.taxTypeCode, refundPaymentRequestOrderInformationLineItemsInner.taxTypeCode) &&
        Objects.equals(this.amountIncludesTax, refundPaymentRequestOrderInformationLineItemsInner.amountIncludesTax) &&
        Objects.equals(this.typeOfSupply, refundPaymentRequestOrderInformationLineItemsInner.typeOfSupply) &&
        Objects.equals(this.commodityCode, refundPaymentRequestOrderInformationLineItemsInner.commodityCode) &&
        Objects.equals(this.discountAmount, refundPaymentRequestOrderInformationLineItemsInner.discountAmount) &&
        Objects.equals(this.discountApplied, refundPaymentRequestOrderInformationLineItemsInner.discountApplied) &&
        Objects.equals(this.discountRate, refundPaymentRequestOrderInformationLineItemsInner.discountRate) &&
        Objects.equals(this.invoiceNumber, refundPaymentRequestOrderInformationLineItemsInner.invoiceNumber) &&
        Objects.equals(this.taxDetails, refundPaymentRequestOrderInformationLineItemsInner.taxDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(productCode, productName, productSku, quantity, unitPrice, unitOfMeasure, totalAmount, taxAmount, taxRate, taxAppliedAfterDiscount, taxStatusIndicator, taxTypeCode, amountIncludesTax, typeOfSupply, commodityCode, discountAmount, discountApplied, discountRate, invoiceNumber, taxDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RefundPaymentRequestOrderInformationLineItemsInner {\n");
    sb.append("    productCode: ").append(toIndentedString(productCode)).append("\n");
    sb.append("    productName: ").append(toIndentedString(productName)).append("\n");
    sb.append("    productSku: ").append(toIndentedString(productSku)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    unitPrice: ").append(toIndentedString(unitPrice)).append("\n");
    sb.append("    unitOfMeasure: ").append(toIndentedString(unitOfMeasure)).append("\n");
    sb.append("    totalAmount: ").append(toIndentedString(totalAmount)).append("\n");
    sb.append("    taxAmount: ").append(toIndentedString(taxAmount)).append("\n");
    sb.append("    taxRate: ").append(toIndentedString(taxRate)).append("\n");
    sb.append("    taxAppliedAfterDiscount: ").append(toIndentedString(taxAppliedAfterDiscount)).append("\n");
    sb.append("    taxStatusIndicator: ").append(toIndentedString(taxStatusIndicator)).append("\n");
    sb.append("    taxTypeCode: ").append(toIndentedString(taxTypeCode)).append("\n");
    sb.append("    amountIncludesTax: ").append(toIndentedString(amountIncludesTax)).append("\n");
    sb.append("    typeOfSupply: ").append(toIndentedString(typeOfSupply)).append("\n");
    sb.append("    commodityCode: ").append(toIndentedString(commodityCode)).append("\n");
    sb.append("    discountAmount: ").append(toIndentedString(discountAmount)).append("\n");
    sb.append("    discountApplied: ").append(toIndentedString(discountApplied)).append("\n");
    sb.append("    discountRate: ").append(toIndentedString(discountRate)).append("\n");
    sb.append("    invoiceNumber: ").append(toIndentedString(invoiceNumber)).append("\n");
    sb.append("    taxDetails: ").append(toIndentedString(taxDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

