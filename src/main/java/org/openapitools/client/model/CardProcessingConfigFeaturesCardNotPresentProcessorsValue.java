/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.client.model.CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayouts;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CardProcessingConfigFeaturesCardNotPresentProcessorsValue
 */
@JsonPropertyOrder({
  CardProcessingConfigFeaturesCardNotPresentProcessorsValue.JSON_PROPERTY_RELAX_ADDRESS_VERIFICATION_SYSTEM,
  CardProcessingConfigFeaturesCardNotPresentProcessorsValue.JSON_PROPERTY_RELAX_ADDRESS_VERIFICATION_SYSTEM_ALLOW_ZIP_WITHOUT_COUNTRY,
  CardProcessingConfigFeaturesCardNotPresentProcessorsValue.JSON_PROPERTY_RELAX_ADDRESS_VERIFICATION_SYSTEM_ALLOW_EXPIRED_CARD,
  CardProcessingConfigFeaturesCardNotPresentProcessorsValue.JSON_PROPERTY_ENABLE_EMS_TRANSACTION_RISK_SCORE,
  CardProcessingConfigFeaturesCardNotPresentProcessorsValue.JSON_PROPERTY_PRESTIGIOUS_PROPERTY_INDICATOR,
  CardProcessingConfigFeaturesCardNotPresentProcessorsValue.JSON_PROPERTY_PAYOUTS
})
@JsonTypeName("CardProcessingConfig_features_cardNotPresent_processors_value")
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T19:17:21.826843+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class CardProcessingConfigFeaturesCardNotPresentProcessorsValue {
  public static final String JSON_PROPERTY_RELAX_ADDRESS_VERIFICATION_SYSTEM = "relaxAddressVerificationSystem";
  private Boolean relaxAddressVerificationSystem;

  public static final String JSON_PROPERTY_RELAX_ADDRESS_VERIFICATION_SYSTEM_ALLOW_ZIP_WITHOUT_COUNTRY = "relaxAddressVerificationSystemAllowZipWithoutCountry";
  private Boolean relaxAddressVerificationSystemAllowZipWithoutCountry;

  public static final String JSON_PROPERTY_RELAX_ADDRESS_VERIFICATION_SYSTEM_ALLOW_EXPIRED_CARD = "relaxAddressVerificationSystemAllowExpiredCard";
  private Boolean relaxAddressVerificationSystemAllowExpiredCard;

  public static final String JSON_PROPERTY_ENABLE_EMS_TRANSACTION_RISK_SCORE = "enableEmsTransactionRiskScore";
  private Boolean enableEmsTransactionRiskScore;

  public static final String JSON_PROPERTY_PRESTIGIOUS_PROPERTY_INDICATOR = "prestigiousPropertyIndicator";
  private String prestigiousPropertyIndicator;

  public static final String JSON_PROPERTY_PAYOUTS = "payouts";
  private CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayouts payouts;

  public CardProcessingConfigFeaturesCardNotPresentProcessorsValue() {
  }

  public CardProcessingConfigFeaturesCardNotPresentProcessorsValue relaxAddressVerificationSystem(Boolean relaxAddressVerificationSystem) {
    
    this.relaxAddressVerificationSystem = relaxAddressVerificationSystem;
    return this;
  }

  /**
   * Enables you to submit the payment transaction without one or more of the fields for the billTo or card_expiration. Applicable for Elavon Americas (elavonamericas), CB2A, Six (six), CMCIC (cmcic), GPX (gpx), GPN (gpn), VPC, Vero (vero), Fiserv (fiserv), American Express Direct (amexdirect), Chase Paymentech Salem (chasepaymentechsalem), RUPAY, FDI Global (fdiglobal) and Barclays HISO (barclayshiso) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays HISO&lt;/td&gt;&lt;td&gt;cp, cnp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cnp&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cp&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;hybrid&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
   * @return relaxAddressVerificationSystem
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RELAX_ADDRESS_VERIFICATION_SYSTEM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRelaxAddressVerificationSystem() {
    return relaxAddressVerificationSystem;
  }


  @JsonProperty(JSON_PROPERTY_RELAX_ADDRESS_VERIFICATION_SYSTEM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRelaxAddressVerificationSystem(Boolean relaxAddressVerificationSystem) {
    this.relaxAddressVerificationSystem = relaxAddressVerificationSystem;
  }

  public CardProcessingConfigFeaturesCardNotPresentProcessorsValue relaxAddressVerificationSystemAllowZipWithoutCountry(Boolean relaxAddressVerificationSystemAllowZipWithoutCountry) {
    
    this.relaxAddressVerificationSystemAllowZipWithoutCountry = relaxAddressVerificationSystemAllowZipWithoutCountry;
    return this;
  }

  /**
   * Allows Zip code without country. Applicable for American Express Direct (amexdirect), GPX (gpx), VPC, FDI Global (fdiglobal), Elavon Americas (elavonamericas), Chase Paymentech Salem (chasepaymentechsalem), RUPAY, GPN (gpn) and Barclays HISO (barclayshiso) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays HISO&lt;/td&gt;&lt;td&gt;cp, cnp, both&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cnp&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
   * @return relaxAddressVerificationSystemAllowZipWithoutCountry
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RELAX_ADDRESS_VERIFICATION_SYSTEM_ALLOW_ZIP_WITHOUT_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRelaxAddressVerificationSystemAllowZipWithoutCountry() {
    return relaxAddressVerificationSystemAllowZipWithoutCountry;
  }


  @JsonProperty(JSON_PROPERTY_RELAX_ADDRESS_VERIFICATION_SYSTEM_ALLOW_ZIP_WITHOUT_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRelaxAddressVerificationSystemAllowZipWithoutCountry(Boolean relaxAddressVerificationSystemAllowZipWithoutCountry) {
    this.relaxAddressVerificationSystemAllowZipWithoutCountry = relaxAddressVerificationSystemAllowZipWithoutCountry;
  }

  public CardProcessingConfigFeaturesCardNotPresentProcessorsValue relaxAddressVerificationSystemAllowExpiredCard(Boolean relaxAddressVerificationSystemAllowExpiredCard) {
    
    this.relaxAddressVerificationSystemAllowExpiredCard = relaxAddressVerificationSystemAllowExpiredCard;
    return this;
  }

  /**
   * Allows transactions that use an expired card. Applicable for American Express Direct (amexdirect), GPN (gpn), Barclays HISO (barclayshiso), Elavon Americas (elavonamericas), VPC, FDI Global (fdiglobal), GPX (gpx), RUPAY, Six (six), Chase Paymentech Salem (chasepaymentechsalem) and CB2A processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays HISO&lt;/td&gt;&lt;td&gt;cp, cnp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cnp&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
   * @return relaxAddressVerificationSystemAllowExpiredCard
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RELAX_ADDRESS_VERIFICATION_SYSTEM_ALLOW_EXPIRED_CARD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRelaxAddressVerificationSystemAllowExpiredCard() {
    return relaxAddressVerificationSystemAllowExpiredCard;
  }


  @JsonProperty(JSON_PROPERTY_RELAX_ADDRESS_VERIFICATION_SYSTEM_ALLOW_EXPIRED_CARD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRelaxAddressVerificationSystemAllowExpiredCard(Boolean relaxAddressVerificationSystemAllowExpiredCard) {
    this.relaxAddressVerificationSystemAllowExpiredCard = relaxAddressVerificationSystemAllowExpiredCard;
  }

  public CardProcessingConfigFeaturesCardNotPresentProcessorsValue enableEmsTransactionRiskScore(Boolean enableEmsTransactionRiskScore) {
    
    this.enableEmsTransactionRiskScore = enableEmsTransactionRiskScore;
    return this;
  }

  /**
   * MasterCard Expert Monitoring Solutions (EMS) provides a predictive, behavior-based fraud score in real time during authorizations for card-not-present (CNP) transactions on cards issued in the U.S. Applicable for GPX (gpx) and VPC processors.
   * @return enableEmsTransactionRiskScore
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_EMS_TRANSACTION_RISK_SCORE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnableEmsTransactionRiskScore() {
    return enableEmsTransactionRiskScore;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_EMS_TRANSACTION_RISK_SCORE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableEmsTransactionRiskScore(Boolean enableEmsTransactionRiskScore) {
    this.enableEmsTransactionRiskScore = enableEmsTransactionRiskScore;
  }

  public CardProcessingConfigFeaturesCardNotPresentProcessorsValue prestigiousPropertyIndicator(String prestigiousPropertyIndicator) {
    
    this.prestigiousPropertyIndicator = prestigiousPropertyIndicator;
    return this;
  }

  /**
   * Applicable for VPC processors.
   * @return prestigiousPropertyIndicator
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PRESTIGIOUS_PROPERTY_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPrestigiousPropertyIndicator() {
    return prestigiousPropertyIndicator;
  }


  @JsonProperty(JSON_PROPERTY_PRESTIGIOUS_PROPERTY_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrestigiousPropertyIndicator(String prestigiousPropertyIndicator) {
    this.prestigiousPropertyIndicator = prestigiousPropertyIndicator;
  }

  public CardProcessingConfigFeaturesCardNotPresentProcessorsValue payouts(CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayouts payouts) {
    
    this.payouts = payouts;
    return this;
  }

  /**
   * Get payouts
   * @return payouts
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAYOUTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayouts getPayouts() {
    return payouts;
  }


  @JsonProperty(JSON_PROPERTY_PAYOUTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPayouts(CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayouts payouts) {
    this.payouts = payouts;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardProcessingConfigFeaturesCardNotPresentProcessorsValue cardProcessingConfigFeaturesCardNotPresentProcessorsValue = (CardProcessingConfigFeaturesCardNotPresentProcessorsValue) o;
    return Objects.equals(this.relaxAddressVerificationSystem, cardProcessingConfigFeaturesCardNotPresentProcessorsValue.relaxAddressVerificationSystem) &&
        Objects.equals(this.relaxAddressVerificationSystemAllowZipWithoutCountry, cardProcessingConfigFeaturesCardNotPresentProcessorsValue.relaxAddressVerificationSystemAllowZipWithoutCountry) &&
        Objects.equals(this.relaxAddressVerificationSystemAllowExpiredCard, cardProcessingConfigFeaturesCardNotPresentProcessorsValue.relaxAddressVerificationSystemAllowExpiredCard) &&
        Objects.equals(this.enableEmsTransactionRiskScore, cardProcessingConfigFeaturesCardNotPresentProcessorsValue.enableEmsTransactionRiskScore) &&
        Objects.equals(this.prestigiousPropertyIndicator, cardProcessingConfigFeaturesCardNotPresentProcessorsValue.prestigiousPropertyIndicator) &&
        Objects.equals(this.payouts, cardProcessingConfigFeaturesCardNotPresentProcessorsValue.payouts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(relaxAddressVerificationSystem, relaxAddressVerificationSystemAllowZipWithoutCountry, relaxAddressVerificationSystemAllowExpiredCard, enableEmsTransactionRiskScore, prestigiousPropertyIndicator, payouts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardProcessingConfigFeaturesCardNotPresentProcessorsValue {\n");
    sb.append("    relaxAddressVerificationSystem: ").append(toIndentedString(relaxAddressVerificationSystem)).append("\n");
    sb.append("    relaxAddressVerificationSystemAllowZipWithoutCountry: ").append(toIndentedString(relaxAddressVerificationSystemAllowZipWithoutCountry)).append("\n");
    sb.append("    relaxAddressVerificationSystemAllowExpiredCard: ").append(toIndentedString(relaxAddressVerificationSystemAllowExpiredCard)).append("\n");
    sb.append("    enableEmsTransactionRiskScore: ").append(toIndentedString(enableEmsTransactionRiskScore)).append("\n");
    sb.append("    prestigiousPropertyIndicator: ").append(toIndentedString(prestigiousPropertyIndicator)).append("\n");
    sb.append("    payouts: ").append(toIndentedString(payouts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

