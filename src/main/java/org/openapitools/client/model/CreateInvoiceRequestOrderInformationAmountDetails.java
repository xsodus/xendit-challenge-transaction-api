/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import org.openapitools.client.model.CreateInvoiceRequestOrderInformationAmountDetailsFreight;
import org.openapitools.client.model.CreateInvoiceRequestOrderInformationAmountDetailsTaxDetails;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Contains all of the amount-related fields in the invoice.
 */
@JsonPropertyOrder({
  CreateInvoiceRequestOrderInformationAmountDetails.JSON_PROPERTY_TOTAL_AMOUNT,
  CreateInvoiceRequestOrderInformationAmountDetails.JSON_PROPERTY_CURRENCY,
  CreateInvoiceRequestOrderInformationAmountDetails.JSON_PROPERTY_DISCOUNT_AMOUNT,
  CreateInvoiceRequestOrderInformationAmountDetails.JSON_PROPERTY_DISCOUNT_PERCENT,
  CreateInvoiceRequestOrderInformationAmountDetails.JSON_PROPERTY_SUB_AMOUNT,
  CreateInvoiceRequestOrderInformationAmountDetails.JSON_PROPERTY_MINIMUM_PARTIAL_AMOUNT,
  CreateInvoiceRequestOrderInformationAmountDetails.JSON_PROPERTY_TAX_DETAILS,
  CreateInvoiceRequestOrderInformationAmountDetails.JSON_PROPERTY_FREIGHT
})
@JsonTypeName("createInvoice_request_orderInformation_amountDetails")
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T19:17:21.826843+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class CreateInvoiceRequestOrderInformationAmountDetails {
  public static final String JSON_PROPERTY_TOTAL_AMOUNT = "totalAmount";
  private String totalAmount;

  public static final String JSON_PROPERTY_CURRENCY = "currency";
  private String currency;

  public static final String JSON_PROPERTY_DISCOUNT_AMOUNT = "discountAmount";
  private String discountAmount;

  public static final String JSON_PROPERTY_DISCOUNT_PERCENT = "discountPercent";
  private BigDecimal discountPercent;

  public static final String JSON_PROPERTY_SUB_AMOUNT = "subAmount";
  private BigDecimal subAmount;

  public static final String JSON_PROPERTY_MINIMUM_PARTIAL_AMOUNT = "minimumPartialAmount";
  private BigDecimal minimumPartialAmount;

  public static final String JSON_PROPERTY_TAX_DETAILS = "taxDetails";
  private CreateInvoiceRequestOrderInformationAmountDetailsTaxDetails taxDetails;

  public static final String JSON_PROPERTY_FREIGHT = "freight";
  private CreateInvoiceRequestOrderInformationAmountDetailsFreight freight;

  public CreateInvoiceRequestOrderInformationAmountDetails() {
  }

  public CreateInvoiceRequestOrderInformationAmountDetails totalAmount(String totalAmount) {
    
    this.totalAmount = totalAmount;
    return this;
  }

  /**
   * Grand total for the order. This value cannot be negative. You can include a decimal point (.), but no other special characters. CyberSource truncates the amount to the correct number of decimal places.  **Note** For CTV, FDCCompass, Paymentech processors, the maximum length for this field is 12.  **Important** Some processors have specific requirements and limitations, such as maximum amounts and maximum field lengths.  If your processor supports zero amount authorizations, you can set this field to 0 for the authorization to check if the card is lost or stolen.   #### Card Present Required to include either this field or &#x60;orderInformation.lineItems[].unitPrice&#x60; for the order.  #### Invoicing Required for creating a new invoice.  #### PIN Debit Amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount.  Required field for PIN Debit purchase and PIN Debit credit requests. Optional field for PIN Debit reversal requests.  #### GPX This field is optional for reversing an authorization or credit; however, for all other processors, these fields are required.  #### DCC with a Third-Party Provider Set this field to the converted amount that was returned by the DCC provider. You must include either this field or the 1st line item in the order and the specific line-order amount in your request.   #### DCC for First Data Not used. 
   * @return totalAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTotalAmount() {
    return totalAmount;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalAmount(String totalAmount) {
    this.totalAmount = totalAmount;
  }

  public CreateInvoiceRequestOrderInformationAmountDetails currency(String currency) {
    
    this.currency = currency;
    return this;
  }

  /**
   * Currency used for the order. Use the three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)  #### Used by **Authorization** Required field.  **Authorization Reversal** For an authorization reversal (&#x60;reversalInformation&#x60;) or a capture (&#x60;processingOptions.capture&#x60; is set to &#x60;true&#x60;), you must use the same currency that you used in your payment authorization request.  #### PIN Debit Currency for the amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf). Returned by PIN debit purchase.  For PIN debit reversal requests, you must use the same currency that was used for the PIN debit purchase or PIN debit credit that you are reversing. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).  Required field for PIN Debit purchase and PIN Debit credit requests. Optional field for PIN Debit reversal requests.  #### GPX This field is optional for reversing an authorization or credit.  #### DCC for First Data Your local currency.  #### Tax Calculation Required for international tax and value added tax only. Optional for U.S. and Canadian taxes. Your local currency. 
   * @return currency
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCurrency() {
    return currency;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrency(String currency) {
    this.currency = currency;
  }

  public CreateInvoiceRequestOrderInformationAmountDetails discountAmount(String discountAmount) {
    
    this.discountAmount = discountAmount;
    return this;
  }

  /**
   * Total discount amount applied to the order. 
   * @return discountAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DISCOUNT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDiscountAmount() {
    return discountAmount;
  }


  @JsonProperty(JSON_PROPERTY_DISCOUNT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDiscountAmount(String discountAmount) {
    this.discountAmount = discountAmount;
  }

  public CreateInvoiceRequestOrderInformationAmountDetails discountPercent(BigDecimal discountPercent) {
    
    this.discountPercent = discountPercent;
    return this;
  }

  /**
   * The total discount percentage applied to the invoice.
   * @return discountPercent
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DISCOUNT_PERCENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getDiscountPercent() {
    return discountPercent;
  }


  @JsonProperty(JSON_PROPERTY_DISCOUNT_PERCENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDiscountPercent(BigDecimal discountPercent) {
    this.discountPercent = discountPercent;
  }

  public CreateInvoiceRequestOrderInformationAmountDetails subAmount(BigDecimal subAmount) {
    
    this.subAmount = subAmount;
    return this;
  }

  /**
   * Sub-amount of the invoice.
   * @return subAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUB_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getSubAmount() {
    return subAmount;
  }


  @JsonProperty(JSON_PROPERTY_SUB_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubAmount(BigDecimal subAmount) {
    this.subAmount = subAmount;
  }

  public CreateInvoiceRequestOrderInformationAmountDetails minimumPartialAmount(BigDecimal minimumPartialAmount) {
    
    this.minimumPartialAmount = minimumPartialAmount;
    return this;
  }

  /**
   * The minimum partial amount required to pay the invoice.
   * @return minimumPartialAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MINIMUM_PARTIAL_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getMinimumPartialAmount() {
    return minimumPartialAmount;
  }


  @JsonProperty(JSON_PROPERTY_MINIMUM_PARTIAL_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMinimumPartialAmount(BigDecimal minimumPartialAmount) {
    this.minimumPartialAmount = minimumPartialAmount;
  }

  public CreateInvoiceRequestOrderInformationAmountDetails taxDetails(CreateInvoiceRequestOrderInformationAmountDetailsTaxDetails taxDetails) {
    
    this.taxDetails = taxDetails;
    return this;
  }

  /**
   * Get taxDetails
   * @return taxDetails
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAX_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CreateInvoiceRequestOrderInformationAmountDetailsTaxDetails getTaxDetails() {
    return taxDetails;
  }


  @JsonProperty(JSON_PROPERTY_TAX_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaxDetails(CreateInvoiceRequestOrderInformationAmountDetailsTaxDetails taxDetails) {
    this.taxDetails = taxDetails;
  }

  public CreateInvoiceRequestOrderInformationAmountDetails freight(CreateInvoiceRequestOrderInformationAmountDetailsFreight freight) {
    
    this.freight = freight;
    return this;
  }

  /**
   * Get freight
   * @return freight
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FREIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CreateInvoiceRequestOrderInformationAmountDetailsFreight getFreight() {
    return freight;
  }


  @JsonProperty(JSON_PROPERTY_FREIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFreight(CreateInvoiceRequestOrderInformationAmountDetailsFreight freight) {
    this.freight = freight;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateInvoiceRequestOrderInformationAmountDetails createInvoiceRequestOrderInformationAmountDetails = (CreateInvoiceRequestOrderInformationAmountDetails) o;
    return Objects.equals(this.totalAmount, createInvoiceRequestOrderInformationAmountDetails.totalAmount) &&
        Objects.equals(this.currency, createInvoiceRequestOrderInformationAmountDetails.currency) &&
        Objects.equals(this.discountAmount, createInvoiceRequestOrderInformationAmountDetails.discountAmount) &&
        Objects.equals(this.discountPercent, createInvoiceRequestOrderInformationAmountDetails.discountPercent) &&
        Objects.equals(this.subAmount, createInvoiceRequestOrderInformationAmountDetails.subAmount) &&
        Objects.equals(this.minimumPartialAmount, createInvoiceRequestOrderInformationAmountDetails.minimumPartialAmount) &&
        Objects.equals(this.taxDetails, createInvoiceRequestOrderInformationAmountDetails.taxDetails) &&
        Objects.equals(this.freight, createInvoiceRequestOrderInformationAmountDetails.freight);
  }

  @Override
  public int hashCode() {
    return Objects.hash(totalAmount, currency, discountAmount, discountPercent, subAmount, minimumPartialAmount, taxDetails, freight);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateInvoiceRequestOrderInformationAmountDetails {\n");
    sb.append("    totalAmount: ").append(toIndentedString(totalAmount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    discountAmount: ").append(toIndentedString(discountAmount)).append("\n");
    sb.append("    discountPercent: ").append(toIndentedString(discountPercent)).append("\n");
    sb.append("    subAmount: ").append(toIndentedString(subAmount)).append("\n");
    sb.append("    minimumPartialAmount: ").append(toIndentedString(minimumPartialAmount)).append("\n");
    sb.append("    taxDetails: ").append(toIndentedString(taxDetails)).append("\n");
    sb.append("    freight: ").append(toIndentedString(freight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

