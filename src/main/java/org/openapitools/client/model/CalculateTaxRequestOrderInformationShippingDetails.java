/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CalculateTaxRequestOrderInformationShippingDetails
 */
@JsonPropertyOrder({
  CalculateTaxRequestOrderInformationShippingDetails.JSON_PROPERTY_SHIP_FROM_LOCALITY,
  CalculateTaxRequestOrderInformationShippingDetails.JSON_PROPERTY_SHIP_FROM_COUNTRY,
  CalculateTaxRequestOrderInformationShippingDetails.JSON_PROPERTY_SHIP_FROM_POSTAL_CODE,
  CalculateTaxRequestOrderInformationShippingDetails.JSON_PROPERTY_SHIP_FROM_ADMINISTRATIVE_AREA
})
@JsonTypeName("calculateTax_request_orderInformation_shippingDetails")
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T19:17:21.826843+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class CalculateTaxRequestOrderInformationShippingDetails {
  public static final String JSON_PROPERTY_SHIP_FROM_LOCALITY = "shipFromLocality";
  private String shipFromLocality;

  public static final String JSON_PROPERTY_SHIP_FROM_COUNTRY = "shipFromCountry";
  private String shipFromCountry;

  public static final String JSON_PROPERTY_SHIP_FROM_POSTAL_CODE = "shipFromPostalCode";
  private String shipFromPostalCode;

  public static final String JSON_PROPERTY_SHIP_FROM_ADMINISTRATIVE_AREA = "shipFromAdministrativeArea";
  private String shipFromAdministrativeArea;

  public CalculateTaxRequestOrderInformationShippingDetails() {
  }

  public CalculateTaxRequestOrderInformationShippingDetails shipFromLocality(String shipFromLocality) {
    
    this.shipFromLocality = shipFromLocality;
    return this;
  }

  /**
   * City where the product is shipped from. This field is used only when the &#x60;orderInformation.shipTo.administrativeArea&#x60; and &#x60;orderInformation.shipTo.country&#x60; fields are present.  **NOTE** If this field appears in a &#x60;lineItems&#x60; object, then the value of this field in the &#x60;lineItems&#x60; object overrides the value of the corresponding field at the request-level or order-level object.  #### Tax Calculation This field is used to determine tax rules and/or rates applied to the transaction based on sourcing.  Optional for U.S. and Canadian taxes. Not applicable to international and value added taxes. 
   * @return shipFromLocality
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SHIP_FROM_LOCALITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getShipFromLocality() {
    return shipFromLocality;
  }


  @JsonProperty(JSON_PROPERTY_SHIP_FROM_LOCALITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShipFromLocality(String shipFromLocality) {
    this.shipFromLocality = shipFromLocality;
  }

  public CalculateTaxRequestOrderInformationShippingDetails shipFromCountry(String shipFromCountry) {
    
    this.shipFromCountry = shipFromCountry;
    return this;
  }

  /**
   * Country from which the order is shipped. This field is used only when &#x60;orderInformation.shippingDetails.shipFromLocality&#x60; and &#x60;orderInformation.shippingDetails.shipFromAdministrativeArea&#x60; are present. Use the [ISO Standard Country Codes](http://apps.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf).  **NOTE** If this field appears in a &#x60;lineItems&#x60; object, then the value of this field in the &#x60;lineItems&#x60; object overrides the value of the corresponding field at the request-level or order-level object.  #### Tax Calculation This field is used to determine tax rules and/ or rates applied to the transaction based on sourcing.  Optional for U.S., Canadian, international tax, and value added taxes. 
   * @return shipFromCountry
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SHIP_FROM_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getShipFromCountry() {
    return shipFromCountry;
  }


  @JsonProperty(JSON_PROPERTY_SHIP_FROM_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShipFromCountry(String shipFromCountry) {
    this.shipFromCountry = shipFromCountry;
  }

  public CalculateTaxRequestOrderInformationShippingDetails shipFromPostalCode(String shipFromPostalCode) {
    
    this.shipFromPostalCode = shipFromPostalCode;
    return this;
  }

  /**
   * Postal code where the product is shipped from.  #### Tax Calculation This field is used to determine tax rules and/or rates applied to the transaction based on sourcing.  Optional for U.S. and Canadian taxes. Not applicable to international and value added taxes. 
   * @return shipFromPostalCode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SHIP_FROM_POSTAL_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getShipFromPostalCode() {
    return shipFromPostalCode;
  }


  @JsonProperty(JSON_PROPERTY_SHIP_FROM_POSTAL_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShipFromPostalCode(String shipFromPostalCode) {
    this.shipFromPostalCode = shipFromPostalCode;
  }

  public CalculateTaxRequestOrderInformationShippingDetails shipFromAdministrativeArea(String shipFromAdministrativeArea) {
    
    this.shipFromAdministrativeArea = shipFromAdministrativeArea;
    return this;
  }

  /**
   * State from which the order is shipped. This field is used only when &#x60;orderInformation.shippingDetails.shipFromLocality&#x60; and &#x60;orderInformation.shippingDetails.shipFromCountry&#x60; are present. Use the [State, Province, and Territory Codes for the United States and Canada](http://apps.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf).  **NOTE** If this field appears in a &#x60;lineItems&#x60; object, then the value of this field in the &#x60;lineItems&#x60; object overrides the value of the corresponding field at the request-level or order-level object.  #### Tax Calculation This field is used to determine tax rules and/or rates applied to the transaction based on sourcing.  Optional for U.S. and Canadian taxes. Not applicable to international and value added taxes. 
   * @return shipFromAdministrativeArea
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SHIP_FROM_ADMINISTRATIVE_AREA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getShipFromAdministrativeArea() {
    return shipFromAdministrativeArea;
  }


  @JsonProperty(JSON_PROPERTY_SHIP_FROM_ADMINISTRATIVE_AREA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShipFromAdministrativeArea(String shipFromAdministrativeArea) {
    this.shipFromAdministrativeArea = shipFromAdministrativeArea;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CalculateTaxRequestOrderInformationShippingDetails calculateTaxRequestOrderInformationShippingDetails = (CalculateTaxRequestOrderInformationShippingDetails) o;
    return Objects.equals(this.shipFromLocality, calculateTaxRequestOrderInformationShippingDetails.shipFromLocality) &&
        Objects.equals(this.shipFromCountry, calculateTaxRequestOrderInformationShippingDetails.shipFromCountry) &&
        Objects.equals(this.shipFromPostalCode, calculateTaxRequestOrderInformationShippingDetails.shipFromPostalCode) &&
        Objects.equals(this.shipFromAdministrativeArea, calculateTaxRequestOrderInformationShippingDetails.shipFromAdministrativeArea);
  }

  @Override
  public int hashCode() {
    return Objects.hash(shipFromLocality, shipFromCountry, shipFromPostalCode, shipFromAdministrativeArea);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CalculateTaxRequestOrderInformationShippingDetails {\n");
    sb.append("    shipFromLocality: ").append(toIndentedString(shipFromLocality)).append("\n");
    sb.append("    shipFromCountry: ").append(toIndentedString(shipFromCountry)).append("\n");
    sb.append("    shipFromPostalCode: ").append(toIndentedString(shipFromPostalCode)).append("\n");
    sb.append("    shipFromAdministrativeArea: ").append(toIndentedString(shipFromAdministrativeArea)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

