/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CreatePaymentRequestTravelInformationTransitAirlineLegsInner
 */
@JsonPropertyOrder({
  CreatePaymentRequestTravelInformationTransitAirlineLegsInner.JSON_PROPERTY_CARRIER_CODE,
  CreatePaymentRequestTravelInformationTransitAirlineLegsInner.JSON_PROPERTY_FLIGHT_NUMBER,
  CreatePaymentRequestTravelInformationTransitAirlineLegsInner.JSON_PROPERTY_ORIGINATING_AIRPORT_CODE,
  CreatePaymentRequestTravelInformationTransitAirlineLegsInner.JSON_PROPERTY_PROPERTY_CLASS,
  CreatePaymentRequestTravelInformationTransitAirlineLegsInner.JSON_PROPERTY_STOPOVER_INDICATOR,
  CreatePaymentRequestTravelInformationTransitAirlineLegsInner.JSON_PROPERTY_DEPARTURE_DATE,
  CreatePaymentRequestTravelInformationTransitAirlineLegsInner.JSON_PROPERTY_DESTINATION_AIRPORT_CODE,
  CreatePaymentRequestTravelInformationTransitAirlineLegsInner.JSON_PROPERTY_FARE_BASIS,
  CreatePaymentRequestTravelInformationTransitAirlineLegsInner.JSON_PROPERTY_DEPART_TAX_AMOUNT,
  CreatePaymentRequestTravelInformationTransitAirlineLegsInner.JSON_PROPERTY_CONJUNCTION_TICKET,
  CreatePaymentRequestTravelInformationTransitAirlineLegsInner.JSON_PROPERTY_EXCHANGE_TICKET_NUMBER,
  CreatePaymentRequestTravelInformationTransitAirlineLegsInner.JSON_PROPERTY_COUPON_NUMBER,
  CreatePaymentRequestTravelInformationTransitAirlineLegsInner.JSON_PROPERTY_DEPARTURE_TIME,
  CreatePaymentRequestTravelInformationTransitAirlineLegsInner.JSON_PROPERTY_DEPARTURE_TIME_MERIDIAN,
  CreatePaymentRequestTravelInformationTransitAirlineLegsInner.JSON_PROPERTY_ARRIVAL_TIME,
  CreatePaymentRequestTravelInformationTransitAirlineLegsInner.JSON_PROPERTY_ARRIVAL_TIME_MERIDIAN,
  CreatePaymentRequestTravelInformationTransitAirlineLegsInner.JSON_PROPERTY_ENDORSEMENTS_RESTRICTIONS,
  CreatePaymentRequestTravelInformationTransitAirlineLegsInner.JSON_PROPERTY_TOTAL_FARE_AMOUNT,
  CreatePaymentRequestTravelInformationTransitAirlineLegsInner.JSON_PROPERTY_FEE_AMOUNT,
  CreatePaymentRequestTravelInformationTransitAirlineLegsInner.JSON_PROPERTY_TAX_AMOUNT
})
@JsonTypeName("createPayment_request_travelInformation_transit_airline_legs_inner")
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T19:17:21.826843+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class CreatePaymentRequestTravelInformationTransitAirlineLegsInner {
  public static final String JSON_PROPERTY_CARRIER_CODE = "carrierCode";
  private String carrierCode;

  public static final String JSON_PROPERTY_FLIGHT_NUMBER = "flightNumber";
  private String flightNumber;

  public static final String JSON_PROPERTY_ORIGINATING_AIRPORT_CODE = "originatingAirportCode";
  private String originatingAirportCode;

  public static final String JSON_PROPERTY_PROPERTY_CLASS = "class";
  private String propertyClass;

  public static final String JSON_PROPERTY_STOPOVER_INDICATOR = "stopoverIndicator";
  private Integer stopoverIndicator;

  public static final String JSON_PROPERTY_DEPARTURE_DATE = "departureDate";
  private Integer departureDate;

  public static final String JSON_PROPERTY_DESTINATION_AIRPORT_CODE = "destinationAirportCode";
  private String destinationAirportCode;

  public static final String JSON_PROPERTY_FARE_BASIS = "fareBasis";
  private String fareBasis;

  public static final String JSON_PROPERTY_DEPART_TAX_AMOUNT = "departTaxAmount";
  private String departTaxAmount;

  public static final String JSON_PROPERTY_CONJUNCTION_TICKET = "conjunctionTicket";
  private String conjunctionTicket;

  public static final String JSON_PROPERTY_EXCHANGE_TICKET_NUMBER = "exchangeTicketNumber";
  private String exchangeTicketNumber;

  public static final String JSON_PROPERTY_COUPON_NUMBER = "couponNumber";
  private String couponNumber;

  public static final String JSON_PROPERTY_DEPARTURE_TIME = "departureTime";
  private Integer departureTime;

  public static final String JSON_PROPERTY_DEPARTURE_TIME_MERIDIAN = "departureTimeMeridian";
  private String departureTimeMeridian;

  public static final String JSON_PROPERTY_ARRIVAL_TIME = "arrivalTime";
  private Integer arrivalTime;

  public static final String JSON_PROPERTY_ARRIVAL_TIME_MERIDIAN = "arrivalTimeMeridian";
  private String arrivalTimeMeridian;

  public static final String JSON_PROPERTY_ENDORSEMENTS_RESTRICTIONS = "endorsementsRestrictions";
  private String endorsementsRestrictions;

  public static final String JSON_PROPERTY_TOTAL_FARE_AMOUNT = "totalFareAmount";
  private String totalFareAmount;

  public static final String JSON_PROPERTY_FEE_AMOUNT = "feeAmount";
  private String feeAmount;

  public static final String JSON_PROPERTY_TAX_AMOUNT = "taxAmount";
  private String taxAmount;

  public CreatePaymentRequestTravelInformationTransitAirlineLegsInner() {
  }

  public CreatePaymentRequestTravelInformationTransitAirlineLegsInner carrierCode(String carrierCode) {
    
    this.carrierCode = carrierCode;
    return this;
  }

  /**
   * IATA code for the carrier for this leg of the trip. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field for travel legs. 
   * @return carrierCode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CARRIER_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCarrierCode() {
    return carrierCode;
  }


  @JsonProperty(JSON_PROPERTY_CARRIER_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCarrierCode(String carrierCode) {
    this.carrierCode = carrierCode;
  }

  public CreatePaymentRequestTravelInformationTransitAirlineLegsInner flightNumber(String flightNumber) {
    
    this.flightNumber = flightNumber;
    return this;
  }

  /**
   * Flight number for this leg of the trip. Restrictions are limitations for the ticket based on the type of fare, such as a nonrefundable ticket or a 3-day minimum stay. Format: English characters only. Optional request field for travel legs. 
   * @return flightNumber
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FLIGHT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFlightNumber() {
    return flightNumber;
  }


  @JsonProperty(JSON_PROPERTY_FLIGHT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFlightNumber(String flightNumber) {
    this.flightNumber = flightNumber;
  }

  public CreatePaymentRequestTravelInformationTransitAirlineLegsInner originatingAirportCode(String originatingAirportCode) {
    
    this.originatingAirportCode = originatingAirportCode;
    return this;
  }

  /**
   * IATA code for the originating airport for this leg of the trip. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field for travel legs. 
   * @return originatingAirportCode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ORIGINATING_AIRPORT_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOriginatingAirportCode() {
    return originatingAirportCode;
  }


  @JsonProperty(JSON_PROPERTY_ORIGINATING_AIRPORT_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOriginatingAirportCode(String originatingAirportCode) {
    this.originatingAirportCode = originatingAirportCode;
  }

  public CreatePaymentRequestTravelInformationTransitAirlineLegsInner propertyClass(String propertyClass) {
    
    this.propertyClass = propertyClass;
    return this;
  }

  /**
   * IATA code for the class of service for this leg of the trip. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field for travel legs. 
   * @return propertyClass
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROPERTY_CLASS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPropertyClass() {
    return propertyClass;
  }


  @JsonProperty(JSON_PROPERTY_PROPERTY_CLASS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPropertyClass(String propertyClass) {
    this.propertyClass = propertyClass;
  }

  public CreatePaymentRequestTravelInformationTransitAirlineLegsInner stopoverIndicator(Integer stopoverIndicator) {
    
    this.stopoverIndicator = stopoverIndicator;
    return this;
  }

  /**
   * Code that indicates whether a stopover is allowed on this leg of the trip. Possible values: - &#x60;O&#x60; (capital letter \&quot;O\&quot;) (default): Stopover allowed - &#x60;X&#x60; (capital letter \&quot;X\&quot;): Stopover not allowed Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field for travel legs. 
   * @return stopoverIndicator
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STOPOVER_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getStopoverIndicator() {
    return stopoverIndicator;
  }


  @JsonProperty(JSON_PROPERTY_STOPOVER_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStopoverIndicator(Integer stopoverIndicator) {
    this.stopoverIndicator = stopoverIndicator;
  }

  public CreatePaymentRequestTravelInformationTransitAirlineLegsInner departureDate(Integer departureDate) {
    
    this.departureDate = departureDate;
    return this;
  }

  /**
   * Departure date for the first leg of the trip. Format: &#x60;YYYYMMDD&#x60;. Format: English characters only. Optional request field for travel legs. 
   * @return departureDate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEPARTURE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getDepartureDate() {
    return departureDate;
  }


  @JsonProperty(JSON_PROPERTY_DEPARTURE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDepartureDate(Integer departureDate) {
    this.departureDate = departureDate;
  }

  public CreatePaymentRequestTravelInformationTransitAirlineLegsInner destinationAirportCode(String destinationAirportCode) {
    
    this.destinationAirportCode = destinationAirportCode;
    return this;
  }

  /**
   * IATA code for the destination airport for this leg of the trip. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field for travel legs. 
   * @return destinationAirportCode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESTINATION_AIRPORT_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDestinationAirportCode() {
    return destinationAirportCode;
  }


  @JsonProperty(JSON_PROPERTY_DESTINATION_AIRPORT_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDestinationAirportCode(String destinationAirportCode) {
    this.destinationAirportCode = destinationAirportCode;
  }

  public CreatePaymentRequestTravelInformationTransitAirlineLegsInner fareBasis(String fareBasis) {
    
    this.fareBasis = fareBasis;
    return this;
  }

  /**
   * Code for the fare basis for this leg of the trip. The fare basis is assigned by the carriers and indicates a particular ticket type, such as business class or discounted/nonrefundable. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Format: English characters only. Optional request field for travel legs.auto_rental_regular_mileage_cost 
   * @return fareBasis
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FARE_BASIS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFareBasis() {
    return fareBasis;
  }


  @JsonProperty(JSON_PROPERTY_FARE_BASIS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFareBasis(String fareBasis) {
    this.fareBasis = fareBasis;
  }

  public CreatePaymentRequestTravelInformationTransitAirlineLegsInner departTaxAmount(String departTaxAmount) {
    
    this.departTaxAmount = departTaxAmount;
    return this;
  }

  /**
   * Amount of departure tax for this leg of the trip. 
   * @return departTaxAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEPART_TAX_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDepartTaxAmount() {
    return departTaxAmount;
  }


  @JsonProperty(JSON_PROPERTY_DEPART_TAX_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDepartTaxAmount(String departTaxAmount) {
    this.departTaxAmount = departTaxAmount;
  }

  public CreatePaymentRequestTravelInformationTransitAirlineLegsInner conjunctionTicket(String conjunctionTicket) {
    
    this.conjunctionTicket = conjunctionTicket;
    return this;
  }

  /**
   * Ticket that contains additional coupons for this leg of the trip on an itinerary that has more than four segments. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field for travel legs. 
   * @return conjunctionTicket
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONJUNCTION_TICKET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getConjunctionTicket() {
    return conjunctionTicket;
  }


  @JsonProperty(JSON_PROPERTY_CONJUNCTION_TICKET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConjunctionTicket(String conjunctionTicket) {
    this.conjunctionTicket = conjunctionTicket;
  }

  public CreatePaymentRequestTravelInformationTransitAirlineLegsInner exchangeTicketNumber(String exchangeTicketNumber) {
    
    this.exchangeTicketNumber = exchangeTicketNumber;
    return this;
  }

  /**
   * New ticket number that is issued when the ticket is exchanged for this leg of the trip. Restrictions are limitations for the ticket based on the type of fare, such as a nonrefundable ticket or a 3-day minimum stay. Format: English characters only. Optional request field for travel legs. 
   * @return exchangeTicketNumber
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXCHANGE_TICKET_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExchangeTicketNumber() {
    return exchangeTicketNumber;
  }


  @JsonProperty(JSON_PROPERTY_EXCHANGE_TICKET_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExchangeTicketNumber(String exchangeTicketNumber) {
    this.exchangeTicketNumber = exchangeTicketNumber;
  }

  public CreatePaymentRequestTravelInformationTransitAirlineLegsInner couponNumber(String couponNumber) {
    
    this.couponNumber = couponNumber;
    return this;
  }

  /**
   * Coupon number. Each leg on the ticket requires a separate coupon, and each coupon is identified by the coupon number. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field for travel legs. 
   * @return couponNumber
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COUPON_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCouponNumber() {
    return couponNumber;
  }


  @JsonProperty(JSON_PROPERTY_COUPON_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCouponNumber(String couponNumber) {
    this.couponNumber = couponNumber;
  }

  public CreatePaymentRequestTravelInformationTransitAirlineLegsInner departureTime(Integer departureTime) {
    
    this.departureTime = departureTime;
    return this;
  }

  /**
   * Time of departure for this leg of the trip. The format is military time and HHMM: If not all zeros, then the hours must be &#x60;00-23&#x60; and the minutes must be &#x60;00-59&#x60;. Format: English characters only. Optional request field for travel legs. 
   * @return departureTime
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEPARTURE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getDepartureTime() {
    return departureTime;
  }


  @JsonProperty(JSON_PROPERTY_DEPARTURE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDepartureTime(Integer departureTime) {
    this.departureTime = departureTime;
  }

  public CreatePaymentRequestTravelInformationTransitAirlineLegsInner departureTimeMeridian(String departureTimeMeridian) {
    
    this.departureTimeMeridian = departureTimeMeridian;
    return this;
  }

  /**
   * AM or PM for the departure time. Possible values: - A: 12:00 midnight to 11:59 a.m. - P: 12:00 noon to 11:59 p.m Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field for travel legs. 
   * @return departureTimeMeridian
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEPARTURE_TIME_MERIDIAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDepartureTimeMeridian() {
    return departureTimeMeridian;
  }


  @JsonProperty(JSON_PROPERTY_DEPARTURE_TIME_MERIDIAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDepartureTimeMeridian(String departureTimeMeridian) {
    this.departureTimeMeridian = departureTimeMeridian;
  }

  public CreatePaymentRequestTravelInformationTransitAirlineLegsInner arrivalTime(Integer arrivalTime) {
    
    this.arrivalTime = arrivalTime;
    return this;
  }

  /**
   * Time of arrival for this leg of the trip. The format is military time and HHMM: If not all zeros, then the hours must be &#x60;00-23&#x60; and the minutes must be &#x60;00-59&#x60; Format: English characters only. Optional request field for travel legs. 
   * @return arrivalTime
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ARRIVAL_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getArrivalTime() {
    return arrivalTime;
  }


  @JsonProperty(JSON_PROPERTY_ARRIVAL_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setArrivalTime(Integer arrivalTime) {
    this.arrivalTime = arrivalTime;
  }

  public CreatePaymentRequestTravelInformationTransitAirlineLegsInner arrivalTimeMeridian(String arrivalTimeMeridian) {
    
    this.arrivalTimeMeridian = arrivalTimeMeridian;
    return this;
  }

  /**
   * AM or PM for the arrival time for this leg of the trip. Possible values: - &#x60;A&#x60;: 12:00 midnight to 11:59 a.m. - &#x60;P&#x60;: 12:00 noon to 11:59 p.m. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field for travel legs. 
   * @return arrivalTimeMeridian
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ARRIVAL_TIME_MERIDIAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getArrivalTimeMeridian() {
    return arrivalTimeMeridian;
  }


  @JsonProperty(JSON_PROPERTY_ARRIVAL_TIME_MERIDIAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setArrivalTimeMeridian(String arrivalTimeMeridian) {
    this.arrivalTimeMeridian = arrivalTimeMeridian;
  }

  public CreatePaymentRequestTravelInformationTransitAirlineLegsInner endorsementsRestrictions(String endorsementsRestrictions) {
    
    this.endorsementsRestrictions = endorsementsRestrictions;
    return this;
  }

  /**
   * Notes or notations about endorsements and restrictions for this leg of the trip. Endorsements can be notations added by the travel agency, including mandatory government-required notations such as value added tax. Restrictions are limitations for the ticket based on the type of fare, such as a nonrefundable ticket or a 3-day minimum stay. Format: English characters only. Optional request field for travel legs. 
   * @return endorsementsRestrictions
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENDORSEMENTS_RESTRICTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEndorsementsRestrictions() {
    return endorsementsRestrictions;
  }


  @JsonProperty(JSON_PROPERTY_ENDORSEMENTS_RESTRICTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEndorsementsRestrictions(String endorsementsRestrictions) {
    this.endorsementsRestrictions = endorsementsRestrictions;
  }

  public CreatePaymentRequestTravelInformationTransitAirlineLegsInner totalFareAmount(String totalFareAmount) {
    
    this.totalFareAmount = totalFareAmount;
    return this;
  }

  /**
   * Total fare for this leg of the trip. Format: English characters only. Optional request field for travel legs. 
   * @return totalFareAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL_FARE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTotalFareAmount() {
    return totalFareAmount;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_FARE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalFareAmount(String totalFareAmount) {
    this.totalFareAmount = totalFareAmount;
  }

  public CreatePaymentRequestTravelInformationTransitAirlineLegsInner feeAmount(String feeAmount) {
    
    this.feeAmount = feeAmount;
    return this;
  }

  /**
   * Fee for this leg of the trip, such as an airport fee or country fee. Format: English characters only. Optional request field for travel legs. 
   * @return feeAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FEE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFeeAmount() {
    return feeAmount;
  }


  @JsonProperty(JSON_PROPERTY_FEE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFeeAmount(String feeAmount) {
    this.feeAmount = feeAmount;
  }

  public CreatePaymentRequestTravelInformationTransitAirlineLegsInner taxAmount(String taxAmount) {
    
    this.taxAmount = taxAmount;
    return this;
  }

  /**
   * Tax for this leg of the trip. Format: English characters only. Optional request field for travel legs. 
   * @return taxAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAX_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTaxAmount() {
    return taxAmount;
  }


  @JsonProperty(JSON_PROPERTY_TAX_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaxAmount(String taxAmount) {
    this.taxAmount = taxAmount;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreatePaymentRequestTravelInformationTransitAirlineLegsInner createPaymentRequestTravelInformationTransitAirlineLegsInner = (CreatePaymentRequestTravelInformationTransitAirlineLegsInner) o;
    return Objects.equals(this.carrierCode, createPaymentRequestTravelInformationTransitAirlineLegsInner.carrierCode) &&
        Objects.equals(this.flightNumber, createPaymentRequestTravelInformationTransitAirlineLegsInner.flightNumber) &&
        Objects.equals(this.originatingAirportCode, createPaymentRequestTravelInformationTransitAirlineLegsInner.originatingAirportCode) &&
        Objects.equals(this.propertyClass, createPaymentRequestTravelInformationTransitAirlineLegsInner.propertyClass) &&
        Objects.equals(this.stopoverIndicator, createPaymentRequestTravelInformationTransitAirlineLegsInner.stopoverIndicator) &&
        Objects.equals(this.departureDate, createPaymentRequestTravelInformationTransitAirlineLegsInner.departureDate) &&
        Objects.equals(this.destinationAirportCode, createPaymentRequestTravelInformationTransitAirlineLegsInner.destinationAirportCode) &&
        Objects.equals(this.fareBasis, createPaymentRequestTravelInformationTransitAirlineLegsInner.fareBasis) &&
        Objects.equals(this.departTaxAmount, createPaymentRequestTravelInformationTransitAirlineLegsInner.departTaxAmount) &&
        Objects.equals(this.conjunctionTicket, createPaymentRequestTravelInformationTransitAirlineLegsInner.conjunctionTicket) &&
        Objects.equals(this.exchangeTicketNumber, createPaymentRequestTravelInformationTransitAirlineLegsInner.exchangeTicketNumber) &&
        Objects.equals(this.couponNumber, createPaymentRequestTravelInformationTransitAirlineLegsInner.couponNumber) &&
        Objects.equals(this.departureTime, createPaymentRequestTravelInformationTransitAirlineLegsInner.departureTime) &&
        Objects.equals(this.departureTimeMeridian, createPaymentRequestTravelInformationTransitAirlineLegsInner.departureTimeMeridian) &&
        Objects.equals(this.arrivalTime, createPaymentRequestTravelInformationTransitAirlineLegsInner.arrivalTime) &&
        Objects.equals(this.arrivalTimeMeridian, createPaymentRequestTravelInformationTransitAirlineLegsInner.arrivalTimeMeridian) &&
        Objects.equals(this.endorsementsRestrictions, createPaymentRequestTravelInformationTransitAirlineLegsInner.endorsementsRestrictions) &&
        Objects.equals(this.totalFareAmount, createPaymentRequestTravelInformationTransitAirlineLegsInner.totalFareAmount) &&
        Objects.equals(this.feeAmount, createPaymentRequestTravelInformationTransitAirlineLegsInner.feeAmount) &&
        Objects.equals(this.taxAmount, createPaymentRequestTravelInformationTransitAirlineLegsInner.taxAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(carrierCode, flightNumber, originatingAirportCode, propertyClass, stopoverIndicator, departureDate, destinationAirportCode, fareBasis, departTaxAmount, conjunctionTicket, exchangeTicketNumber, couponNumber, departureTime, departureTimeMeridian, arrivalTime, arrivalTimeMeridian, endorsementsRestrictions, totalFareAmount, feeAmount, taxAmount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreatePaymentRequestTravelInformationTransitAirlineLegsInner {\n");
    sb.append("    carrierCode: ").append(toIndentedString(carrierCode)).append("\n");
    sb.append("    flightNumber: ").append(toIndentedString(flightNumber)).append("\n");
    sb.append("    originatingAirportCode: ").append(toIndentedString(originatingAirportCode)).append("\n");
    sb.append("    propertyClass: ").append(toIndentedString(propertyClass)).append("\n");
    sb.append("    stopoverIndicator: ").append(toIndentedString(stopoverIndicator)).append("\n");
    sb.append("    departureDate: ").append(toIndentedString(departureDate)).append("\n");
    sb.append("    destinationAirportCode: ").append(toIndentedString(destinationAirportCode)).append("\n");
    sb.append("    fareBasis: ").append(toIndentedString(fareBasis)).append("\n");
    sb.append("    departTaxAmount: ").append(toIndentedString(departTaxAmount)).append("\n");
    sb.append("    conjunctionTicket: ").append(toIndentedString(conjunctionTicket)).append("\n");
    sb.append("    exchangeTicketNumber: ").append(toIndentedString(exchangeTicketNumber)).append("\n");
    sb.append("    couponNumber: ").append(toIndentedString(couponNumber)).append("\n");
    sb.append("    departureTime: ").append(toIndentedString(departureTime)).append("\n");
    sb.append("    departureTimeMeridian: ").append(toIndentedString(departureTimeMeridian)).append("\n");
    sb.append("    arrivalTime: ").append(toIndentedString(arrivalTime)).append("\n");
    sb.append("    arrivalTimeMeridian: ").append(toIndentedString(arrivalTimeMeridian)).append("\n");
    sb.append("    endorsementsRestrictions: ").append(toIndentedString(endorsementsRestrictions)).append("\n");
    sb.append("    totalFareAmount: ").append(toIndentedString(totalFareAmount)).append("\n");
    sb.append("    feeAmount: ").append(toIndentedString(feeAmount)).append("\n");
    sb.append("    taxAmount: ").append(toIndentedString(taxAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

