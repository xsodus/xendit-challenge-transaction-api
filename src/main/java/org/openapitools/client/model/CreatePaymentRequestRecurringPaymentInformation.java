/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * This object contains recurring payment information.
 */
@JsonPropertyOrder({
  CreatePaymentRequestRecurringPaymentInformation.JSON_PROPERTY_END_DATE,
  CreatePaymentRequestRecurringPaymentInformation.JSON_PROPERTY_FREQUENCY,
  CreatePaymentRequestRecurringPaymentInformation.JSON_PROPERTY_NUMBER_OF_PAYMENTS,
  CreatePaymentRequestRecurringPaymentInformation.JSON_PROPERTY_ORIGINAL_PURCHASE_DATE,
  CreatePaymentRequestRecurringPaymentInformation.JSON_PROPERTY_SEQUENCE_NUMBER,
  CreatePaymentRequestRecurringPaymentInformation.JSON_PROPERTY_TYPE,
  CreatePaymentRequestRecurringPaymentInformation.JSON_PROPERTY_OCCURRENCE,
  CreatePaymentRequestRecurringPaymentInformation.JSON_PROPERTY_VALIDATION_INDICATOR,
  CreatePaymentRequestRecurringPaymentInformation.JSON_PROPERTY_AMOUNT_TYPE,
  CreatePaymentRequestRecurringPaymentInformation.JSON_PROPERTY_MAXIMUM_AMOUNT,
  CreatePaymentRequestRecurringPaymentInformation.JSON_PROPERTY_REFERENCE_NUMBER
})
@JsonTypeName("createPayment_request_recurringPaymentInformation")
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T19:17:21.826843+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class CreatePaymentRequestRecurringPaymentInformation {
  public static final String JSON_PROPERTY_END_DATE = "endDate";
  private String endDate;

  public static final String JSON_PROPERTY_FREQUENCY = "frequency";
  private Integer frequency;

  public static final String JSON_PROPERTY_NUMBER_OF_PAYMENTS = "numberOfPayments";
  private Integer numberOfPayments;

  public static final String JSON_PROPERTY_ORIGINAL_PURCHASE_DATE = "originalPurchaseDate";
  private String originalPurchaseDate;

  public static final String JSON_PROPERTY_SEQUENCE_NUMBER = "sequenceNumber";
  private Integer sequenceNumber;

  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  public static final String JSON_PROPERTY_OCCURRENCE = "occurrence";
  private String occurrence;

  public static final String JSON_PROPERTY_VALIDATION_INDICATOR = "validationIndicator";
  private String validationIndicator;

  public static final String JSON_PROPERTY_AMOUNT_TYPE = "amountType";
  private String amountType;

  public static final String JSON_PROPERTY_MAXIMUM_AMOUNT = "maximumAmount";
  private String maximumAmount;

  public static final String JSON_PROPERTY_REFERENCE_NUMBER = "referenceNumber";
  private String referenceNumber;

  public CreatePaymentRequestRecurringPaymentInformation() {
  }

  public CreatePaymentRequestRecurringPaymentInformation endDate(String endDate) {
    
    this.endDate = endDate;
    return this;
  }

  /**
   * The date after which no further recurring authorizations should be performed. Format: &#x60;YYYY-MM-DD&#x60; **Note** This field is required for recurring transactions. 
   * @return endDate
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_END_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getEndDate() {
    return endDate;
  }


  @JsonProperty(JSON_PROPERTY_END_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEndDate(String endDate) {
    this.endDate = endDate;
  }

  public CreatePaymentRequestRecurringPaymentInformation frequency(Integer frequency) {
    
    this.frequency = frequency;
    return this;
  }

  /**
   * Integer value indicating the minimum number of days between recurring authorizations. A frequency of monthly is indicated by the value 28. Multiple of 28 days will be used to indicate months.  Example: 6 months &#x3D; 168  Example values accepted (31 days): - 31 - 031 - 0031  **Note** This field is required for recurring transactions. 
   * @return frequency
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FREQUENCY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getFrequency() {
    return frequency;
  }


  @JsonProperty(JSON_PROPERTY_FREQUENCY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFrequency(Integer frequency) {
    this.frequency = frequency;
  }

  public CreatePaymentRequestRecurringPaymentInformation numberOfPayments(Integer numberOfPayments) {
    
    this.numberOfPayments = numberOfPayments;
    return this;
  }

  /**
   * Total number of payments for the duration of the recurring subscription. 
   * @return numberOfPayments
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NUMBER_OF_PAYMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getNumberOfPayments() {
    return numberOfPayments;
  }


  @JsonProperty(JSON_PROPERTY_NUMBER_OF_PAYMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNumberOfPayments(Integer numberOfPayments) {
    this.numberOfPayments = numberOfPayments;
  }

  public CreatePaymentRequestRecurringPaymentInformation originalPurchaseDate(String originalPurchaseDate) {
    
    this.originalPurchaseDate = originalPurchaseDate;
    return this;
  }

  /**
   * Date of original purchase. Required for recurring transactions. Format: &#x60;YYYY-MM-DDTHH:MM:SSZ&#x60; **Note**: If this field is empty, the current date is used. 
   * @return originalPurchaseDate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ORIGINAL_PURCHASE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOriginalPurchaseDate() {
    return originalPurchaseDate;
  }


  @JsonProperty(JSON_PROPERTY_ORIGINAL_PURCHASE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOriginalPurchaseDate(String originalPurchaseDate) {
    this.originalPurchaseDate = originalPurchaseDate;
  }

  public CreatePaymentRequestRecurringPaymentInformation sequenceNumber(Integer sequenceNumber) {
    
    this.sequenceNumber = sequenceNumber;
    return this;
  }

  /**
   * This field is mandatory for Cartes Bancaires recurring transactions on Credit Mutuel-CIC.       This field records recurring sequence, e.g. 1st for initial,  2 for subsequent, 3 etc 
   * @return sequenceNumber
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SEQUENCE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getSequenceNumber() {
    return sequenceNumber;
  }


  @JsonProperty(JSON_PROPERTY_SEQUENCE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSequenceNumber(Integer sequenceNumber) {
    this.sequenceNumber = sequenceNumber;
  }

  public CreatePaymentRequestRecurringPaymentInformation type(String type) {
    
    this.type = type;
    return this;
  }

  /**
   * This contains the type of recurring payment. Valid Values : 1 - Registration/First transaction 2 - Subsequent transaction 3 - Modification 4 - Cancellation 
   * @return type
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(String type) {
    this.type = type;
  }

  public CreatePaymentRequestRecurringPaymentInformation occurrence(String occurrence) {
    
    this.occurrence = occurrence;
    return this;
  }

  /**
   * This value indicates how often a recurring payment occurs. Valid Values : • 01 (Daily) • 02 (Twice weekly) • 03 (Weekly) • 04 (Ten days) • 05 (Fortnightly) • 06 (Monthly) • 07 (Every two months) • 08 (Trimester) • 09 (Quarterly) • 10 (Twice yearly) • 11 (Annually) • 12 (Unscheduled) 
   * @return occurrence
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OCCURRENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOccurrence() {
    return occurrence;
  }


  @JsonProperty(JSON_PROPERTY_OCCURRENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOccurrence(String occurrence) {
    this.occurrence = occurrence;
  }

  public CreatePaymentRequestRecurringPaymentInformation validationIndicator(String validationIndicator) {
    
    this.validationIndicator = validationIndicator;
    return this;
  }

  /**
   * This tag will contain a value that indicates whether or not the recurring payment transaction has been validated. Valid values : 0- Not validated 1- Validated 
   * @return validationIndicator
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VALIDATION_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getValidationIndicator() {
    return validationIndicator;
  }


  @JsonProperty(JSON_PROPERTY_VALIDATION_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setValidationIndicator(String validationIndicator) {
    this.validationIndicator = validationIndicator;
  }

  public CreatePaymentRequestRecurringPaymentInformation amountType(String amountType) {
    
    this.amountType = amountType;
    return this;
  }

  /**
   * Indicates recurring amount type agreed by the cardholder Valid Values : 1- Fixed amount recurring payment 2- Recurring payment with maximum amount 
   * @return amountType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AMOUNT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAmountType() {
    return amountType;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAmountType(String amountType) {
    this.amountType = amountType;
  }

  public CreatePaymentRequestRecurringPaymentInformation maximumAmount(String maximumAmount) {
    
    this.maximumAmount = maximumAmount;
    return this;
  }

  /**
   * This API field will contain the maximum amount agreed to by the cardholder. The currency of this amount will be specified in Field 49—Currency Code,Transaction. 
   * @return maximumAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAXIMUM_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMaximumAmount() {
    return maximumAmount;
  }


  @JsonProperty(JSON_PROPERTY_MAXIMUM_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaximumAmount(String maximumAmount) {
    this.maximumAmount = maximumAmount;
  }

  public CreatePaymentRequestRecurringPaymentInformation referenceNumber(String referenceNumber) {
    
    this.referenceNumber = referenceNumber;
    return this;
  }

  /**
   * This will contain a unique reference number for the recurring payment transaction. 
   * @return referenceNumber
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REFERENCE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getReferenceNumber() {
    return referenceNumber;
  }


  @JsonProperty(JSON_PROPERTY_REFERENCE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReferenceNumber(String referenceNumber) {
    this.referenceNumber = referenceNumber;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreatePaymentRequestRecurringPaymentInformation createPaymentRequestRecurringPaymentInformation = (CreatePaymentRequestRecurringPaymentInformation) o;
    return Objects.equals(this.endDate, createPaymentRequestRecurringPaymentInformation.endDate) &&
        Objects.equals(this.frequency, createPaymentRequestRecurringPaymentInformation.frequency) &&
        Objects.equals(this.numberOfPayments, createPaymentRequestRecurringPaymentInformation.numberOfPayments) &&
        Objects.equals(this.originalPurchaseDate, createPaymentRequestRecurringPaymentInformation.originalPurchaseDate) &&
        Objects.equals(this.sequenceNumber, createPaymentRequestRecurringPaymentInformation.sequenceNumber) &&
        Objects.equals(this.type, createPaymentRequestRecurringPaymentInformation.type) &&
        Objects.equals(this.occurrence, createPaymentRequestRecurringPaymentInformation.occurrence) &&
        Objects.equals(this.validationIndicator, createPaymentRequestRecurringPaymentInformation.validationIndicator) &&
        Objects.equals(this.amountType, createPaymentRequestRecurringPaymentInformation.amountType) &&
        Objects.equals(this.maximumAmount, createPaymentRequestRecurringPaymentInformation.maximumAmount) &&
        Objects.equals(this.referenceNumber, createPaymentRequestRecurringPaymentInformation.referenceNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endDate, frequency, numberOfPayments, originalPurchaseDate, sequenceNumber, type, occurrence, validationIndicator, amountType, maximumAmount, referenceNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreatePaymentRequestRecurringPaymentInformation {\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    numberOfPayments: ").append(toIndentedString(numberOfPayments)).append("\n");
    sb.append("    originalPurchaseDate: ").append(toIndentedString(originalPurchaseDate)).append("\n");
    sb.append("    sequenceNumber: ").append(toIndentedString(sequenceNumber)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    occurrence: ").append(toIndentedString(occurrence)).append("\n");
    sb.append("    validationIndicator: ").append(toIndentedString(validationIndicator)).append("\n");
    sb.append("    amountType: ").append(toIndentedString(amountType)).append("\n");
    sb.append("    maximumAmount: ").append(toIndentedString(maximumAmount)).append("\n");
    sb.append("    referenceNumber: ").append(toIndentedString(referenceNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

