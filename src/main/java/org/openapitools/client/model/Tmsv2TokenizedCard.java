/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.client.model.Tmsv2TokenizedCardCard;
import org.openapitools.client.model.Tmsv2TokenizedCardMetadata;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Tmsv2TokenizedCard
 */
@JsonPropertyOrder({
  Tmsv2TokenizedCard.JSON_PROPERTY_TYPE,
  Tmsv2TokenizedCard.JSON_PROPERTY_SOURCE,
  Tmsv2TokenizedCard.JSON_PROPERTY_STATE,
  Tmsv2TokenizedCard.JSON_PROPERTY_ENROLLMENT_ID,
  Tmsv2TokenizedCard.JSON_PROPERTY_TOKEN_REFERENCE_ID,
  Tmsv2TokenizedCard.JSON_PROPERTY_REASON,
  Tmsv2TokenizedCard.JSON_PROPERTY_NUMBER,
  Tmsv2TokenizedCard.JSON_PROPERTY_EXPIRATION_MONTH,
  Tmsv2TokenizedCard.JSON_PROPERTY_EXPIRATION_YEAR,
  Tmsv2TokenizedCard.JSON_PROPERTY_CRYPTOGRAM,
  Tmsv2TokenizedCard.JSON_PROPERTY_CARD,
  Tmsv2TokenizedCard.JSON_PROPERTY_METADATA
})
@JsonTypeName("tmsv2TokenizedCard")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T18:32:10.370382+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class Tmsv2TokenizedCard {
  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  public static final String JSON_PROPERTY_SOURCE = "source";
  private String source;

  public static final String JSON_PROPERTY_STATE = "state";
  private String state;

  public static final String JSON_PROPERTY_ENROLLMENT_ID = "enrollmentId";
  private String enrollmentId;

  public static final String JSON_PROPERTY_TOKEN_REFERENCE_ID = "tokenReferenceId";
  private String tokenReferenceId;

  public static final String JSON_PROPERTY_REASON = "reason";
  private String reason;

  public static final String JSON_PROPERTY_NUMBER = "number";
  private String number;

  public static final String JSON_PROPERTY_EXPIRATION_MONTH = "expirationMonth";
  private String expirationMonth;

  public static final String JSON_PROPERTY_EXPIRATION_YEAR = "expirationYear";
  private String expirationYear;

  public static final String JSON_PROPERTY_CRYPTOGRAM = "cryptogram";
  private String cryptogram;

  public static final String JSON_PROPERTY_CARD = "card";
  private Tmsv2TokenizedCardCard card;

  public static final String JSON_PROPERTY_METADATA = "metadata";
  private Tmsv2TokenizedCardMetadata metadata;

  public Tmsv2TokenizedCard() {
  }
  /**
   * Constructor with only readonly parameters
   */
  @JsonCreator
  public Tmsv2TokenizedCard(
    @JsonProperty(JSON_PROPERTY_TYPE) String type, 
    @JsonProperty(JSON_PROPERTY_SOURCE) String source, 
    @JsonProperty(JSON_PROPERTY_STATE) String state, 
    @JsonProperty(JSON_PROPERTY_ENROLLMENT_ID) String enrollmentId, 
    @JsonProperty(JSON_PROPERTY_TOKEN_REFERENCE_ID) String tokenReferenceId, 
    @JsonProperty(JSON_PROPERTY_REASON) String reason, 
    @JsonProperty(JSON_PROPERTY_NUMBER) String number, 
    @JsonProperty(JSON_PROPERTY_EXPIRATION_MONTH) String expirationMonth, 
    @JsonProperty(JSON_PROPERTY_EXPIRATION_YEAR) String expirationYear, 
    @JsonProperty(JSON_PROPERTY_CRYPTOGRAM) String cryptogram
  ) {
    this();
    this.type = type;
    this.source = source;
    this.state = state;
    this.enrollmentId = enrollmentId;
    this.tokenReferenceId = tokenReferenceId;
    this.reason = reason;
    this.number = number;
    this.expirationMonth = expirationMonth;
    this.expirationYear = expirationYear;
    this.cryptogram = cryptogram;
  }

  /**
   * The network token card association brand Possible Values: - visa - mastercard - americanexpress 
   * @return type
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getType() {
    return type;
  }



  /**
   * This enumeration value indicates the origin of the payment instrument (PAN) and the technique employed to supply the payment instrument data. Possible Values: - TOKEN - ISSUER - ONFILE 
   * @return source
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSource() {
    return source;
  }



  /**
   * State of the network token or network token provision Possible Values: - ACTIVE : Network token is active. - SUSPENDED : Network token is suspended. This state can change back to ACTIVE. - DELETED : This is a final state for a network token instance. - UNPROVISIONED : A previous network token provision was unsuccessful. 
   * @return state
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getState() {
    return state;
  }



  /**
   * Unique Identifier for the enrolled PAN. This Id is provided by the card association when a network token is provisioned successfully. 
   * @return enrollmentId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENROLLMENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEnrollmentId() {
    return enrollmentId;
  }



  /**
   * Unique Identifier for the network token. This Id is provided by the card association when a network token is provisioned successfully. 
   * @return tokenReferenceId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOKEN_REFERENCE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTokenReferenceId() {
    return tokenReferenceId;
  }



  /**
   * Issuers state for the network token Possible Values: - INVALID_REQUEST : The network token provision request contained invalid data. - CARD_VERIFICATION_FAILED : The network token provision request contained data that could not be verified. - CARD_NOT_ELIGIBLE : Card can currently not be used with issuer for tokenization. - CARD_NOT_ALLOWED : Card can currently not be used with card association for tokenization. - DECLINED : Card can currently not be used with issuer for tokenization. - SERVICE_UNAVAILABLE : The network token service was unavailable or timed out. - SYSTEM_ERROR : An unexpected error occurred with network token service, check configuration. 
   * @return reason
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REASON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getReason() {
    return reason;
  }



  /**
   * The token requestors network token 
   * @return number
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNumber() {
    return number;
  }



  /**
   * Two-digit month in which the network token expires.  Format: &#x60;MM&#x60;.  Possible Values: &#x60;01&#x60; through &#x60;12&#x60;. 
   * @return expirationMonth
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXPIRATION_MONTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExpirationMonth() {
    return expirationMonth;
  }



  /**
   * Four-digit year in which the network token expires.  Format: &#x60;YYYY&#x60;. 
   * @return expirationYear
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXPIRATION_YEAR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExpirationYear() {
    return expirationYear;
  }



  /**
   * Generated value used in conjunction with the network token for making a payment. 
   * @return cryptogram
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CRYPTOGRAM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCryptogram() {
    return cryptogram;
  }



  public Tmsv2TokenizedCard card(Tmsv2TokenizedCardCard card) {
    
    this.card = card;
    return this;
  }

  /**
   * Get card
   * @return card
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CARD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Tmsv2TokenizedCardCard getCard() {
    return card;
  }


  @JsonProperty(JSON_PROPERTY_CARD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCard(Tmsv2TokenizedCardCard card) {
    this.card = card;
  }

  public Tmsv2TokenizedCard metadata(Tmsv2TokenizedCardMetadata metadata) {
    
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Tmsv2TokenizedCardMetadata getMetadata() {
    return metadata;
  }


  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetadata(Tmsv2TokenizedCardMetadata metadata) {
    this.metadata = metadata;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Tmsv2TokenizedCard tmsv2TokenizedCard = (Tmsv2TokenizedCard) o;
    return Objects.equals(this.type, tmsv2TokenizedCard.type) &&
        Objects.equals(this.source, tmsv2TokenizedCard.source) &&
        Objects.equals(this.state, tmsv2TokenizedCard.state) &&
        Objects.equals(this.enrollmentId, tmsv2TokenizedCard.enrollmentId) &&
        Objects.equals(this.tokenReferenceId, tmsv2TokenizedCard.tokenReferenceId) &&
        Objects.equals(this.reason, tmsv2TokenizedCard.reason) &&
        Objects.equals(this.number, tmsv2TokenizedCard.number) &&
        Objects.equals(this.expirationMonth, tmsv2TokenizedCard.expirationMonth) &&
        Objects.equals(this.expirationYear, tmsv2TokenizedCard.expirationYear) &&
        Objects.equals(this.cryptogram, tmsv2TokenizedCard.cryptogram) &&
        Objects.equals(this.card, tmsv2TokenizedCard.card) &&
        Objects.equals(this.metadata, tmsv2TokenizedCard.metadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, source, state, enrollmentId, tokenReferenceId, reason, number, expirationMonth, expirationYear, cryptogram, card, metadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Tmsv2TokenizedCard {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    enrollmentId: ").append(toIndentedString(enrollmentId)).append("\n");
    sb.append("    tokenReferenceId: ").append(toIndentedString(tokenReferenceId)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    expirationMonth: ").append(toIndentedString(expirationMonth)).append("\n");
    sb.append("    expirationYear: ").append(toIndentedString(expirationYear)).append("\n");
    sb.append("    cryptogram: ").append(toIndentedString(cryptogram)).append("\n");
    sb.append("    card: ").append(toIndentedString(card)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

