/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreatePaymentRequestDeviceInformationRawDataInner;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CreatePaymentRequestDeviceInformation
 */
@JsonPropertyOrder({
  CreatePaymentRequestDeviceInformation.JSON_PROPERTY_ID,
  CreatePaymentRequestDeviceInformation.JSON_PROPERTY_HOST_NAME,
  CreatePaymentRequestDeviceInformation.JSON_PROPERTY_IP_ADDRESS,
  CreatePaymentRequestDeviceInformation.JSON_PROPERTY_USER_AGENT,
  CreatePaymentRequestDeviceInformation.JSON_PROPERTY_FINGERPRINT_SESSION_ID,
  CreatePaymentRequestDeviceInformation.JSON_PROPERTY_USE_RAW_FINGERPRINT_SESSION_ID,
  CreatePaymentRequestDeviceInformation.JSON_PROPERTY_DEVICE_TYPE,
  CreatePaymentRequestDeviceInformation.JSON_PROPERTY_APP_URL,
  CreatePaymentRequestDeviceInformation.JSON_PROPERTY_METADATA,
  CreatePaymentRequestDeviceInformation.JSON_PROPERTY_RAW_DATA,
  CreatePaymentRequestDeviceInformation.JSON_PROPERTY_HTTP_ACCEPT_BROWSER_VALUE,
  CreatePaymentRequestDeviceInformation.JSON_PROPERTY_HTTP_ACCEPT_CONTENT,
  CreatePaymentRequestDeviceInformation.JSON_PROPERTY_HTTP_BROWSER_EMAIL,
  CreatePaymentRequestDeviceInformation.JSON_PROPERTY_HTTP_BROWSER_LANGUAGE,
  CreatePaymentRequestDeviceInformation.JSON_PROPERTY_HTTP_BROWSER_JAVA_ENABLED,
  CreatePaymentRequestDeviceInformation.JSON_PROPERTY_HTTP_BROWSER_JAVA_SCRIPT_ENABLED,
  CreatePaymentRequestDeviceInformation.JSON_PROPERTY_HTTP_BROWSER_COLOR_DEPTH,
  CreatePaymentRequestDeviceInformation.JSON_PROPERTY_HTTP_BROWSER_SCREEN_HEIGHT,
  CreatePaymentRequestDeviceInformation.JSON_PROPERTY_HTTP_BROWSER_SCREEN_WIDTH,
  CreatePaymentRequestDeviceInformation.JSON_PROPERTY_HTTP_BROWSER_TIME_DIFFERENCE,
  CreatePaymentRequestDeviceInformation.JSON_PROPERTY_USER_AGENT_BROWSER_VALUE
})
@JsonTypeName("createPayment_request_deviceInformation")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T18:32:10.370382+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class CreatePaymentRequestDeviceInformation {
  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_HOST_NAME = "hostName";
  private String hostName;

  public static final String JSON_PROPERTY_IP_ADDRESS = "ipAddress";
  private String ipAddress;

  public static final String JSON_PROPERTY_USER_AGENT = "userAgent";
  private String userAgent;

  public static final String JSON_PROPERTY_FINGERPRINT_SESSION_ID = "fingerprintSessionId";
  private String fingerprintSessionId;

  public static final String JSON_PROPERTY_USE_RAW_FINGERPRINT_SESSION_ID = "useRawFingerprintSessionId";
  private Boolean useRawFingerprintSessionId;

  public static final String JSON_PROPERTY_DEVICE_TYPE = "deviceType";
  private String deviceType;

  public static final String JSON_PROPERTY_APP_URL = "appUrl";
  private String appUrl;

  public static final String JSON_PROPERTY_METADATA = "metadata";
  private String metadata;

  public static final String JSON_PROPERTY_RAW_DATA = "rawData";
  private List<CreatePaymentRequestDeviceInformationRawDataInner> rawData = new ArrayList<>();

  public static final String JSON_PROPERTY_HTTP_ACCEPT_BROWSER_VALUE = "httpAcceptBrowserValue";
  private String httpAcceptBrowserValue;

  public static final String JSON_PROPERTY_HTTP_ACCEPT_CONTENT = "httpAcceptContent";
  private String httpAcceptContent;

  public static final String JSON_PROPERTY_HTTP_BROWSER_EMAIL = "httpBrowserEmail";
  private String httpBrowserEmail;

  public static final String JSON_PROPERTY_HTTP_BROWSER_LANGUAGE = "httpBrowserLanguage";
  private String httpBrowserLanguage;

  public static final String JSON_PROPERTY_HTTP_BROWSER_JAVA_ENABLED = "httpBrowserJavaEnabled";
  private Boolean httpBrowserJavaEnabled;

  public static final String JSON_PROPERTY_HTTP_BROWSER_JAVA_SCRIPT_ENABLED = "httpBrowserJavaScriptEnabled";
  private Boolean httpBrowserJavaScriptEnabled;

  public static final String JSON_PROPERTY_HTTP_BROWSER_COLOR_DEPTH = "httpBrowserColorDepth";
  private String httpBrowserColorDepth;

  public static final String JSON_PROPERTY_HTTP_BROWSER_SCREEN_HEIGHT = "httpBrowserScreenHeight";
  private String httpBrowserScreenHeight;

  public static final String JSON_PROPERTY_HTTP_BROWSER_SCREEN_WIDTH = "httpBrowserScreenWidth";
  private String httpBrowserScreenWidth;

  public static final String JSON_PROPERTY_HTTP_BROWSER_TIME_DIFFERENCE = "httpBrowserTimeDifference";
  private String httpBrowserTimeDifference;

  public static final String JSON_PROPERTY_USER_AGENT_BROWSER_VALUE = "userAgentBrowserValue";
  private String userAgentBrowserValue;

  public CreatePaymentRequestDeviceInformation() {
  }

  public CreatePaymentRequestDeviceInformation id(String id) {
    
    this.id = id;
    return this;
  }

  /**
   * Value created by the client software that uniquely identifies the POS device. CyberSource does not forward this value to the processor. Instead, the value is forwarded to the CyberSource reporting functionality.  This field is supported only for authorizations and credits on these processors: - American Express Direct - Credit Mutuel-CIC - FDC Nashville Global - OmniPay Direct - SIX  Optional field. String (32) 
   * @return id
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }

  public CreatePaymentRequestDeviceInformation hostName(String hostName) {
    
    this.hostName = hostName;
    return this;
  }

  /**
   * DNS resolved hostname from &#x60;ipAddress&#x60;.
   * @return hostName
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HOST_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHostName() {
    return hostName;
  }


  @JsonProperty(JSON_PROPERTY_HOST_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHostName(String hostName) {
    this.hostName = hostName;
  }

  public CreatePaymentRequestDeviceInformation ipAddress(String ipAddress) {
    
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * IP address of the customer.  #### Used by **Authorization, Capture, and Credit** Optional field. 
   * @return ipAddress
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IP_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIpAddress() {
    return ipAddress;
  }


  @JsonProperty(JSON_PROPERTY_IP_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }

  public CreatePaymentRequestDeviceInformation userAgent(String userAgent) {
    
    this.userAgent = userAgent;
    return this;
  }

  /**
   * Customer&#39;s browser as identified from the HTTP header data. For example, &#x60;Mozilla&#x60; is the value that identifies the Netscape browser. 
   * @return userAgent
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER_AGENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUserAgent() {
    return userAgent;
  }


  @JsonProperty(JSON_PROPERTY_USER_AGENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserAgent(String userAgent) {
    this.userAgent = userAgent;
  }

  public CreatePaymentRequestDeviceInformation fingerprintSessionId(String fingerprintSessionId) {
    
    this.fingerprintSessionId = fingerprintSessionId;
    return this;
  }

  /**
   * Field that contains the session ID that you send to Decision Manager to obtain the device fingerprint information. The string can contain uppercase and lowercase letters, digits, hyphen (-), and underscore (_). However, do not use the same uppercase and lowercase letters to indicate different session IDs.  The session ID must be unique for each merchant ID. You can use any string that you are already generating, such as an order number or web session ID.  The session ID must be unique for each page load, regardless of an individual&#39;s web session ID. If a user navigates to a profiled page and is assigned a web session, navigates away from the profiled page, then navigates back to the profiled page, the generated session ID should be different and unique. You may use a web session ID, but it is preferable to use an application GUID (Globally Unique Identifier). This measure ensures that a unique ID is generated every time the page is loaded, even if it is the same user reloading the page. 
   * @return fingerprintSessionId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FINGERPRINT_SESSION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFingerprintSessionId() {
    return fingerprintSessionId;
  }


  @JsonProperty(JSON_PROPERTY_FINGERPRINT_SESSION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFingerprintSessionId(String fingerprintSessionId) {
    this.fingerprintSessionId = fingerprintSessionId;
  }

  public CreatePaymentRequestDeviceInformation useRawFingerprintSessionId(Boolean useRawFingerprintSessionId) {
    
    this.useRawFingerprintSessionId = useRawFingerprintSessionId;
    return this;
  }

  /**
   * Boolean that indicates whether request contains the device fingerprint information. Values: - &#x60;true&#x60;: Use raw fingerprintSessionId when looking up device details. - &#x60;false&#x60; (default): Use merchant id + fingerprintSessionId as the session id for Device detail collection. 
   * @return useRawFingerprintSessionId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USE_RAW_FINGERPRINT_SESSION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getUseRawFingerprintSessionId() {
    return useRawFingerprintSessionId;
  }


  @JsonProperty(JSON_PROPERTY_USE_RAW_FINGERPRINT_SESSION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUseRawFingerprintSessionId(Boolean useRawFingerprintSessionId) {
    this.useRawFingerprintSessionId = useRawFingerprintSessionId;
  }

  public CreatePaymentRequestDeviceInformation deviceType(String deviceType) {
    
    this.deviceType = deviceType;
    return this;
  }

  /**
   * The device type at the client side.
   * @return deviceType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEVICE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDeviceType() {
    return deviceType;
  }


  @JsonProperty(JSON_PROPERTY_DEVICE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeviceType(String deviceType) {
    this.deviceType = deviceType;
  }

  public CreatePaymentRequestDeviceInformation appUrl(String appUrl) {
    
    this.appUrl = appUrl;
    return this;
  }

  /**
   * This field will contain the deep link that would help the Customer App to wake up. 
   * @return appUrl
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_APP_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAppUrl() {
    return appUrl;
  }


  @JsonProperty(JSON_PROPERTY_APP_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAppUrl(String appUrl) {
    this.appUrl = appUrl;
  }

  public CreatePaymentRequestDeviceInformation metadata(String metadata) {
    
    this.metadata = metadata;
    return this;
  }

  /**
   * Verifies that the payment is originating from a valid, user-approved application and device. Sending this field helps reduce fraud and declined transactions. Note The length is set for a hexadecimal representation of the GUID/UUID. This field accepts a 36-character string (with hyphens) or a 32-character string (without hyphens). Example 123e4567-e89b-12d3-a456-426655440000 Example 123e4567e89b12d3a456426655440000 
   * @return metadata
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMetadata() {
    return metadata;
  }


  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetadata(String metadata) {
    this.metadata = metadata;
  }

  public CreatePaymentRequestDeviceInformation rawData(List<CreatePaymentRequestDeviceInformationRawDataInner> rawData) {
    
    this.rawData = rawData;
    return this;
  }

  public CreatePaymentRequestDeviceInformation addRawDataItem(CreatePaymentRequestDeviceInformationRawDataInner rawDataItem) {
    if (this.rawData == null) {
      this.rawData = new ArrayList<>();
    }
    this.rawData.add(rawDataItem);
    return this;
  }

  /**
   * Get rawData
   * @return rawData
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RAW_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<CreatePaymentRequestDeviceInformationRawDataInner> getRawData() {
    return rawData;
  }


  @JsonProperty(JSON_PROPERTY_RAW_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRawData(List<CreatePaymentRequestDeviceInformationRawDataInner> rawData) {
    this.rawData = rawData;
  }

  public CreatePaymentRequestDeviceInformation httpAcceptBrowserValue(String httpAcceptBrowserValue) {
    
    this.httpAcceptBrowserValue = httpAcceptBrowserValue;
    return this;
  }

  /**
   * Value of the Accept header sent by the customer&#39;s web browser. **Note** If the customer&#39;s browser provides a value, you must include it in your request. 
   * @return httpAcceptBrowserValue
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HTTP_ACCEPT_BROWSER_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHttpAcceptBrowserValue() {
    return httpAcceptBrowserValue;
  }


  @JsonProperty(JSON_PROPERTY_HTTP_ACCEPT_BROWSER_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHttpAcceptBrowserValue(String httpAcceptBrowserValue) {
    this.httpAcceptBrowserValue = httpAcceptBrowserValue;
  }

  public CreatePaymentRequestDeviceInformation httpAcceptContent(String httpAcceptContent) {
    
    this.httpAcceptContent = httpAcceptContent;
    return this;
  }

  /**
   * The exact content of the HTTP accept header. 
   * @return httpAcceptContent
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HTTP_ACCEPT_CONTENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHttpAcceptContent() {
    return httpAcceptContent;
  }


  @JsonProperty(JSON_PROPERTY_HTTP_ACCEPT_CONTENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHttpAcceptContent(String httpAcceptContent) {
    this.httpAcceptContent = httpAcceptContent;
  }

  public CreatePaymentRequestDeviceInformation httpBrowserEmail(String httpBrowserEmail) {
    
    this.httpBrowserEmail = httpBrowserEmail;
    return this;
  }

  /**
   * Email address set in the customer&#39;s browser, which may differ from customer email. 
   * @return httpBrowserEmail
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HTTP_BROWSER_EMAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHttpBrowserEmail() {
    return httpBrowserEmail;
  }


  @JsonProperty(JSON_PROPERTY_HTTP_BROWSER_EMAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHttpBrowserEmail(String httpBrowserEmail) {
    this.httpBrowserEmail = httpBrowserEmail;
  }

  public CreatePaymentRequestDeviceInformation httpBrowserLanguage(String httpBrowserLanguage) {
    
    this.httpBrowserLanguage = httpBrowserLanguage;
    return this;
  }

  /**
   * Value represents the browser language as defined in IETF BCP47. Example:en-US, refer  https://en.wikipedia.org/wiki/IETF_language_tag for more details. 
   * @return httpBrowserLanguage
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HTTP_BROWSER_LANGUAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHttpBrowserLanguage() {
    return httpBrowserLanguage;
  }


  @JsonProperty(JSON_PROPERTY_HTTP_BROWSER_LANGUAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHttpBrowserLanguage(String httpBrowserLanguage) {
    this.httpBrowserLanguage = httpBrowserLanguage;
  }

  public CreatePaymentRequestDeviceInformation httpBrowserJavaEnabled(Boolean httpBrowserJavaEnabled) {
    
    this.httpBrowserJavaEnabled = httpBrowserJavaEnabled;
    return this;
  }

  /**
   * A Boolean value that represents the ability of the cardholder browser to execute Java. Value is returned from the navigator.javaEnabled property. Possible Values:True/False 
   * @return httpBrowserJavaEnabled
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HTTP_BROWSER_JAVA_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getHttpBrowserJavaEnabled() {
    return httpBrowserJavaEnabled;
  }


  @JsonProperty(JSON_PROPERTY_HTTP_BROWSER_JAVA_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHttpBrowserJavaEnabled(Boolean httpBrowserJavaEnabled) {
    this.httpBrowserJavaEnabled = httpBrowserJavaEnabled;
  }

  public CreatePaymentRequestDeviceInformation httpBrowserJavaScriptEnabled(Boolean httpBrowserJavaScriptEnabled) {
    
    this.httpBrowserJavaScriptEnabled = httpBrowserJavaScriptEnabled;
    return this;
  }

  /**
   * A Boolean value that represents the ability of the cardholder browser to execute JavaScript. Possible Values:True/False. **Note**: Merchants should be able to know the values from fingerprint details of cardholder&#39;s browser. 
   * @return httpBrowserJavaScriptEnabled
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HTTP_BROWSER_JAVA_SCRIPT_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getHttpBrowserJavaScriptEnabled() {
    return httpBrowserJavaScriptEnabled;
  }


  @JsonProperty(JSON_PROPERTY_HTTP_BROWSER_JAVA_SCRIPT_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHttpBrowserJavaScriptEnabled(Boolean httpBrowserJavaScriptEnabled) {
    this.httpBrowserJavaScriptEnabled = httpBrowserJavaScriptEnabled;
  }

  public CreatePaymentRequestDeviceInformation httpBrowserColorDepth(String httpBrowserColorDepth) {
    
    this.httpBrowserColorDepth = httpBrowserColorDepth;
    return this;
  }

  /**
   * Value represents the bit depth of the color palette for displaying images, in bits per pixel. Example : 24, refer https://en.wikipedia.org/wiki/Color_depth for more details 
   * @return httpBrowserColorDepth
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HTTP_BROWSER_COLOR_DEPTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHttpBrowserColorDepth() {
    return httpBrowserColorDepth;
  }


  @JsonProperty(JSON_PROPERTY_HTTP_BROWSER_COLOR_DEPTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHttpBrowserColorDepth(String httpBrowserColorDepth) {
    this.httpBrowserColorDepth = httpBrowserColorDepth;
  }

  public CreatePaymentRequestDeviceInformation httpBrowserScreenHeight(String httpBrowserScreenHeight) {
    
    this.httpBrowserScreenHeight = httpBrowserScreenHeight;
    return this;
  }

  /**
   * Total height of the Cardholder&#39;s scree in pixels, example: 864. 
   * @return httpBrowserScreenHeight
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HTTP_BROWSER_SCREEN_HEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHttpBrowserScreenHeight() {
    return httpBrowserScreenHeight;
  }


  @JsonProperty(JSON_PROPERTY_HTTP_BROWSER_SCREEN_HEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHttpBrowserScreenHeight(String httpBrowserScreenHeight) {
    this.httpBrowserScreenHeight = httpBrowserScreenHeight;
  }

  public CreatePaymentRequestDeviceInformation httpBrowserScreenWidth(String httpBrowserScreenWidth) {
    
    this.httpBrowserScreenWidth = httpBrowserScreenWidth;
    return this;
  }

  /**
   * Total width of the cardholder&#39;s screen in pixels. Example: 1536. 
   * @return httpBrowserScreenWidth
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HTTP_BROWSER_SCREEN_WIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHttpBrowserScreenWidth() {
    return httpBrowserScreenWidth;
  }


  @JsonProperty(JSON_PROPERTY_HTTP_BROWSER_SCREEN_WIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHttpBrowserScreenWidth(String httpBrowserScreenWidth) {
    this.httpBrowserScreenWidth = httpBrowserScreenWidth;
  }

  public CreatePaymentRequestDeviceInformation httpBrowserTimeDifference(String httpBrowserTimeDifference) {
    
    this.httpBrowserTimeDifference = httpBrowserTimeDifference;
    return this;
  }

  /**
   * Time difference between UTC time and the cardholder browser local time, in minutes, Example:300 
   * @return httpBrowserTimeDifference
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HTTP_BROWSER_TIME_DIFFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHttpBrowserTimeDifference() {
    return httpBrowserTimeDifference;
  }


  @JsonProperty(JSON_PROPERTY_HTTP_BROWSER_TIME_DIFFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHttpBrowserTimeDifference(String httpBrowserTimeDifference) {
    this.httpBrowserTimeDifference = httpBrowserTimeDifference;
  }

  public CreatePaymentRequestDeviceInformation userAgentBrowserValue(String userAgentBrowserValue) {
    
    this.userAgentBrowserValue = userAgentBrowserValue;
    return this;
  }

  /**
   * Value of the User-Agent header sent by the customer&#39;s web browser. Note If the customer&#39;s browser provides a value, you must include it in your request. 
   * @return userAgentBrowserValue
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER_AGENT_BROWSER_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUserAgentBrowserValue() {
    return userAgentBrowserValue;
  }


  @JsonProperty(JSON_PROPERTY_USER_AGENT_BROWSER_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserAgentBrowserValue(String userAgentBrowserValue) {
    this.userAgentBrowserValue = userAgentBrowserValue;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreatePaymentRequestDeviceInformation createPaymentRequestDeviceInformation = (CreatePaymentRequestDeviceInformation) o;
    return Objects.equals(this.id, createPaymentRequestDeviceInformation.id) &&
        Objects.equals(this.hostName, createPaymentRequestDeviceInformation.hostName) &&
        Objects.equals(this.ipAddress, createPaymentRequestDeviceInformation.ipAddress) &&
        Objects.equals(this.userAgent, createPaymentRequestDeviceInformation.userAgent) &&
        Objects.equals(this.fingerprintSessionId, createPaymentRequestDeviceInformation.fingerprintSessionId) &&
        Objects.equals(this.useRawFingerprintSessionId, createPaymentRequestDeviceInformation.useRawFingerprintSessionId) &&
        Objects.equals(this.deviceType, createPaymentRequestDeviceInformation.deviceType) &&
        Objects.equals(this.appUrl, createPaymentRequestDeviceInformation.appUrl) &&
        Objects.equals(this.metadata, createPaymentRequestDeviceInformation.metadata) &&
        Objects.equals(this.rawData, createPaymentRequestDeviceInformation.rawData) &&
        Objects.equals(this.httpAcceptBrowserValue, createPaymentRequestDeviceInformation.httpAcceptBrowserValue) &&
        Objects.equals(this.httpAcceptContent, createPaymentRequestDeviceInformation.httpAcceptContent) &&
        Objects.equals(this.httpBrowserEmail, createPaymentRequestDeviceInformation.httpBrowserEmail) &&
        Objects.equals(this.httpBrowserLanguage, createPaymentRequestDeviceInformation.httpBrowserLanguage) &&
        Objects.equals(this.httpBrowserJavaEnabled, createPaymentRequestDeviceInformation.httpBrowserJavaEnabled) &&
        Objects.equals(this.httpBrowserJavaScriptEnabled, createPaymentRequestDeviceInformation.httpBrowserJavaScriptEnabled) &&
        Objects.equals(this.httpBrowserColorDepth, createPaymentRequestDeviceInformation.httpBrowserColorDepth) &&
        Objects.equals(this.httpBrowserScreenHeight, createPaymentRequestDeviceInformation.httpBrowserScreenHeight) &&
        Objects.equals(this.httpBrowserScreenWidth, createPaymentRequestDeviceInformation.httpBrowserScreenWidth) &&
        Objects.equals(this.httpBrowserTimeDifference, createPaymentRequestDeviceInformation.httpBrowserTimeDifference) &&
        Objects.equals(this.userAgentBrowserValue, createPaymentRequestDeviceInformation.userAgentBrowserValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, hostName, ipAddress, userAgent, fingerprintSessionId, useRawFingerprintSessionId, deviceType, appUrl, metadata, rawData, httpAcceptBrowserValue, httpAcceptContent, httpBrowserEmail, httpBrowserLanguage, httpBrowserJavaEnabled, httpBrowserJavaScriptEnabled, httpBrowserColorDepth, httpBrowserScreenHeight, httpBrowserScreenWidth, httpBrowserTimeDifference, userAgentBrowserValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreatePaymentRequestDeviceInformation {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    hostName: ").append(toIndentedString(hostName)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    userAgent: ").append(toIndentedString(userAgent)).append("\n");
    sb.append("    fingerprintSessionId: ").append(toIndentedString(fingerprintSessionId)).append("\n");
    sb.append("    useRawFingerprintSessionId: ").append(toIndentedString(useRawFingerprintSessionId)).append("\n");
    sb.append("    deviceType: ").append(toIndentedString(deviceType)).append("\n");
    sb.append("    appUrl: ").append(toIndentedString(appUrl)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    rawData: ").append(toIndentedString(rawData)).append("\n");
    sb.append("    httpAcceptBrowserValue: ").append(toIndentedString(httpAcceptBrowserValue)).append("\n");
    sb.append("    httpAcceptContent: ").append(toIndentedString(httpAcceptContent)).append("\n");
    sb.append("    httpBrowserEmail: ").append(toIndentedString(httpBrowserEmail)).append("\n");
    sb.append("    httpBrowserLanguage: ").append(toIndentedString(httpBrowserLanguage)).append("\n");
    sb.append("    httpBrowserJavaEnabled: ").append(toIndentedString(httpBrowserJavaEnabled)).append("\n");
    sb.append("    httpBrowserJavaScriptEnabled: ").append(toIndentedString(httpBrowserJavaScriptEnabled)).append("\n");
    sb.append("    httpBrowserColorDepth: ").append(toIndentedString(httpBrowserColorDepth)).append("\n");
    sb.append("    httpBrowserScreenHeight: ").append(toIndentedString(httpBrowserScreenHeight)).append("\n");
    sb.append("    httpBrowserScreenWidth: ").append(toIndentedString(httpBrowserScreenWidth)).append("\n");
    sb.append("    httpBrowserTimeDifference: ").append(toIndentedString(httpBrowserTimeDifference)).append("\n");
    sb.append("    userAgentBrowserValue: ").append(toIndentedString(userAgentBrowserValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

