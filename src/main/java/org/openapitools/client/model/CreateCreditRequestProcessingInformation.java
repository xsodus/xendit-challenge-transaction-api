/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.client.model.CreateCreditRequestProcessingInformationBankTransferOptions;
import org.openapitools.client.model.CreateCreditRequestProcessingInformationElectronicBenefitsTransfer;
import org.openapitools.client.model.CreateCreditRequestProcessingInformationJapanPaymentOptions;
import org.openapitools.client.model.CreateCreditRequestProcessingInformationPurchaseOptions;
import org.openapitools.client.model.CreateCreditRequestProcessingInformationRefundOptions;
import org.openapitools.client.model.CreatePaymentRequestProcessingInformationLoanOptions;
import org.openapitools.client.model.RefundPaymentRequestProcessingInformationRecurringOptions;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CreateCreditRequestProcessingInformation
 */
@JsonPropertyOrder({
  CreateCreditRequestProcessingInformation.JSON_PROPERTY_COMMERCE_INDICATOR,
  CreateCreditRequestProcessingInformation.JSON_PROPERTY_PROCESSOR_ID,
  CreateCreditRequestProcessingInformation.JSON_PROPERTY_PAYMENT_SOLUTION,
  CreateCreditRequestProcessingInformation.JSON_PROPERTY_RECONCILIATION_ID,
  CreateCreditRequestProcessingInformation.JSON_PROPERTY_LINK_ID,
  CreateCreditRequestProcessingInformation.JSON_PROPERTY_REPORT_GROUP,
  CreateCreditRequestProcessingInformation.JSON_PROPERTY_VISA_CHECKOUT_ID,
  CreateCreditRequestProcessingInformation.JSON_PROPERTY_PURCHASE_LEVEL,
  CreateCreditRequestProcessingInformation.JSON_PROPERTY_INDUSTRY_DATA_TYPE,
  CreateCreditRequestProcessingInformation.JSON_PROPERTY_WALLET_TYPE,
  CreateCreditRequestProcessingInformation.JSON_PROPERTY_NATIONAL_NET_DOMESTIC_DATA,
  CreateCreditRequestProcessingInformation.JSON_PROPERTY_NETWORK_ROUTING_ORDER,
  CreateCreditRequestProcessingInformation.JSON_PROPERTY_RECURRING_OPTIONS,
  CreateCreditRequestProcessingInformation.JSON_PROPERTY_BANK_TRANSFER_OPTIONS,
  CreateCreditRequestProcessingInformation.JSON_PROPERTY_PURCHASE_OPTIONS,
  CreateCreditRequestProcessingInformation.JSON_PROPERTY_ELECTRONIC_BENEFITS_TRANSFER,
  CreateCreditRequestProcessingInformation.JSON_PROPERTY_LOAN_OPTIONS,
  CreateCreditRequestProcessingInformation.JSON_PROPERTY_JAPAN_PAYMENT_OPTIONS,
  CreateCreditRequestProcessingInformation.JSON_PROPERTY_REFUND_OPTIONS
})
@JsonTypeName("createCredit_request_processingInformation")
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T19:17:21.826843+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class CreateCreditRequestProcessingInformation {
  public static final String JSON_PROPERTY_COMMERCE_INDICATOR = "commerceIndicator";
  private String commerceIndicator;

  public static final String JSON_PROPERTY_PROCESSOR_ID = "processorId";
  private String processorId;

  public static final String JSON_PROPERTY_PAYMENT_SOLUTION = "paymentSolution";
  private String paymentSolution;

  public static final String JSON_PROPERTY_RECONCILIATION_ID = "reconciliationId";
  private String reconciliationId;

  public static final String JSON_PROPERTY_LINK_ID = "linkId";
  private String linkId;

  public static final String JSON_PROPERTY_REPORT_GROUP = "reportGroup";
  private String reportGroup;

  public static final String JSON_PROPERTY_VISA_CHECKOUT_ID = "visaCheckoutId";
  private String visaCheckoutId;

  public static final String JSON_PROPERTY_PURCHASE_LEVEL = "purchaseLevel";
  private String purchaseLevel;

  public static final String JSON_PROPERTY_INDUSTRY_DATA_TYPE = "industryDataType";
  private String industryDataType;

  public static final String JSON_PROPERTY_WALLET_TYPE = "walletType";
  private String walletType;

  public static final String JSON_PROPERTY_NATIONAL_NET_DOMESTIC_DATA = "nationalNetDomesticData";
  private String nationalNetDomesticData;

  public static final String JSON_PROPERTY_NETWORK_ROUTING_ORDER = "networkRoutingOrder";
  private String networkRoutingOrder;

  public static final String JSON_PROPERTY_RECURRING_OPTIONS = "recurringOptions";
  private RefundPaymentRequestProcessingInformationRecurringOptions recurringOptions;

  public static final String JSON_PROPERTY_BANK_TRANSFER_OPTIONS = "bankTransferOptions";
  private CreateCreditRequestProcessingInformationBankTransferOptions bankTransferOptions;

  public static final String JSON_PROPERTY_PURCHASE_OPTIONS = "purchaseOptions";
  private CreateCreditRequestProcessingInformationPurchaseOptions purchaseOptions;

  public static final String JSON_PROPERTY_ELECTRONIC_BENEFITS_TRANSFER = "electronicBenefitsTransfer";
  private CreateCreditRequestProcessingInformationElectronicBenefitsTransfer electronicBenefitsTransfer;

  public static final String JSON_PROPERTY_LOAN_OPTIONS = "loanOptions";
  private CreatePaymentRequestProcessingInformationLoanOptions loanOptions;

  public static final String JSON_PROPERTY_JAPAN_PAYMENT_OPTIONS = "japanPaymentOptions";
  private CreateCreditRequestProcessingInformationJapanPaymentOptions japanPaymentOptions;

  public static final String JSON_PROPERTY_REFUND_OPTIONS = "refundOptions";
  private CreateCreditRequestProcessingInformationRefundOptions refundOptions;

  public CreateCreditRequestProcessingInformation() {
  }

  public CreateCreditRequestProcessingInformation commerceIndicator(String commerceIndicator) {
    
    this.commerceIndicator = commerceIndicator;
    return this;
  }

  /**
   * Type of transaction. Some payment card companies use this information when determining discount rates.  #### Used by **Authorization** Required payer authentication transactions; otherwise, optional. **Credit** Required for standalone credits on Chase Paymentech solutions; otherwise, optional.  The list of valid values in this field depends on your processor.  #### Ingenico ePayments When you omit this field for Ingenico ePayments, the processor uses the default transaction type they have on file for you instead of the default value   #### Card Present You must set this field to &#x60;retail&#x60;. This field is required for a card-present transaction. Note that this should ONLY be used when the cardholder and card are present at the time of the transaction. For all keyed transactions originated from a POS terminal where the cardholder and card are not present, commerceIndicator should be submitted as \&quot;moto\&quot; 
   * @return commerceIndicator
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMMERCE_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCommerceIndicator() {
    return commerceIndicator;
  }


  @JsonProperty(JSON_PROPERTY_COMMERCE_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCommerceIndicator(String commerceIndicator) {
    this.commerceIndicator = commerceIndicator;
  }

  public CreateCreditRequestProcessingInformation processorId(String processorId) {
    
    this.processorId = processorId;
    return this;
  }

  /**
   * Value that identifies the processor/acquirer to use for the transaction. This value is supported only for **CyberSource through VisaNet**.  Contact CyberSource Customer Support to get the value for this field. 
   * @return processorId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROCESSOR_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProcessorId() {
    return processorId;
  }


  @JsonProperty(JSON_PROPERTY_PROCESSOR_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProcessorId(String processorId) {
    this.processorId = processorId;
  }

  public CreateCreditRequestProcessingInformation paymentSolution(String paymentSolution) {
    
    this.paymentSolution = paymentSolution;
    return this;
  }

  /**
   * Type of digital payment solution for the transaction. Possible Values:   - &#x60;visacheckout&#x60;: Visa Checkout. This value is required for Visa Checkout transactions. For details, see &#x60;payment_solution&#x60; field description in [Visa Checkout Using the REST API.](https://developer.cybersource.com/content/dam/docs/cybs/en-us/apifields/reference/all/rest/api-fields.pdf)  - &#x60;001&#x60;: Apple Pay.  - &#x60;004&#x60;: Cybersource In-App Solution.  - &#x60;005&#x60;: Masterpass. This value is required for Masterpass transactions on OmniPay Direct.   - &#x60;006&#x60;: Android Pay.  - &#x60;007&#x60;: Chase Pay.  - &#x60;008&#x60;: Samsung Pay.  - &#x60;012&#x60;: Google Pay.  - &#x60;013&#x60;: Cybersource P2PE Decryption  - &#x60;014&#x60;: Mastercard credential on file (COF) payment network token. Returned in authorizations that use a payment network token associated with a TMS token.  - &#x60;015&#x60;: Visa credential on file (COF) payment network token. Returned in authorizations that use a payment network token associated with a TMS token.  - &#x60;027&#x60;: Click to Pay. 
   * @return paymentSolution
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAYMENT_SOLUTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPaymentSolution() {
    return paymentSolution;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_SOLUTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentSolution(String paymentSolution) {
    this.paymentSolution = paymentSolution;
  }

  public CreateCreditRequestProcessingInformation reconciliationId(String reconciliationId) {
    
    this.reconciliationId = reconciliationId;
    return this;
  }

  /**
   * Please check with Cybersource customer support to see if your merchant account is configured correctly so you can include this field in your request. * For Payouts: max length for FDCCompass is String (22). 
   * @return reconciliationId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RECONCILIATION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getReconciliationId() {
    return reconciliationId;
  }


  @JsonProperty(JSON_PROPERTY_RECONCILIATION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReconciliationId(String reconciliationId) {
    this.reconciliationId = reconciliationId;
  }

  public CreateCreditRequestProcessingInformation linkId(String linkId) {
    
    this.linkId = linkId;
    return this;
  }

  /**
   * Value that links the current authorization request to the original authorization request. Set this value to the ID that was returned in the reply message from the original authorization request.  This value is used for:  - Partial authorizations - Split shipments 
   * @return linkId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LINK_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLinkId() {
    return linkId;
  }


  @JsonProperty(JSON_PROPERTY_LINK_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLinkId(String linkId) {
    this.linkId = linkId;
  }

  public CreateCreditRequestProcessingInformation reportGroup(String reportGroup) {
    
    this.reportGroup = reportGroup;
    return this;
  }

  /**
   * Attribute that lets you define custom grouping for your processor reports. This field is supported only for **Worldpay VAP**. 
   * @return reportGroup
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REPORT_GROUP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getReportGroup() {
    return reportGroup;
  }


  @JsonProperty(JSON_PROPERTY_REPORT_GROUP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReportGroup(String reportGroup) {
    this.reportGroup = reportGroup;
  }

  public CreateCreditRequestProcessingInformation visaCheckoutId(String visaCheckoutId) {
    
    this.visaCheckoutId = visaCheckoutId;
    return this;
  }

  /**
   * Identifier for the **Visa Checkout** order. Visa Checkout provides a unique order ID for every transaction in the Visa Checkout **callID** field. 
   * @return visaCheckoutId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VISA_CHECKOUT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getVisaCheckoutId() {
    return visaCheckoutId;
  }


  @JsonProperty(JSON_PROPERTY_VISA_CHECKOUT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVisaCheckoutId(String visaCheckoutId) {
    this.visaCheckoutId = visaCheckoutId;
  }

  public CreateCreditRequestProcessingInformation purchaseLevel(String purchaseLevel) {
    
    this.purchaseLevel = purchaseLevel;
    return this;
  }

  /**
   * Set this field to 3 to indicate that the request includes Level III data.
   * @return purchaseLevel
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PURCHASE_LEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPurchaseLevel() {
    return purchaseLevel;
  }


  @JsonProperty(JSON_PROPERTY_PURCHASE_LEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPurchaseLevel(String purchaseLevel) {
    this.purchaseLevel = purchaseLevel;
  }

  public CreateCreditRequestProcessingInformation industryDataType(String industryDataType) {
    
    this.industryDataType = industryDataType;
    return this;
  }

  /**
   * Indicates that the transaction includes industry-specific data.  Possible Values: - &#x60;airline&#x60; - &#x60;restaurant&#x60; - &#x60;lodging&#x60; - &#x60;auto_rental&#x60; - &#x60;transit&#x60; - &#x60;healthcare_medical&#x60; - &#x60;healthcare_transit&#x60; - &#x60;transit&#x60;  #### Card Present, Airlines and Auto Rental You must set this field to &#x60;airline&#x60; in order for airline data to be sent to the processor. For example, if this field is not set to &#x60;airline&#x60; or is not included in the request, no airline data is sent to the processor.  You must set this field to &#x60;restaurant&#x60; in order for restaurant data to be sent to the processor. When this field is not set to &#x60;restaurant&#x60; or is not included in the request, no restaurant data is sent to the processor.  You must set this field to &#x60;auto_rental&#x60; in order for auto rental data to be sent to the processor. For example, if this field is not set to &#x60;auto_rental&#x60; or is not included in the request, no auto rental data is sent to the processor.  Restaurant data is supported only on CyberSource through VisaNet. 
   * @return industryDataType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INDUSTRY_DATA_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIndustryDataType() {
    return industryDataType;
  }


  @JsonProperty(JSON_PROPERTY_INDUSTRY_DATA_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIndustryDataType(String industryDataType) {
    this.industryDataType = industryDataType;
  }

  public CreateCreditRequestProcessingInformation walletType(String walletType) {
    
    this.walletType = walletType;
    return this;
  }

  /**
   * This field carries the wallet type in authorization requests and credit requests. Possible value are: - &#x60;101&#x60;: Masterpass remote payment. The customer created the wallet by manually interacting with a customer-controlled device such as a computer, tablet, or phone. This value is supported only for Masterpass transactions on Chase Paymentech Solutions and CyberSource through VisaNet. - &#x60;102&#x60;: Masterpass remote near field communication (NFC) payment. The customer created the wallet by tapping a PayPass card or customer-controlled device at a contactless card reader. This value is supported only for card-present Masterpass transactions on CyberSource through VisaNet. - &#x60;103&#x60;: Masterpass Apple Pay payment. The payment was made with a combination of Masterpass and Apple Pay. This value is supported only for Masterpass Apple Pay transactions on CyberSource through VisaNet. - &#x60;216&#x60;: Masterpass Google Pay payment. The payment was made with a combination of Masterpass and Google Pay. This value is supported only for Masterpass Google Pay transactions on CyberSource through VisaNet. - &#x60;217&#x60;: Masterpass Samsung Pay payment. The payment was made with a combination of Masterpass and Samsung Pay. This value is supported only for Masterpass Samsung Pay transactions on CyberSource through VisaNet. - &#x60;SDW&#x60;: Staged digital wallet. An issuer or operator created the wallet. This value is supported only for Masterpass transactions on Chase Paymentech Solutions. - &#x60;VCIND&#x60;: Visa Checkout payment. This value is supported only on CyberSource through VisaNet, FDC Compass, FDC Nashville Global, FDI Australia, and TSYS Acquiring Solutions. See Getting Started with Visa Checkout. For Visa Checkout transactions, the way CyberSource processes the value for this field depends on the processor. See the Visa Checkout section below. For all other values, this field is a passthrough; therefore, CyberSource does not verify the value or modify it in any way before sending it to the processor. Masterpass (101, 102, 103, 216, and 217): The Masterpass platform generates the wallet type value and passes it to you along with the customer&#39;s checkout information.  Visa Checkout: This field is optional for Visa Checkout authorizations on FDI Australia. For all other processors, this field is required for Visa Checkout authorizations. For Visa Checkout transactions on the following processors, CyberSource sends the value that the processor expects for this field:FDC Compass,FDC Nashville Global,FDI Australia,TSYS Acquiring Solutions For all other processors, this field is a passthrough; therefore, CyberSource does not verify the value or modify it in any way before sending it to the processor. For incremental authorizations, this field is supported only for Mastercard and the supported values are 101 and 102. Payment card companies can introduce new values without notice. Your order management system should be able to process new values without problems.  CyberSource through VisaNet When the value for this field is 101, 102, 103, 216, or 217, it corresponds to the following data in the TC 33 capture file5: Record: CP01 TCR6, Position: 88-90,  Field: Mastercard Wallet Identifier. When the value for this field is VCIND, it corresponds to the following data in the TC 33 capture file5: Record: CP01 TCR8, Position: 72-76, Field: Agent Unique ID. 
   * @return walletType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WALLET_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getWalletType() {
    return walletType;
  }


  @JsonProperty(JSON_PROPERTY_WALLET_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWalletType(String walletType) {
    this.walletType = walletType;
  }

  public CreateCreditRequestProcessingInformation nationalNetDomesticData(String nationalNetDomesticData) {
    
    this.nationalNetDomesticData = nationalNetDomesticData;
    return this;
  }

  /**
   * Supplementary domestic transaction information provided by the acquirer for National Net Settlement Service (NNSS) transactions. NNSS is a settlement service that Visa provides. For transactions on CyberSource through VisaNet in countries that subscribe to NNSS: VisaNet clears transactions; VisaNet transfers funds to the acquirer after deducting processing fees and interchange fees. VisaNet settles transactions in the local pricing currency through a local financial institution. This field is supported only on CyberSource through VisaNet for domestic data in Colombia 
   * @return nationalNetDomesticData
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NATIONAL_NET_DOMESTIC_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNationalNetDomesticData() {
    return nationalNetDomesticData;
  }


  @JsonProperty(JSON_PROPERTY_NATIONAL_NET_DOMESTIC_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNationalNetDomesticData(String nationalNetDomesticData) {
    this.nationalNetDomesticData = nationalNetDomesticData;
  }

  public CreateCreditRequestProcessingInformation networkRoutingOrder(String networkRoutingOrder) {
    
    this.networkRoutingOrder = networkRoutingOrder;
    return this;
  }

  /**
   * On PIN Debit Gateways: This U.S.-only field is optionally used by  participants (merchants and acquirers) to specify the network access priority. VisaNet checks to determine if there are issuer routing preferences for any of the networks specified by the sharing group code. If an issuer preference exists for one of the specified debit networks, VisaNet makes a routing selection based on the issuer&#39;s preference. If an issuer preference exists for more than one of the specified debit networks, or if no issuer preference exists, VisaNet makes a selection based on the acquirer&#39;s routing priorities.  #### PIN debit Priority order of the networks through which he transaction will be routed. Set this value to a series of one-character network codes in your preferred order. This is a list of the network codes:  | Network | Code | | --- | --- | | Accel | E | | AFFN | U | | Alaska Option | 3 | | CU24 | C | | Interlink | G | | Maestro | 8 | | NETS | P | | NYCE | F | | Pulse | H | | Shazam | 7 | | Star | M | | Visa | V |  For example, if the Star network is your first preference and Pulse is your second preference, set this field to a value of &#x60;MH&#x60;.  When you do not include this value in your PIN debit request, the list of network codes from your account is used. **Note** This field is supported only for businesses located in the U.S.  Optional field for PIN debit credit or PIN debit purchase. 
   * @return networkRoutingOrder
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NETWORK_ROUTING_ORDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNetworkRoutingOrder() {
    return networkRoutingOrder;
  }


  @JsonProperty(JSON_PROPERTY_NETWORK_ROUTING_ORDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNetworkRoutingOrder(String networkRoutingOrder) {
    this.networkRoutingOrder = networkRoutingOrder;
  }

  public CreateCreditRequestProcessingInformation recurringOptions(RefundPaymentRequestProcessingInformationRecurringOptions recurringOptions) {
    
    this.recurringOptions = recurringOptions;
    return this;
  }

  /**
   * Get recurringOptions
   * @return recurringOptions
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RECURRING_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RefundPaymentRequestProcessingInformationRecurringOptions getRecurringOptions() {
    return recurringOptions;
  }


  @JsonProperty(JSON_PROPERTY_RECURRING_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRecurringOptions(RefundPaymentRequestProcessingInformationRecurringOptions recurringOptions) {
    this.recurringOptions = recurringOptions;
  }

  public CreateCreditRequestProcessingInformation bankTransferOptions(CreateCreditRequestProcessingInformationBankTransferOptions bankTransferOptions) {
    
    this.bankTransferOptions = bankTransferOptions;
    return this;
  }

  /**
   * Get bankTransferOptions
   * @return bankTransferOptions
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BANK_TRANSFER_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CreateCreditRequestProcessingInformationBankTransferOptions getBankTransferOptions() {
    return bankTransferOptions;
  }


  @JsonProperty(JSON_PROPERTY_BANK_TRANSFER_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBankTransferOptions(CreateCreditRequestProcessingInformationBankTransferOptions bankTransferOptions) {
    this.bankTransferOptions = bankTransferOptions;
  }

  public CreateCreditRequestProcessingInformation purchaseOptions(CreateCreditRequestProcessingInformationPurchaseOptions purchaseOptions) {
    
    this.purchaseOptions = purchaseOptions;
    return this;
  }

  /**
   * Get purchaseOptions
   * @return purchaseOptions
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PURCHASE_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CreateCreditRequestProcessingInformationPurchaseOptions getPurchaseOptions() {
    return purchaseOptions;
  }


  @JsonProperty(JSON_PROPERTY_PURCHASE_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPurchaseOptions(CreateCreditRequestProcessingInformationPurchaseOptions purchaseOptions) {
    this.purchaseOptions = purchaseOptions;
  }

  public CreateCreditRequestProcessingInformation electronicBenefitsTransfer(CreateCreditRequestProcessingInformationElectronicBenefitsTransfer electronicBenefitsTransfer) {
    
    this.electronicBenefitsTransfer = electronicBenefitsTransfer;
    return this;
  }

  /**
   * Get electronicBenefitsTransfer
   * @return electronicBenefitsTransfer
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ELECTRONIC_BENEFITS_TRANSFER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CreateCreditRequestProcessingInformationElectronicBenefitsTransfer getElectronicBenefitsTransfer() {
    return electronicBenefitsTransfer;
  }


  @JsonProperty(JSON_PROPERTY_ELECTRONIC_BENEFITS_TRANSFER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setElectronicBenefitsTransfer(CreateCreditRequestProcessingInformationElectronicBenefitsTransfer electronicBenefitsTransfer) {
    this.electronicBenefitsTransfer = electronicBenefitsTransfer;
  }

  public CreateCreditRequestProcessingInformation loanOptions(CreatePaymentRequestProcessingInformationLoanOptions loanOptions) {
    
    this.loanOptions = loanOptions;
    return this;
  }

  /**
   * Get loanOptions
   * @return loanOptions
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOAN_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CreatePaymentRequestProcessingInformationLoanOptions getLoanOptions() {
    return loanOptions;
  }


  @JsonProperty(JSON_PROPERTY_LOAN_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLoanOptions(CreatePaymentRequestProcessingInformationLoanOptions loanOptions) {
    this.loanOptions = loanOptions;
  }

  public CreateCreditRequestProcessingInformation japanPaymentOptions(CreateCreditRequestProcessingInformationJapanPaymentOptions japanPaymentOptions) {
    
    this.japanPaymentOptions = japanPaymentOptions;
    return this;
  }

  /**
   * Get japanPaymentOptions
   * @return japanPaymentOptions
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_JAPAN_PAYMENT_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CreateCreditRequestProcessingInformationJapanPaymentOptions getJapanPaymentOptions() {
    return japanPaymentOptions;
  }


  @JsonProperty(JSON_PROPERTY_JAPAN_PAYMENT_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setJapanPaymentOptions(CreateCreditRequestProcessingInformationJapanPaymentOptions japanPaymentOptions) {
    this.japanPaymentOptions = japanPaymentOptions;
  }

  public CreateCreditRequestProcessingInformation refundOptions(CreateCreditRequestProcessingInformationRefundOptions refundOptions) {
    
    this.refundOptions = refundOptions;
    return this;
  }

  /**
   * Get refundOptions
   * @return refundOptions
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REFUND_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CreateCreditRequestProcessingInformationRefundOptions getRefundOptions() {
    return refundOptions;
  }


  @JsonProperty(JSON_PROPERTY_REFUND_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRefundOptions(CreateCreditRequestProcessingInformationRefundOptions refundOptions) {
    this.refundOptions = refundOptions;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateCreditRequestProcessingInformation createCreditRequestProcessingInformation = (CreateCreditRequestProcessingInformation) o;
    return Objects.equals(this.commerceIndicator, createCreditRequestProcessingInformation.commerceIndicator) &&
        Objects.equals(this.processorId, createCreditRequestProcessingInformation.processorId) &&
        Objects.equals(this.paymentSolution, createCreditRequestProcessingInformation.paymentSolution) &&
        Objects.equals(this.reconciliationId, createCreditRequestProcessingInformation.reconciliationId) &&
        Objects.equals(this.linkId, createCreditRequestProcessingInformation.linkId) &&
        Objects.equals(this.reportGroup, createCreditRequestProcessingInformation.reportGroup) &&
        Objects.equals(this.visaCheckoutId, createCreditRequestProcessingInformation.visaCheckoutId) &&
        Objects.equals(this.purchaseLevel, createCreditRequestProcessingInformation.purchaseLevel) &&
        Objects.equals(this.industryDataType, createCreditRequestProcessingInformation.industryDataType) &&
        Objects.equals(this.walletType, createCreditRequestProcessingInformation.walletType) &&
        Objects.equals(this.nationalNetDomesticData, createCreditRequestProcessingInformation.nationalNetDomesticData) &&
        Objects.equals(this.networkRoutingOrder, createCreditRequestProcessingInformation.networkRoutingOrder) &&
        Objects.equals(this.recurringOptions, createCreditRequestProcessingInformation.recurringOptions) &&
        Objects.equals(this.bankTransferOptions, createCreditRequestProcessingInformation.bankTransferOptions) &&
        Objects.equals(this.purchaseOptions, createCreditRequestProcessingInformation.purchaseOptions) &&
        Objects.equals(this.electronicBenefitsTransfer, createCreditRequestProcessingInformation.electronicBenefitsTransfer) &&
        Objects.equals(this.loanOptions, createCreditRequestProcessingInformation.loanOptions) &&
        Objects.equals(this.japanPaymentOptions, createCreditRequestProcessingInformation.japanPaymentOptions) &&
        Objects.equals(this.refundOptions, createCreditRequestProcessingInformation.refundOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commerceIndicator, processorId, paymentSolution, reconciliationId, linkId, reportGroup, visaCheckoutId, purchaseLevel, industryDataType, walletType, nationalNetDomesticData, networkRoutingOrder, recurringOptions, bankTransferOptions, purchaseOptions, electronicBenefitsTransfer, loanOptions, japanPaymentOptions, refundOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateCreditRequestProcessingInformation {\n");
    sb.append("    commerceIndicator: ").append(toIndentedString(commerceIndicator)).append("\n");
    sb.append("    processorId: ").append(toIndentedString(processorId)).append("\n");
    sb.append("    paymentSolution: ").append(toIndentedString(paymentSolution)).append("\n");
    sb.append("    reconciliationId: ").append(toIndentedString(reconciliationId)).append("\n");
    sb.append("    linkId: ").append(toIndentedString(linkId)).append("\n");
    sb.append("    reportGroup: ").append(toIndentedString(reportGroup)).append("\n");
    sb.append("    visaCheckoutId: ").append(toIndentedString(visaCheckoutId)).append("\n");
    sb.append("    purchaseLevel: ").append(toIndentedString(purchaseLevel)).append("\n");
    sb.append("    industryDataType: ").append(toIndentedString(industryDataType)).append("\n");
    sb.append("    walletType: ").append(toIndentedString(walletType)).append("\n");
    sb.append("    nationalNetDomesticData: ").append(toIndentedString(nationalNetDomesticData)).append("\n");
    sb.append("    networkRoutingOrder: ").append(toIndentedString(networkRoutingOrder)).append("\n");
    sb.append("    recurringOptions: ").append(toIndentedString(recurringOptions)).append("\n");
    sb.append("    bankTransferOptions: ").append(toIndentedString(bankTransferOptions)).append("\n");
    sb.append("    purchaseOptions: ").append(toIndentedString(purchaseOptions)).append("\n");
    sb.append("    electronicBenefitsTransfer: ").append(toIndentedString(electronicBenefitsTransfer)).append("\n");
    sb.append("    loanOptions: ").append(toIndentedString(loanOptions)).append("\n");
    sb.append("    japanPaymentOptions: ").append(toIndentedString(japanPaymentOptions)).append("\n");
    sb.append("    refundOptions: ").append(toIndentedString(refundOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

