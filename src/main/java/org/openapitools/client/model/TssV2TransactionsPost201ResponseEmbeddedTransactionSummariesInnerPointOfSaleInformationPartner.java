/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * TssV2TransactionsPost201ResponseEmbeddedTransactionSummariesInnerPointOfSaleInformationPartner
 */
@JsonPropertyOrder({
  TssV2TransactionsPost201ResponseEmbeddedTransactionSummariesInnerPointOfSaleInformationPartner.JSON_PROPERTY_ORIGINAL_TRANSACTION_ID
})
@JsonTypeName("tssV2TransactionsPost201Response__embedded_transactionSummaries_inner_pointOfSaleInformation_partner")
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T19:17:21.826843+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class TssV2TransactionsPost201ResponseEmbeddedTransactionSummariesInnerPointOfSaleInformationPartner {
  public static final String JSON_PROPERTY_ORIGINAL_TRANSACTION_ID = "originalTransactionId";
  private String originalTransactionId;

  public TssV2TransactionsPost201ResponseEmbeddedTransactionSummariesInnerPointOfSaleInformationPartner() {
  }

  public TssV2TransactionsPost201ResponseEmbeddedTransactionSummariesInnerPointOfSaleInformationPartner originalTransactionId(String originalTransactionId) {
    
    this.originalTransactionId = originalTransactionId;
    return this;
  }

  /**
   * Value that links the previous transaction to the current follow-on request. This value is assigned by the client software that is installed on the POS terminal, which makes it available to the terminal&#39;s software and to CyberSource. Therefore, you can use this value to reconcile transactions between CyberSource and the terminal&#39;s software.  CyberSource does not forward this value to the processor. Instead, the value is forwarded to the CyberSource reporting functionality.  This field is supported only on American Express Direct, FDC Nashville Global, and SIX. 
   * @return originalTransactionId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ORIGINAL_TRANSACTION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOriginalTransactionId() {
    return originalTransactionId;
  }


  @JsonProperty(JSON_PROPERTY_ORIGINAL_TRANSACTION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOriginalTransactionId(String originalTransactionId) {
    this.originalTransactionId = originalTransactionId;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TssV2TransactionsPost201ResponseEmbeddedTransactionSummariesInnerPointOfSaleInformationPartner tssV2TransactionsPost201ResponseEmbeddedTransactionSummariesInnerPointOfSaleInformationPartner = (TssV2TransactionsPost201ResponseEmbeddedTransactionSummariesInnerPointOfSaleInformationPartner) o;
    return Objects.equals(this.originalTransactionId, tssV2TransactionsPost201ResponseEmbeddedTransactionSummariesInnerPointOfSaleInformationPartner.originalTransactionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(originalTransactionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TssV2TransactionsPost201ResponseEmbeddedTransactionSummariesInnerPointOfSaleInformationPartner {\n");
    sb.append("    originalTransactionId: ").append(toIndentedString(originalTransactionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

