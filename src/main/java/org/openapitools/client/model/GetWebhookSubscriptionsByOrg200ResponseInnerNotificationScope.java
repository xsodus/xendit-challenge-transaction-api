/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * GetWebhookSubscriptionsByOrg200ResponseInnerNotificationScope
 */
@JsonPropertyOrder({
  GetWebhookSubscriptionsByOrg200ResponseInnerNotificationScope.JSON_PROPERTY_SCOPE,
  GetWebhookSubscriptionsByOrg200ResponseInnerNotificationScope.JSON_PROPERTY_SCOPE_DATA
})
@JsonTypeName("getWebhookSubscriptionsByOrg_200_response_inner_notificationScope")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T18:32:10.370382+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class GetWebhookSubscriptionsByOrg200ResponseInnerNotificationScope {
  public static final String JSON_PROPERTY_SCOPE = "scope";
  private String scope = "SELF";

  public static final String JSON_PROPERTY_SCOPE_DATA = "scopeData";
  private List<String> scopeData = new ArrayList<>();

  public GetWebhookSubscriptionsByOrg200ResponseInnerNotificationScope() {
  }

  public GetWebhookSubscriptionsByOrg200ResponseInnerNotificationScope scope(String scope) {
    
    this.scope = scope;
    return this;
  }

  /**
   * The webhook scope. 1. SELF The Webhook is used to deliver webhooks for only this Organization (or Merchant). 2. DESCENDANTS The Webhook is used to deliver webhooks for this Organization and its children. 3. CUSTOM The Webhook is used to deliver webhooks for the OrgIds (or MiDs) explicitly listed in scopeData field
   * @return scope
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SCOPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getScope() {
    return scope;
  }


  @JsonProperty(JSON_PROPERTY_SCOPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScope(String scope) {
    this.scope = scope;
  }

  public GetWebhookSubscriptionsByOrg200ResponseInnerNotificationScope scopeData(List<String> scopeData) {
    
    this.scopeData = scopeData;
    return this;
  }

  public GetWebhookSubscriptionsByOrg200ResponseInnerNotificationScope addScopeDataItem(String scopeDataItem) {
    if (this.scopeData == null) {
      this.scopeData = new ArrayList<>();
    }
    this.scopeData.add(scopeDataItem);
    return this;
  }

  /**
   * Applicable only if scope&#x3D;CUSTOM. This should contains a Set of MIDs or OrgIDs for which this subscription is applicable.
   * @return scopeData
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SCOPE_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getScopeData() {
    return scopeData;
  }


  @JsonProperty(JSON_PROPERTY_SCOPE_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScopeData(List<String> scopeData) {
    this.scopeData = scopeData;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetWebhookSubscriptionsByOrg200ResponseInnerNotificationScope getWebhookSubscriptionsByOrg200ResponseInnerNotificationScope = (GetWebhookSubscriptionsByOrg200ResponseInnerNotificationScope) o;
    return Objects.equals(this.scope, getWebhookSubscriptionsByOrg200ResponseInnerNotificationScope.scope) &&
        Objects.equals(this.scopeData, getWebhookSubscriptionsByOrg200ResponseInnerNotificationScope.scopeData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(scope, scopeData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetWebhookSubscriptionsByOrg200ResponseInnerNotificationScope {\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    scopeData: ").append(toIndentedString(scopeData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

