/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CalculateTaxRequestTaxInformation
 */
@JsonPropertyOrder({
  CalculateTaxRequestTaxInformation.JSON_PROPERTY_REPORTING_DATE,
  CalculateTaxRequestTaxInformation.JSON_PROPERTY_DATE_OVERRIDE_REASON,
  CalculateTaxRequestTaxInformation.JSON_PROPERTY_NEXUS,
  CalculateTaxRequestTaxInformation.JSON_PROPERTY_NO_NEXUS,
  CalculateTaxRequestTaxInformation.JSON_PROPERTY_SHOW_TAX_PER_LINE_ITEM,
  CalculateTaxRequestTaxInformation.JSON_PROPERTY_COMMIT_INDICATOR,
  CalculateTaxRequestTaxInformation.JSON_PROPERTY_REFUND_INDICATOR
})
@JsonTypeName("calculateTax_request_taxInformation")
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T19:17:21.826843+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class CalculateTaxRequestTaxInformation {
  public static final String JSON_PROPERTY_REPORTING_DATE = "reportingDate";
  private String reportingDate;

  public static final String JSON_PROPERTY_DATE_OVERRIDE_REASON = "dateOverrideReason";
  private String dateOverrideReason;

  public static final String JSON_PROPERTY_NEXUS = "nexus";
  private List<String> nexus = new ArrayList<>();

  public static final String JSON_PROPERTY_NO_NEXUS = "noNexus";
  private List<String> noNexus = new ArrayList<>();

  public static final String JSON_PROPERTY_SHOW_TAX_PER_LINE_ITEM = "showTaxPerLineItem";
  private String showTaxPerLineItem;

  public static final String JSON_PROPERTY_COMMIT_INDICATOR = "commitIndicator";
  private Boolean commitIndicator;

  public static final String JSON_PROPERTY_REFUND_INDICATOR = "refundIndicator";
  private Boolean refundIndicator;

  public CalculateTaxRequestTaxInformation() {
  }

  public CalculateTaxRequestTaxInformation reportingDate(String reportingDate) {
    
    this.reportingDate = reportingDate;
    return this;
  }

  /**
   * Reporting date of transaction. Format: YYYYMMDD. Defaults to current date if not specified. Optional for U.S., Canadian, international tax, and value added taxes. 
   * @return reportingDate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REPORTING_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getReportingDate() {
    return reportingDate;
  }


  @JsonProperty(JSON_PROPERTY_REPORTING_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReportingDate(String reportingDate) {
    this.reportingDate = reportingDate;
  }

  public CalculateTaxRequestTaxInformation dateOverrideReason(String dateOverrideReason) {
    
    this.dateOverrideReason = dateOverrideReason;
    return this;
  }

  /**
   * If a past or future date is specified in &#x60;orderInformation.invoiceDetails.invoiceDate&#x60;, then provide the reason for that for audit purposes. Typical reasons include: &#39;Return&#39;, &#39;Layaway&#39;, &#39;Imported&#39;.  Optional for U.S., Canadian, international tax, and value added taxes. 
   * @return dateOverrideReason
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DATE_OVERRIDE_REASON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDateOverrideReason() {
    return dateOverrideReason;
  }


  @JsonProperty(JSON_PROPERTY_DATE_OVERRIDE_REASON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDateOverrideReason(String dateOverrideReason) {
    this.dateOverrideReason = dateOverrideReason;
  }

  public CalculateTaxRequestTaxInformation nexus(List<String> nexus) {
    
    this.nexus = nexus;
    return this;
  }

  public CalculateTaxRequestTaxInformation addNexusItem(String nexusItem) {
    if (this.nexus == null) {
      this.nexus = new ArrayList<>();
    }
    this.nexus.add(nexusItem);
    return this;
  }

  /**
   * Comma-separated list of states or provinces in which merchandise is taxable. Note merchandise may be still be non-taxable or tax exempt depending on the product taxability. Indicate the type of product you are selling in the product code field for product-level taxability rules to be applied. Do not use both the &#x60;taxInformation.nexus&#x60; and &#x60;taxInformation.noNexus&#x60; fields in your request. If you do not include this field in a tax calculation service request, the tax system makes its calculations as if you have nexus in every US state or Canadian province. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf).  If you indicate you do not have nexus in the destination state, jurisdiction level fields are left blank in the Tax Detail Report.  Optional field for U.S. and Canadian taxes only. Either this field or &#x60;taxInformation.noNexus&#x60; is required if you do not have nexus in every state or province.  Not applicable for international and value added taxes. 
   * @return nexus
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NEXUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getNexus() {
    return nexus;
  }


  @JsonProperty(JSON_PROPERTY_NEXUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNexus(List<String> nexus) {
    this.nexus = nexus;
  }

  public CalculateTaxRequestTaxInformation noNexus(List<String> noNexus) {
    
    this.noNexus = noNexus;
    return this;
  }

  public CalculateTaxRequestTaxInformation addNoNexusItem(String noNexusItem) {
    if (this.noNexus == null) {
      this.noNexus = new ArrayList<>();
    }
    this.noNexus.add(noNexusItem);
    return this;
  }

  /**
   * Comma-separated list of states or provinces where you do not have nexus. Check with a tax advisor to determine where your business has nexus. Do not use both the &#x60;taxInformation.nexus&#x60; and &#x60;taxInformation.noNexus&#x60; fields in your request. If you do not include this field in a tax calculation service request, the tax system makes its calculations as if you have nexus in every US state or Canadian province. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf).  If you indicate you do not have nexus in the destination state, jurisdiction level fields are left blank in the Tax Detail Report.  Optional field for U.S. and Canadian taxes only. Either this field or &#x60;taxInformation.nexus&#x60; is required if you do not have nexus in every state or province.  Not applicable for international and value added taxes. 
   * @return noNexus
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NO_NEXUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getNoNexus() {
    return noNexus;
  }


  @JsonProperty(JSON_PROPERTY_NO_NEXUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNoNexus(List<String> noNexus) {
    this.noNexus = noNexus;
  }

  public CalculateTaxRequestTaxInformation showTaxPerLineItem(String showTaxPerLineItem) {
    
    this.showTaxPerLineItem = showTaxPerLineItem;
    return this;
  }

  /**
   * Whether or not to display tax amounts for each line item. This field can contain one of the following values: - &#x60;Yes&#x60; - Display tax amounts for each line item - &#x60;No&#x60; (default) - Do not display tax amounts for each line item  Optional for U.S., Canadian, international tax, and value added taxes. 
   * @return showTaxPerLineItem
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SHOW_TAX_PER_LINE_ITEM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getShowTaxPerLineItem() {
    return showTaxPerLineItem;
  }


  @JsonProperty(JSON_PROPERTY_SHOW_TAX_PER_LINE_ITEM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShowTaxPerLineItem(String showTaxPerLineItem) {
    this.showTaxPerLineItem = showTaxPerLineItem;
  }

  public CalculateTaxRequestTaxInformation commitIndicator(Boolean commitIndicator) {
    
    this.commitIndicator = commitIndicator;
    return this;
  }

  /**
   * Indicates whether this is a committed tax transaction. For a committed tax transaction, the status in the Tax Detail Report is \&quot;Committed.\&quot; For an uncommitted tax transaction, the status in the Tax Detail Report is \&quot;Uncommitted.\&quot; Possible values: - &#x60;true&#x60;: This is a committed tax transaction. - &#x60;false&#x60; (default): This is not a committed tax transaction.  A committed tax request is a tax service request that sets the status field in the Tax Detail Report to committed. The committed status indicates that the amount calculated by the tax service is included in the amount of a capture or credit.  Use a void service request to cancel a committed tax request or a committed refund tax request. The void transaction is included as a separate entry in the Tax Detail Report. The value of the status field is cancelled. The value of the link ID is the request ID of the committed tax request or refund tax request that was voided. You can use the value of the link ID to reconcile your orders.  Optional for U.S., Canadian, international tax, and value added taxes. For more information on Tax Detail Report features refer the [Tax Service Guide](https://developer.cybersource.com/docs/cybs/en-us/tax-calculation/developer/all/rest/tax-calculation/tax-overview.html). 
   * @return commitIndicator
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMMIT_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCommitIndicator() {
    return commitIndicator;
  }


  @JsonProperty(JSON_PROPERTY_COMMIT_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCommitIndicator(Boolean commitIndicator) {
    this.commitIndicator = commitIndicator;
  }

  public CalculateTaxRequestTaxInformation refundIndicator(Boolean refundIndicator) {
    
    this.refundIndicator = refundIndicator;
    return this;
  }

  /**
   * Indicates whether this is a refund tax transaction. For a refund tax transaction, amounts in the Tax Detail Report will be negative. Possible values: - &#x60;true&#x60;: This is a refund tax transaction. - &#x60;false&#x60; (default): This is not a refund tax transaction.  A refund tax request is a tax service request that sets the transaction type field in the Tax Detail Report to refunded and makes the reported amount negative. Tax amounts are returned as positive amounts in reply messages, but they are saved in reports as negative amounts which enables the reporting software to accurately calculate the aggregate amounts.  Optional for U.S., Canadian, international tax, and value added taxes. For more information on Tax Detail Report features refer the [Tax Service Guide](https://developer.cybersource.com/docs/cybs/en-us/tax-calculation/developer/all/rest/tax-calculation/tax-overview.html). 
   * @return refundIndicator
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REFUND_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getRefundIndicator() {
    return refundIndicator;
  }


  @JsonProperty(JSON_PROPERTY_REFUND_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRefundIndicator(Boolean refundIndicator) {
    this.refundIndicator = refundIndicator;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CalculateTaxRequestTaxInformation calculateTaxRequestTaxInformation = (CalculateTaxRequestTaxInformation) o;
    return Objects.equals(this.reportingDate, calculateTaxRequestTaxInformation.reportingDate) &&
        Objects.equals(this.dateOverrideReason, calculateTaxRequestTaxInformation.dateOverrideReason) &&
        Objects.equals(this.nexus, calculateTaxRequestTaxInformation.nexus) &&
        Objects.equals(this.noNexus, calculateTaxRequestTaxInformation.noNexus) &&
        Objects.equals(this.showTaxPerLineItem, calculateTaxRequestTaxInformation.showTaxPerLineItem) &&
        Objects.equals(this.commitIndicator, calculateTaxRequestTaxInformation.commitIndicator) &&
        Objects.equals(this.refundIndicator, calculateTaxRequestTaxInformation.refundIndicator);
  }

  @Override
  public int hashCode() {
    return Objects.hash(reportingDate, dateOverrideReason, nexus, noNexus, showTaxPerLineItem, commitIndicator, refundIndicator);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CalculateTaxRequestTaxInformation {\n");
    sb.append("    reportingDate: ").append(toIndentedString(reportingDate)).append("\n");
    sb.append("    dateOverrideReason: ").append(toIndentedString(dateOverrideReason)).append("\n");
    sb.append("    nexus: ").append(toIndentedString(nexus)).append("\n");
    sb.append("    noNexus: ").append(toIndentedString(noNexus)).append("\n");
    sb.append("    showTaxPerLineItem: ").append(toIndentedString(showTaxPerLineItem)).append("\n");
    sb.append("    commitIndicator: ").append(toIndentedString(commitIndicator)).append("\n");
    sb.append("    refundIndicator: ").append(toIndentedString(refundIndicator)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

