/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.client.model.CreatePaymentRequestConsumerAuthenticationInformationStrongAuthenticationIssuerInformation;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CreatePaymentRequestConsumerAuthenticationInformationStrongAuthentication
 */
@JsonPropertyOrder({
  CreatePaymentRequestConsumerAuthenticationInformationStrongAuthentication.JSON_PROPERTY_ISSUER_INFORMATION,
  CreatePaymentRequestConsumerAuthenticationInformationStrongAuthentication.JSON_PROPERTY_LOW_VALUE_EXEMPTION_INDICATOR,
  CreatePaymentRequestConsumerAuthenticationInformationStrongAuthentication.JSON_PROPERTY_RISK_ANALYSIS_EXEMPTION_INDICATOR,
  CreatePaymentRequestConsumerAuthenticationInformationStrongAuthentication.JSON_PROPERTY_TRUSTED_MERCHANT_EXEMPTION_INDICATOR,
  CreatePaymentRequestConsumerAuthenticationInformationStrongAuthentication.JSON_PROPERTY_SECURE_CORPORATE_PAYMENT_INDICATOR,
  CreatePaymentRequestConsumerAuthenticationInformationStrongAuthentication.JSON_PROPERTY_DELEGATED_AUTHENTICATION_EXEMPTION_INDICATOR,
  CreatePaymentRequestConsumerAuthenticationInformationStrongAuthentication.JSON_PROPERTY_OUTAGE_EXEMPTION_INDICATOR,
  CreatePaymentRequestConsumerAuthenticationInformationStrongAuthentication.JSON_PROPERTY_AUTHENTICATION_INDICATOR
})
@JsonTypeName("createPayment_request_consumerAuthenticationInformation_strongAuthentication")
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T19:17:21.826843+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class CreatePaymentRequestConsumerAuthenticationInformationStrongAuthentication {
  public static final String JSON_PROPERTY_ISSUER_INFORMATION = "issuerInformation";
  private CreatePaymentRequestConsumerAuthenticationInformationStrongAuthenticationIssuerInformation issuerInformation;

  public static final String JSON_PROPERTY_LOW_VALUE_EXEMPTION_INDICATOR = "lowValueExemptionIndicator";
  private String lowValueExemptionIndicator;

  public static final String JSON_PROPERTY_RISK_ANALYSIS_EXEMPTION_INDICATOR = "riskAnalysisExemptionIndicator";
  private String riskAnalysisExemptionIndicator;

  public static final String JSON_PROPERTY_TRUSTED_MERCHANT_EXEMPTION_INDICATOR = "trustedMerchantExemptionIndicator";
  private String trustedMerchantExemptionIndicator;

  public static final String JSON_PROPERTY_SECURE_CORPORATE_PAYMENT_INDICATOR = "secureCorporatePaymentIndicator";
  private String secureCorporatePaymentIndicator;

  public static final String JSON_PROPERTY_DELEGATED_AUTHENTICATION_EXEMPTION_INDICATOR = "delegatedAuthenticationExemptionIndicator";
  private String delegatedAuthenticationExemptionIndicator;

  public static final String JSON_PROPERTY_OUTAGE_EXEMPTION_INDICATOR = "outageExemptionIndicator";
  private String outageExemptionIndicator;

  public static final String JSON_PROPERTY_AUTHENTICATION_INDICATOR = "authenticationIndicator";
  private String authenticationIndicator;

  public CreatePaymentRequestConsumerAuthenticationInformationStrongAuthentication() {
  }

  public CreatePaymentRequestConsumerAuthenticationInformationStrongAuthentication issuerInformation(CreatePaymentRequestConsumerAuthenticationInformationStrongAuthenticationIssuerInformation issuerInformation) {
    
    this.issuerInformation = issuerInformation;
    return this;
  }

  /**
   * Get issuerInformation
   * @return issuerInformation
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ISSUER_INFORMATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CreatePaymentRequestConsumerAuthenticationInformationStrongAuthenticationIssuerInformation getIssuerInformation() {
    return issuerInformation;
  }


  @JsonProperty(JSON_PROPERTY_ISSUER_INFORMATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIssuerInformation(CreatePaymentRequestConsumerAuthenticationInformationStrongAuthenticationIssuerInformation issuerInformation) {
    this.issuerInformation = issuerInformation;
  }

  public CreatePaymentRequestConsumerAuthenticationInformationStrongAuthentication lowValueExemptionIndicator(String lowValueExemptionIndicator) {
    
    this.lowValueExemptionIndicator = lowValueExemptionIndicator;
    return this;
  }

  /**
   * This field will contain the low value exemption indicator with one of the following values: Possible values: - &#x60;0&#x60;  ( low value exemption does not apply to the transaction) - &#x60;1&#x60; (Transaction exempt from SCA as the merchant/acquirer has determined it to be a low value payment) 
   * @return lowValueExemptionIndicator
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOW_VALUE_EXEMPTION_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLowValueExemptionIndicator() {
    return lowValueExemptionIndicator;
  }


  @JsonProperty(JSON_PROPERTY_LOW_VALUE_EXEMPTION_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLowValueExemptionIndicator(String lowValueExemptionIndicator) {
    this.lowValueExemptionIndicator = lowValueExemptionIndicator;
  }

  public CreatePaymentRequestConsumerAuthenticationInformationStrongAuthentication riskAnalysisExemptionIndicator(String riskAnalysisExemptionIndicator) {
    
    this.riskAnalysisExemptionIndicator = riskAnalysisExemptionIndicator;
    return this;
  }

  /**
   * This field will contain the transaction risk analysis exemption indicator with one of the following values: Possible values: - &#x60;0&#x60;  (TRA exemption does not apply to the transaction) - &#x60;1&#x60; (Transaction exempt from SCA as the merchant/acquirer has determined it to be low risk in accordance with the criteria defined by PSD2/RTS) 
   * @return riskAnalysisExemptionIndicator
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RISK_ANALYSIS_EXEMPTION_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRiskAnalysisExemptionIndicator() {
    return riskAnalysisExemptionIndicator;
  }


  @JsonProperty(JSON_PROPERTY_RISK_ANALYSIS_EXEMPTION_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRiskAnalysisExemptionIndicator(String riskAnalysisExemptionIndicator) {
    this.riskAnalysisExemptionIndicator = riskAnalysisExemptionIndicator;
  }

  public CreatePaymentRequestConsumerAuthenticationInformationStrongAuthentication trustedMerchantExemptionIndicator(String trustedMerchantExemptionIndicator) {
    
    this.trustedMerchantExemptionIndicator = trustedMerchantExemptionIndicator;
    return this;
  }

  /**
   * Possible values: - &#x60;0&#x60;  (Trusted merchant exemption does not apply to the transaction) - &#x60;1&#x60; (Transaction exempt from SCA as it originated at a merchant trusted by the cardholder) 
   * @return trustedMerchantExemptionIndicator
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRUSTED_MERCHANT_EXEMPTION_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTrustedMerchantExemptionIndicator() {
    return trustedMerchantExemptionIndicator;
  }


  @JsonProperty(JSON_PROPERTY_TRUSTED_MERCHANT_EXEMPTION_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTrustedMerchantExemptionIndicator(String trustedMerchantExemptionIndicator) {
    this.trustedMerchantExemptionIndicator = trustedMerchantExemptionIndicator;
  }

  public CreatePaymentRequestConsumerAuthenticationInformationStrongAuthentication secureCorporatePaymentIndicator(String secureCorporatePaymentIndicator) {
    
    this.secureCorporatePaymentIndicator = secureCorporatePaymentIndicator;
    return this;
  }

  /**
   * This field will contain the secure corporate payment exemption indicator with one of the following values: Possible values: - &#x60;0&#x60;  (SCA exemption does not apply to the transaction) - &#x60;1&#x60; (Transaction exempt from SCA as the merchant/acquirer has determined it as a secure corporate payment) 
   * @return secureCorporatePaymentIndicator
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SECURE_CORPORATE_PAYMENT_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSecureCorporatePaymentIndicator() {
    return secureCorporatePaymentIndicator;
  }


  @JsonProperty(JSON_PROPERTY_SECURE_CORPORATE_PAYMENT_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSecureCorporatePaymentIndicator(String secureCorporatePaymentIndicator) {
    this.secureCorporatePaymentIndicator = secureCorporatePaymentIndicator;
  }

  public CreatePaymentRequestConsumerAuthenticationInformationStrongAuthentication delegatedAuthenticationExemptionIndicator(String delegatedAuthenticationExemptionIndicator) {
    
    this.delegatedAuthenticationExemptionIndicator = delegatedAuthenticationExemptionIndicator;
    return this;
  }

  /**
   * This field will contain the delegated authentication exemption indicator with one of the following values: Possible values: - &#x60;0&#x60;  (delegated Authentication exemption does not apply to the transaction) - &#x60;1&#x60; (Transaction exempt from SCA as authentication has been delegated to other provider (PSP,Acquirer)) 
   * @return delegatedAuthenticationExemptionIndicator
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DELEGATED_AUTHENTICATION_EXEMPTION_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDelegatedAuthenticationExemptionIndicator() {
    return delegatedAuthenticationExemptionIndicator;
  }


  @JsonProperty(JSON_PROPERTY_DELEGATED_AUTHENTICATION_EXEMPTION_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDelegatedAuthenticationExemptionIndicator(String delegatedAuthenticationExemptionIndicator) {
    this.delegatedAuthenticationExemptionIndicator = delegatedAuthenticationExemptionIndicator;
  }

  public CreatePaymentRequestConsumerAuthenticationInformationStrongAuthentication outageExemptionIndicator(String outageExemptionIndicator) {
    
    this.outageExemptionIndicator = outageExemptionIndicator;
    return this;
  }

  /**
   * This field will contain the outage exemption indicator with one of the following values: Possible values: - &#x60;0&#x60;  (Outage Authentication exemption does not apply to the transaction) - &#x60;1&#x60; (Outage exempt from SCA as authentication could not be done due to outage) 
   * @return outageExemptionIndicator
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OUTAGE_EXEMPTION_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOutageExemptionIndicator() {
    return outageExemptionIndicator;
  }


  @JsonProperty(JSON_PROPERTY_OUTAGE_EXEMPTION_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOutageExemptionIndicator(String outageExemptionIndicator) {
    this.outageExemptionIndicator = outageExemptionIndicator;
  }

  public CreatePaymentRequestConsumerAuthenticationInformationStrongAuthentication authenticationIndicator(String authenticationIndicator) {
    
    this.authenticationIndicator = authenticationIndicator;
    return this;
  }

  /**
   * Indicates the type of Authentication request  01 - Payment transaction  02 - Recurring transaction  03 - Installment transaction  04 - Add card  05 - Maintain card  06 - Cardholder verification as part of EMV token ID and V 
   * @return authenticationIndicator
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTHENTICATION_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAuthenticationIndicator() {
    return authenticationIndicator;
  }


  @JsonProperty(JSON_PROPERTY_AUTHENTICATION_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAuthenticationIndicator(String authenticationIndicator) {
    this.authenticationIndicator = authenticationIndicator;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreatePaymentRequestConsumerAuthenticationInformationStrongAuthentication createPaymentRequestConsumerAuthenticationInformationStrongAuthentication = (CreatePaymentRequestConsumerAuthenticationInformationStrongAuthentication) o;
    return Objects.equals(this.issuerInformation, createPaymentRequestConsumerAuthenticationInformationStrongAuthentication.issuerInformation) &&
        Objects.equals(this.lowValueExemptionIndicator, createPaymentRequestConsumerAuthenticationInformationStrongAuthentication.lowValueExemptionIndicator) &&
        Objects.equals(this.riskAnalysisExemptionIndicator, createPaymentRequestConsumerAuthenticationInformationStrongAuthentication.riskAnalysisExemptionIndicator) &&
        Objects.equals(this.trustedMerchantExemptionIndicator, createPaymentRequestConsumerAuthenticationInformationStrongAuthentication.trustedMerchantExemptionIndicator) &&
        Objects.equals(this.secureCorporatePaymentIndicator, createPaymentRequestConsumerAuthenticationInformationStrongAuthentication.secureCorporatePaymentIndicator) &&
        Objects.equals(this.delegatedAuthenticationExemptionIndicator, createPaymentRequestConsumerAuthenticationInformationStrongAuthentication.delegatedAuthenticationExemptionIndicator) &&
        Objects.equals(this.outageExemptionIndicator, createPaymentRequestConsumerAuthenticationInformationStrongAuthentication.outageExemptionIndicator) &&
        Objects.equals(this.authenticationIndicator, createPaymentRequestConsumerAuthenticationInformationStrongAuthentication.authenticationIndicator);
  }

  @Override
  public int hashCode() {
    return Objects.hash(issuerInformation, lowValueExemptionIndicator, riskAnalysisExemptionIndicator, trustedMerchantExemptionIndicator, secureCorporatePaymentIndicator, delegatedAuthenticationExemptionIndicator, outageExemptionIndicator, authenticationIndicator);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreatePaymentRequestConsumerAuthenticationInformationStrongAuthentication {\n");
    sb.append("    issuerInformation: ").append(toIndentedString(issuerInformation)).append("\n");
    sb.append("    lowValueExemptionIndicator: ").append(toIndentedString(lowValueExemptionIndicator)).append("\n");
    sb.append("    riskAnalysisExemptionIndicator: ").append(toIndentedString(riskAnalysisExemptionIndicator)).append("\n");
    sb.append("    trustedMerchantExemptionIndicator: ").append(toIndentedString(trustedMerchantExemptionIndicator)).append("\n");
    sb.append("    secureCorporatePaymentIndicator: ").append(toIndentedString(secureCorporatePaymentIndicator)).append("\n");
    sb.append("    delegatedAuthenticationExemptionIndicator: ").append(toIndentedString(delegatedAuthenticationExemptionIndicator)).append("\n");
    sb.append("    outageExemptionIndicator: ").append(toIndentedString(outageExemptionIndicator)).append("\n");
    sb.append("    authenticationIndicator: ").append(toIndentedString(authenticationIndicator)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

