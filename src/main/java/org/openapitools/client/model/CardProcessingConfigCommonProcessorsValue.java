/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.CardProcessingConfigCommonProcessorsValueAcquirer;
import org.openapitools.client.model.CardProcessingConfigCommonProcessorsValueCurrenciesValue;
import org.openapitools.client.model.CardProcessingConfigCommonProcessorsValuePaymentTypesValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CardProcessingConfigCommonProcessorsValue
 */
@JsonPropertyOrder({
  CardProcessingConfigCommonProcessorsValue.JSON_PROPERTY_BATCH_GROUP,
  CardProcessingConfigCommonProcessorsValue.JSON_PROPERTY_BUSINESS_APPLICATION_ID,
  CardProcessingConfigCommonProcessorsValue.JSON_PROPERTY_MERCHANT_VERIFICATION_VALUE,
  CardProcessingConfigCommonProcessorsValue.JSON_PROPERTY_ABA_NUMBER,
  CardProcessingConfigCommonProcessorsValue.JSON_PROPERTY_ACQUIRER,
  CardProcessingConfigCommonProcessorsValue.JSON_PROPERTY_MERCHANT_ID,
  CardProcessingConfigCommonProcessorsValue.JSON_PROPERTY_TERMINAL_ID,
  CardProcessingConfigCommonProcessorsValue.JSON_PROPERTY_PAYMENT_TYPES,
  CardProcessingConfigCommonProcessorsValue.JSON_PROPERTY_CURRENCIES,
  CardProcessingConfigCommonProcessorsValue.JSON_PROPERTY_VISA_AGGREGATOR_ID,
  CardProcessingConfigCommonProcessorsValue.JSON_PROPERTY_AMEX_AGGREGATOR_ID,
  CardProcessingConfigCommonProcessorsValue.JSON_PROPERTY_MASTER_CARD_AGGREGATOR_ID,
  CardProcessingConfigCommonProcessorsValue.JSON_PROPERTY_SIC_CODE,
  CardProcessingConfigCommonProcessorsValue.JSON_PROPERTY_ALLOW_MULTIPLE_BILLS,
  CardProcessingConfigCommonProcessorsValue.JSON_PROPERTY_ALLOW_MERCHANT_DESCRIPTOR_OVERRIDE,
  CardProcessingConfigCommonProcessorsValue.JSON_PROPERTY_ENHANCED_DATA,
  CardProcessingConfigCommonProcessorsValue.JSON_PROPERTY_FIRE_SAFETY_INDICATOR,
  CardProcessingConfigCommonProcessorsValue.JSON_PROPERTY_QUASI_CASH,
  CardProcessingConfigCommonProcessorsValue.JSON_PROPERTY_ACQUIRER_MERCHANT_ID,
  CardProcessingConfigCommonProcessorsValue.JSON_PROPERTY_AVS_FORMAT,
  CardProcessingConfigCommonProcessorsValue.JSON_PROPERTY_ENABLE_LONG_TRANS_REF_NO,
  CardProcessingConfigCommonProcessorsValue.JSON_PROPERTY_ENABLE_LEVEL2,
  CardProcessingConfigCommonProcessorsValue.JSON_PROPERTY_ENABLE_MULTIPLE_TRANSACTION_ADVICE_ADDENDUM,
  CardProcessingConfigCommonProcessorsValue.JSON_PROPERTY_AMEX_TRANSACTION_ADVICE_ADDENDUM1,
  CardProcessingConfigCommonProcessorsValue.JSON_PROPERTY_ENABLE_MULTI_LINE_ITEMS,
  CardProcessingConfigCommonProcessorsValue.JSON_PROPERTY_ENABLE_TRANSACTION_REFERENCE_NUMBER,
  CardProcessingConfigCommonProcessorsValue.JSON_PROPERTY_ENABLE_AUTO_AUTH_REVERSAL_AFTER_VOID,
  CardProcessingConfigCommonProcessorsValue.JSON_PROPERTY_ENABLE_EXPRESSPAY_PAN_TRANSLATION,
  CardProcessingConfigCommonProcessorsValue.JSON_PROPERTY_ENABLE_CREDIT_AUTH,
  CardProcessingConfigCommonProcessorsValue.JSON_PROPERTY_INDUSTRY_CODE,
  CardProcessingConfigCommonProcessorsValue.JSON_PROPERTY_SEND_AMEX_LEVEL2_DATA,
  CardProcessingConfigCommonProcessorsValue.JSON_PROPERTY_SOFT_DESCRIPTOR_TYPE,
  CardProcessingConfigCommonProcessorsValue.JSON_PROPERTY_VITAL_NUMBER,
  CardProcessingConfigCommonProcessorsValue.JSON_PROPERTY_BANK_NUMBER,
  CardProcessingConfigCommonProcessorsValue.JSON_PROPERTY_CHAIN_NUMBER,
  CardProcessingConfigCommonProcessorsValue.JSON_PROPERTY_MERCHANT_BIN_NUMBER,
  CardProcessingConfigCommonProcessorsValue.JSON_PROPERTY_MERCHANT_LOCATION_NUMBER,
  CardProcessingConfigCommonProcessorsValue.JSON_PROPERTY_STORE_I_D,
  CardProcessingConfigCommonProcessorsValue.JSON_PROPERTY_TRAVEL_AGENCY_CODE,
  CardProcessingConfigCommonProcessorsValue.JSON_PROPERTY_TRAVEL_AGENCY_NAME,
  CardProcessingConfigCommonProcessorsValue.JSON_PROPERTY_SETTLEMENT_CURRENCY,
  CardProcessingConfigCommonProcessorsValue.JSON_PROPERTY_ENABLE_LEAST_COST_ROUTING,
  CardProcessingConfigCommonProcessorsValue.JSON_PROPERTY_ENABLE_C_V_V_RESPONSE_INDICATOR,
  CardProcessingConfigCommonProcessorsValue.JSON_PROPERTY_ENABLE_MULTI_CURRENCY_PROCESSING,
  CardProcessingConfigCommonProcessorsValue.JSON_PROPERTY_ENABLE_POS_NETWORK_SWITCHING,
  CardProcessingConfigCommonProcessorsValue.JSON_PROPERTY_ENABLE_DYNAMIC_CURRENCY_CONVERSION,
  CardProcessingConfigCommonProcessorsValue.JSON_PROPERTY_MERCHANT_TIER
})
@JsonTypeName("CardProcessingConfig_common_processors_value")
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T19:17:21.826843+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class CardProcessingConfigCommonProcessorsValue {
  public static final String JSON_PROPERTY_BATCH_GROUP = "batchGroup";
  private String batchGroup;

  public static final String JSON_PROPERTY_BUSINESS_APPLICATION_ID = "businessApplicationId";
  private String businessApplicationId;

  public static final String JSON_PROPERTY_MERCHANT_VERIFICATION_VALUE = "merchantVerificationValue";
  private String merchantVerificationValue;

  public static final String JSON_PROPERTY_ABA_NUMBER = "abaNumber";
  private String abaNumber;

  public static final String JSON_PROPERTY_ACQUIRER = "acquirer";
  private CardProcessingConfigCommonProcessorsValueAcquirer acquirer;

  public static final String JSON_PROPERTY_MERCHANT_ID = "merchantId";
  private String merchantId;

  public static final String JSON_PROPERTY_TERMINAL_ID = "terminalId";
  private String terminalId;

  public static final String JSON_PROPERTY_PAYMENT_TYPES = "paymentTypes";
  private Map<String, CardProcessingConfigCommonProcessorsValuePaymentTypesValue> paymentTypes = new HashMap<>();

  public static final String JSON_PROPERTY_CURRENCIES = "currencies";
  private Map<String, CardProcessingConfigCommonProcessorsValueCurrenciesValue> currencies = new HashMap<>();

  public static final String JSON_PROPERTY_VISA_AGGREGATOR_ID = "visaAggregatorId";
  private String visaAggregatorId;

  public static final String JSON_PROPERTY_AMEX_AGGREGATOR_ID = "amexAggregatorId";
  private String amexAggregatorId;

  public static final String JSON_PROPERTY_MASTER_CARD_AGGREGATOR_ID = "masterCardAggregatorId";
  private String masterCardAggregatorId;

  public static final String JSON_PROPERTY_SIC_CODE = "sicCode";
  private String sicCode;

  public static final String JSON_PROPERTY_ALLOW_MULTIPLE_BILLS = "allowMultipleBills";
  private Boolean allowMultipleBills;

  public static final String JSON_PROPERTY_ALLOW_MERCHANT_DESCRIPTOR_OVERRIDE = "allowMerchantDescriptorOverride";
  private Boolean allowMerchantDescriptorOverride;

  public static final String JSON_PROPERTY_ENHANCED_DATA = "enhancedData";
  private String enhancedData;

  public static final String JSON_PROPERTY_FIRE_SAFETY_INDICATOR = "fireSafetyIndicator";
  private Boolean fireSafetyIndicator;

  public static final String JSON_PROPERTY_QUASI_CASH = "quasiCash";
  private Boolean quasiCash;

  public static final String JSON_PROPERTY_ACQUIRER_MERCHANT_ID = "acquirerMerchantId";
  private String acquirerMerchantId;

  public static final String JSON_PROPERTY_AVS_FORMAT = "avsFormat";
  private String avsFormat;

  public static final String JSON_PROPERTY_ENABLE_LONG_TRANS_REF_NO = "enableLongTransRefNo";
  private Boolean enableLongTransRefNo;

  public static final String JSON_PROPERTY_ENABLE_LEVEL2 = "enableLevel2";
  private Boolean enableLevel2;

  public static final String JSON_PROPERTY_ENABLE_MULTIPLE_TRANSACTION_ADVICE_ADDENDUM = "enableMultipleTransactionAdviceAddendum";
  private Boolean enableMultipleTransactionAdviceAddendum;

  public static final String JSON_PROPERTY_AMEX_TRANSACTION_ADVICE_ADDENDUM1 = "amexTransactionAdviceAddendum1";
  private String amexTransactionAdviceAddendum1;

  public static final String JSON_PROPERTY_ENABLE_MULTI_LINE_ITEMS = "enableMultiLineItems";
  private Boolean enableMultiLineItems;

  public static final String JSON_PROPERTY_ENABLE_TRANSACTION_REFERENCE_NUMBER = "enableTransactionReferenceNumber";
  private Boolean enableTransactionReferenceNumber;

  public static final String JSON_PROPERTY_ENABLE_AUTO_AUTH_REVERSAL_AFTER_VOID = "enableAutoAuthReversalAfterVoid";
  private Boolean enableAutoAuthReversalAfterVoid;

  public static final String JSON_PROPERTY_ENABLE_EXPRESSPAY_PAN_TRANSLATION = "enableExpresspayPanTranslation";
  private Boolean enableExpresspayPanTranslation;

  public static final String JSON_PROPERTY_ENABLE_CREDIT_AUTH = "enableCreditAuth";
  private Boolean enableCreditAuth;

  /**
   * Field used to identify the industry type of the merchant submitting the authorization request.  Valid values: &#x60;0&#x60; – unknown or unsure &#x60;A&#x60; – auto rental (EMV supported) &#x60;B&#x60; – bank/financial institution (EMV supported) &#x60;D&#x60; – direct marketing &#x60;F&#x60; – food/restaurant (EMV supported) &#x60;G&#x60; – grocery store/super market (EMV supported) &#x60;H&#x60; – hotel (EMV supported) &#x60;L&#x60; – limited amount terminal (EMV supported) &#x60;O&#x60; – oil company/automated fueling system (EMV supported) &#x60;P&#x60; – passenger transport (EMV supported) &#x60;R&#x60; – retail (EMV supported) Applicable for TSYS (tsys), RUPAY and Elavon Americas (elavonamericas) processors. 
   */
  public enum IndustryCodeEnum {
    _0("0"),
    
    A("A"),
    
    B("B"),
    
    D("D"),
    
    F("F"),
    
    G("G"),
    
    H("H"),
    
    L("L"),
    
    O("O"),
    
    P("P"),
    
    R("R");

    private String value;

    IndustryCodeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static IndustryCodeEnum fromValue(String value) {
      for (IndustryCodeEnum b : IndustryCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_INDUSTRY_CODE = "industryCode";
  private IndustryCodeEnum industryCode;

  public static final String JSON_PROPERTY_SEND_AMEX_LEVEL2_DATA = "sendAmexLevel2Data";
  private Boolean sendAmexLevel2Data;

  public static final String JSON_PROPERTY_SOFT_DESCRIPTOR_TYPE = "softDescriptorType";
  private String softDescriptorType;

  public static final String JSON_PROPERTY_VITAL_NUMBER = "vitalNumber";
  private String vitalNumber;

  public static final String JSON_PROPERTY_BANK_NUMBER = "bankNumber";
  private String bankNumber;

  public static final String JSON_PROPERTY_CHAIN_NUMBER = "chainNumber";
  private String chainNumber;

  public static final String JSON_PROPERTY_MERCHANT_BIN_NUMBER = "merchantBinNumber";
  private String merchantBinNumber;

  public static final String JSON_PROPERTY_MERCHANT_LOCATION_NUMBER = "merchantLocationNumber";
  private String merchantLocationNumber;

  public static final String JSON_PROPERTY_STORE_I_D = "storeID";
  private String storeID;

  public static final String JSON_PROPERTY_TRAVEL_AGENCY_CODE = "travelAgencyCode";
  private String travelAgencyCode;

  public static final String JSON_PROPERTY_TRAVEL_AGENCY_NAME = "travelAgencyName";
  private String travelAgencyName;

  public static final String JSON_PROPERTY_SETTLEMENT_CURRENCY = "settlementCurrency";
  private String settlementCurrency;

  public static final String JSON_PROPERTY_ENABLE_LEAST_COST_ROUTING = "enableLeastCostRouting";
  private Boolean enableLeastCostRouting;

  public static final String JSON_PROPERTY_ENABLE_C_V_V_RESPONSE_INDICATOR = "enableCVVResponseIndicator";
  private Boolean enableCVVResponseIndicator;

  public static final String JSON_PROPERTY_ENABLE_MULTI_CURRENCY_PROCESSING = "enableMultiCurrencyProcessing";
  private String enableMultiCurrencyProcessing;

  public static final String JSON_PROPERTY_ENABLE_POS_NETWORK_SWITCHING = "enablePosNetworkSwitching";
  private Boolean enablePosNetworkSwitching;

  public static final String JSON_PROPERTY_ENABLE_DYNAMIC_CURRENCY_CONVERSION = "enableDynamicCurrencyConversion";
  private Boolean enableDynamicCurrencyConversion;

  public static final String JSON_PROPERTY_MERCHANT_TIER = "merchantTier";
  private String merchantTier;

  public CardProcessingConfigCommonProcessorsValue() {
  }

  public CardProcessingConfigCommonProcessorsValue batchGroup(String batchGroup) {
    
    this.batchGroup = batchGroup;
    return this;
  }

  /**
   * Determines the batching group that separates merchants for special batching times. Batching groups can separate merchant batches by the following criteria:  * Timezone * Merchant deadlines * Large merchants (top 10) * Merchants with Service-Level Agreements  Applicable for Chase Paymentech Salem (chasepaymentechsalem), Streamline (streamline2), Six (six), Barclays (barclays2), Paymentech Tampa (paymentechtampa), CMCIC (cmcic), FDC Nashville (smartfdc), RUPAY, American Express Direct (amexdirect), GPN (gpn), VPC, GPX (gpx), CB2A, Barclays HISO (barclayshiso), TSYS (tsys) and FDI Global (fdiglobal) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Barclays HISO&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
   * @return batchGroup
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BATCH_GROUP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBatchGroup() {
    return batchGroup;
  }


  @JsonProperty(JSON_PROPERTY_BATCH_GROUP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBatchGroup(String batchGroup) {
    this.batchGroup = batchGroup;
  }

  public CardProcessingConfigCommonProcessorsValue businessApplicationId(String businessApplicationId) {
    
    this.businessApplicationId = businessApplicationId;
    return this;
  }

  /**
   * Indicates the type of money transfer used in the transaction. Applicable for VPC and GPX (gpx) processors.
   * @return businessApplicationId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BUSINESS_APPLICATION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBusinessApplicationId() {
    return businessApplicationId;
  }


  @JsonProperty(JSON_PROPERTY_BUSINESS_APPLICATION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBusinessApplicationId(String businessApplicationId) {
    this.businessApplicationId = businessApplicationId;
  }

  public CardProcessingConfigCommonProcessorsValue merchantVerificationValue(String merchantVerificationValue) {
    
    this.merchantVerificationValue = merchantVerificationValue;
    return this;
  }

  /**
   * Identify merchants that participate in Select Merchant Fee (SMF) programs. Unique to the merchant. Applicable for GPX (gpx) and VPC processors.
   * @return merchantVerificationValue
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MERCHANT_VERIFICATION_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMerchantVerificationValue() {
    return merchantVerificationValue;
  }


  @JsonProperty(JSON_PROPERTY_MERCHANT_VERIFICATION_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMerchantVerificationValue(String merchantVerificationValue) {
    this.merchantVerificationValue = merchantVerificationValue;
  }

  public CardProcessingConfigCommonProcessorsValue abaNumber(String abaNumber) {
    
    this.abaNumber = abaNumber;
    return this;
  }

  /**
   * Routing Number to identify banks within the United States. Applicable for GPX (gpx) processors.
   * @return abaNumber
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ABA_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAbaNumber() {
    return abaNumber;
  }


  @JsonProperty(JSON_PROPERTY_ABA_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAbaNumber(String abaNumber) {
    this.abaNumber = abaNumber;
  }

  public CardProcessingConfigCommonProcessorsValue acquirer(CardProcessingConfigCommonProcessorsValueAcquirer acquirer) {
    
    this.acquirer = acquirer;
    return this;
  }

  /**
   * Get acquirer
   * @return acquirer
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACQUIRER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CardProcessingConfigCommonProcessorsValueAcquirer getAcquirer() {
    return acquirer;
  }


  @JsonProperty(JSON_PROPERTY_ACQUIRER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAcquirer(CardProcessingConfigCommonProcessorsValueAcquirer acquirer) {
    this.acquirer = acquirer;
  }

  public CardProcessingConfigCommonProcessorsValue merchantId(String merchantId) {
    
    this.merchantId = merchantId;
    return this;
  }

  /**
   * Merchant ID assigned by an acquirer or a processor. Should not be overriden by any other party.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Min. Length&lt;/th&gt;&lt;th&gt;Max. Length&lt;/th&gt;&lt;th&gt;Regex&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays HISO&lt;/td&gt;&lt;td&gt;cp, cnp, hybrid&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;15&lt;/td&gt;&lt;td&gt;^[0-9a-zA-Z]+$&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Barclays&lt;/td&gt;&lt;td&gt;cp, cnp, hybrid&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;11&lt;/td&gt;&lt;td&gt;^[0-9a-zA-Z]+$&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
   * @return merchantId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MERCHANT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMerchantId() {
    return merchantId;
  }


  @JsonProperty(JSON_PROPERTY_MERCHANT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }

  public CardProcessingConfigCommonProcessorsValue terminalId(String terminalId) {
    
    this.terminalId = terminalId;
    return this;
  }

  /**
   * The &#39;Terminal Id&#39; aka TID, is an identifier used for with your payments processor. Depending on the processor and payment acceptance type this may also be the default Terminal ID used for Card Present and Virtual Terminal transactions.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Min. Length&lt;/th&gt;&lt;th&gt;Max. Length&lt;/th&gt;&lt;th&gt;Regex&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays HISO&lt;/td&gt;&lt;td&gt;cnp, hybrid&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;16&lt;/td&gt;&lt;td&gt;^[0-9a-zA-Z]+$&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Barclays HISO&lt;/td&gt;&lt;td&gt;cp&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;16&lt;/td&gt;&lt;td&gt;^[0-9a-zA-Z]+$&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
   * @return terminalId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TERMINAL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTerminalId() {
    return terminalId;
  }


  @JsonProperty(JSON_PROPERTY_TERMINAL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTerminalId(String terminalId) {
    this.terminalId = terminalId;
  }

  public CardProcessingConfigCommonProcessorsValue paymentTypes(Map<String, CardProcessingConfigCommonProcessorsValuePaymentTypesValue> paymentTypes) {
    
    this.paymentTypes = paymentTypes;
    return this;
  }

  public CardProcessingConfigCommonProcessorsValue putPaymentTypesItem(String key, CardProcessingConfigCommonProcessorsValuePaymentTypesValue paymentTypesItem) {
    if (this.paymentTypes == null) {
      this.paymentTypes = new HashMap<>();
    }
    this.paymentTypes.put(key, paymentTypesItem);
    return this;
  }

  /**
   * Valid values are: * VISA * MASTERCARD * AMERICAN_EXPRESS * CUP * EFTPOS * DINERS_CLUB * DISCOVER * JCB 
   * @return paymentTypes
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAYMENT_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, CardProcessingConfigCommonProcessorsValuePaymentTypesValue> getPaymentTypes() {
    return paymentTypes;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentTypes(Map<String, CardProcessingConfigCommonProcessorsValuePaymentTypesValue> paymentTypes) {
    this.paymentTypes = paymentTypes;
  }

  public CardProcessingConfigCommonProcessorsValue currencies(Map<String, CardProcessingConfigCommonProcessorsValueCurrenciesValue> currencies) {
    
    this.currencies = currencies;
    return this;
  }

  public CardProcessingConfigCommonProcessorsValue putCurrenciesItem(String key, CardProcessingConfigCommonProcessorsValueCurrenciesValue currenciesItem) {
    if (this.currencies == null) {
      this.currencies = new HashMap<>();
    }
    this.currencies.put(key, currenciesItem);
    return this;
  }

  /**
   * Three-character [ISO 4217 ALPHA-3 Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)
   * @return currencies
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CURRENCIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, CardProcessingConfigCommonProcessorsValueCurrenciesValue> getCurrencies() {
    return currencies;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrencies(Map<String, CardProcessingConfigCommonProcessorsValueCurrenciesValue> currencies) {
    this.currencies = currencies;
  }

  public CardProcessingConfigCommonProcessorsValue visaAggregatorId(String visaAggregatorId) {
    
    this.visaAggregatorId = visaAggregatorId;
    return this;
  }

  /**
   * This field is used as aggregator Id when Visa payment type is selected
   * @return visaAggregatorId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VISA_AGGREGATOR_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getVisaAggregatorId() {
    return visaAggregatorId;
  }


  @JsonProperty(JSON_PROPERTY_VISA_AGGREGATOR_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVisaAggregatorId(String visaAggregatorId) {
    this.visaAggregatorId = visaAggregatorId;
  }

  public CardProcessingConfigCommonProcessorsValue amexAggregatorId(String amexAggregatorId) {
    
    this.amexAggregatorId = amexAggregatorId;
    return this;
  }

  /**
   * This field is used as aggregator Id when Amex payment type is selected
   * @return amexAggregatorId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AMEX_AGGREGATOR_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAmexAggregatorId() {
    return amexAggregatorId;
  }


  @JsonProperty(JSON_PROPERTY_AMEX_AGGREGATOR_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAmexAggregatorId(String amexAggregatorId) {
    this.amexAggregatorId = amexAggregatorId;
  }

  public CardProcessingConfigCommonProcessorsValue masterCardAggregatorId(String masterCardAggregatorId) {
    
    this.masterCardAggregatorId = masterCardAggregatorId;
    return this;
  }

  /**
   * This field is used as aggregator Id when Master Card payment type is selected
   * @return masterCardAggregatorId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MASTER_CARD_AGGREGATOR_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMasterCardAggregatorId() {
    return masterCardAggregatorId;
  }


  @JsonProperty(JSON_PROPERTY_MASTER_CARD_AGGREGATOR_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMasterCardAggregatorId(String masterCardAggregatorId) {
    this.masterCardAggregatorId = masterCardAggregatorId;
  }

  public CardProcessingConfigCommonProcessorsValue sicCode(String sicCode) {
    
    this.sicCode = sicCode;
    return this;
  }

  /**
   * The Standard Industrial Classification (SIC) are four-digit codes that categorize the industries that companies belong to based on their business activities. Standard Industrial Classification codes were mostly replaced by the six-digit North American Industry Classification System (NAICS). Applicable for VPC and GPX (gpx) processors.
   * @return sicCode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SIC_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSicCode() {
    return sicCode;
  }


  @JsonProperty(JSON_PROPERTY_SIC_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSicCode(String sicCode) {
    this.sicCode = sicCode;
  }

  public CardProcessingConfigCommonProcessorsValue allowMultipleBills(Boolean allowMultipleBills) {
    
    this.allowMultipleBills = allowMultipleBills;
    return this;
  }

  /**
   * Allows multiple captures for a single authorization transaction. Applicable for Paymentech Tampa (paymentechtampa), VPC, American Express Direct (amexdirect) and GPX (gpx) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cp, hybrid&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cnp&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
   * @return allowMultipleBills
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALLOW_MULTIPLE_BILLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAllowMultipleBills() {
    return allowMultipleBills;
  }


  @JsonProperty(JSON_PROPERTY_ALLOW_MULTIPLE_BILLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllowMultipleBills(Boolean allowMultipleBills) {
    this.allowMultipleBills = allowMultipleBills;
  }

  public CardProcessingConfigCommonProcessorsValue allowMerchantDescriptorOverride(Boolean allowMerchantDescriptorOverride) {
    
    this.allowMerchantDescriptorOverride = allowMerchantDescriptorOverride;
    return this;
  }

  /**
   * Enables partner to enable/disable merchant descriptors values. Applicable for VPC, EFTPOS and CUP processors.
   * @return allowMerchantDescriptorOverride
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALLOW_MERCHANT_DESCRIPTOR_OVERRIDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAllowMerchantDescriptorOverride() {
    return allowMerchantDescriptorOverride;
  }


  @JsonProperty(JSON_PROPERTY_ALLOW_MERCHANT_DESCRIPTOR_OVERRIDE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllowMerchantDescriptorOverride(Boolean allowMerchantDescriptorOverride) {
    this.allowMerchantDescriptorOverride = allowMerchantDescriptorOverride;
  }

  public CardProcessingConfigCommonProcessorsValue enhancedData(String enhancedData) {
    
    this.enhancedData = enhancedData;
    return this;
  }

  /**
   * To enable airline transactions. Applicable for TSYS (tsys), VPC, Elavon Americas (elavonamericas), FDI Global (fdiglobal), GPX (gpx), Barclays (barclays2) and American Express Direct (amexdirect) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cp, cnp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
   * @return enhancedData
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENHANCED_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEnhancedData() {
    return enhancedData;
  }


  @JsonProperty(JSON_PROPERTY_ENHANCED_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnhancedData(String enhancedData) {
    this.enhancedData = enhancedData;
  }

  public CardProcessingConfigCommonProcessorsValue fireSafetyIndicator(Boolean fireSafetyIndicator) {
    
    this.fireSafetyIndicator = fireSafetyIndicator;
    return this;
  }

  /**
   * Indicates whether the merchant is compliant with Hotel and Motel Fire Safety Act of 1990. Applicable for GPX (gpx) and VPC processors.
   * @return fireSafetyIndicator
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FIRE_SAFETY_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getFireSafetyIndicator() {
    return fireSafetyIndicator;
  }


  @JsonProperty(JSON_PROPERTY_FIRE_SAFETY_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFireSafetyIndicator(Boolean fireSafetyIndicator) {
    this.fireSafetyIndicator = fireSafetyIndicator;
  }

  public CardProcessingConfigCommonProcessorsValue quasiCash(Boolean quasiCash) {
    
    this.quasiCash = quasiCash;
    return this;
  }

  /**
   * To enable quasi-cash transactions. A quasi-cash transaction is a cash-like transaction for the sale of items that are directly convertible to cash, such as:- Casino gaming chips, Money orders, Wire transfers.  Applicable for GPX (gpx), TSYS (tsys), Barclays (barclays2) and VPC processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
   * @return quasiCash
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_QUASI_CASH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getQuasiCash() {
    return quasiCash;
  }


  @JsonProperty(JSON_PROPERTY_QUASI_CASH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQuasiCash(Boolean quasiCash) {
    this.quasiCash = quasiCash;
  }

  public CardProcessingConfigCommonProcessorsValue acquirerMerchantId(String acquirerMerchantId) {
    
    this.acquirerMerchantId = acquirerMerchantId;
    return this;
  }

  /**
   * Identifier assigned by the acquirer. Applicable for RUPAY, VPC and Six (six) processors.
   * @return acquirerMerchantId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACQUIRER_MERCHANT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAcquirerMerchantId() {
    return acquirerMerchantId;
  }


  @JsonProperty(JSON_PROPERTY_ACQUIRER_MERCHANT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAcquirerMerchantId(String acquirerMerchantId) {
    this.acquirerMerchantId = acquirerMerchantId;
  }

  public CardProcessingConfigCommonProcessorsValue avsFormat(String avsFormat) {
    
    this.avsFormat = avsFormat;
    return this;
  }

  /**
   * Enables Enhanced AVS/Automated Address Verification Plus (AAV+).  Valid values: \&quot;basic\&quot; - Standard address verification system.   When a processor supports AVS for a transaction&#39;s card type, the issuing bank uses AVS to confirm that the customer has provided the correct billing address.   When a customer provides incorrect information, the transaction might be fraudulent. \&quot;basic + name\&quot; - Enhanced address verification system.   Consists of the standard AVS functionality plus verification of some additional fields.   The additional fields that are verified for Enhanced AVS are:   - customer_firstname   - customer_lastname \&quot;basic + name + shipto\&quot; - Automated address verification plus.   Consists of the Enhanced AVS functionality plus verification of some additional fields.   AAV+ intended for merchants who deliver physical goods to a different address than the billing address.   AAV+ verifies the additional fields only when the standard and Enhanced AVS tests pass first.   For information about Enhanced AVS - The additional fields that are verified for AAV+ are:   - ship_to_firstname   - ship_to_lastname   - ship_to_address1   - ship_to_country   - ship_to_zip   - ship_to_phone   - customer_phone(American Express Direct only)  Applicable for American Express Direct (amexdirect) processor.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;basic&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
   * @return avsFormat
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AVS_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAvsFormat() {
    return avsFormat;
  }


  @JsonProperty(JSON_PROPERTY_AVS_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAvsFormat(String avsFormat) {
    this.avsFormat = avsFormat;
  }

  public CardProcessingConfigCommonProcessorsValue enableLongTransRefNo(Boolean enableLongTransRefNo) {
    
    this.enableLongTransRefNo = enableLongTransRefNo;
    return this;
  }

  /**
   * Amex Direct specific merchant config value which determines what length (either 9 or Unique 12-char reference number) of reference number will be CYBS generated if the merchant does not pass in a trans_ref_no. Can be any combination of alpha, numeric and special characters, and/or binary data in hexadecimal.  Applicable for American Express Direct (amexdirect) processor.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cp, cnp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
   * @return enableLongTransRefNo
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_LONG_TRANS_REF_NO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnableLongTransRefNo() {
    return enableLongTransRefNo;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_LONG_TRANS_REF_NO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableLongTransRefNo(Boolean enableLongTransRefNo) {
    this.enableLongTransRefNo = enableLongTransRefNo;
  }

  public CardProcessingConfigCommonProcessorsValue enableLevel2(Boolean enableLevel2) {
    
    this.enableLevel2 = enableLevel2;
    return this;
  }

  /**
   * Field that indicates whether merchant will send level 2 data for Amex cards. Applicable for American Express Direct (amexdirect) processor.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cp, cnp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
   * @return enableLevel2
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_LEVEL2)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnableLevel2() {
    return enableLevel2;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_LEVEL2)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableLevel2(Boolean enableLevel2) {
    this.enableLevel2 = enableLevel2;
  }

  public CardProcessingConfigCommonProcessorsValue enableMultipleTransactionAdviceAddendum(Boolean enableMultipleTransactionAdviceAddendum) {
    
    this.enableMultipleTransactionAdviceAddendum = enableMultipleTransactionAdviceAddendum;
    return this;
  }

  /**
   * This flag related to multiple transaction advice addendum field. It is used to display descriptive information about a transaction on customer&#39;s American Express card statement. Applicable for American Express Direct (amexdirect) processor.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cp, cnp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
   * @return enableMultipleTransactionAdviceAddendum
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_MULTIPLE_TRANSACTION_ADVICE_ADDENDUM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnableMultipleTransactionAdviceAddendum() {
    return enableMultipleTransactionAdviceAddendum;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_MULTIPLE_TRANSACTION_ADVICE_ADDENDUM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableMultipleTransactionAdviceAddendum(Boolean enableMultipleTransactionAdviceAddendum) {
    this.enableMultipleTransactionAdviceAddendum = enableMultipleTransactionAdviceAddendum;
  }

  public CardProcessingConfigCommonProcessorsValue amexTransactionAdviceAddendum1(String amexTransactionAdviceAddendum1) {
    
    this.amexTransactionAdviceAddendum1 = amexTransactionAdviceAddendum1;
    return this;
  }

  /**
   * Advice addendum field. It is used to display descriptive information about a transaction on customer&#39;s American Express card statement. Applicable for TSYS (tsys), FDI Global (fdiglobal) and American Express Direct (amexdirect) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Min. Length&lt;/th&gt;&lt;th&gt;Max. Length&lt;/th&gt;&lt;th&gt;Regex&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;40&lt;/td&gt;&lt;td&gt;^[0-9a-zA-Z&amp;#92;-\\s.]+$&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
   * @return amexTransactionAdviceAddendum1
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AMEX_TRANSACTION_ADVICE_ADDENDUM1)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAmexTransactionAdviceAddendum1() {
    return amexTransactionAdviceAddendum1;
  }


  @JsonProperty(JSON_PROPERTY_AMEX_TRANSACTION_ADVICE_ADDENDUM1)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAmexTransactionAdviceAddendum1(String amexTransactionAdviceAddendum1) {
    this.amexTransactionAdviceAddendum1 = amexTransactionAdviceAddendum1;
  }

  public CardProcessingConfigCommonProcessorsValue enableMultiLineItems(Boolean enableMultiLineItems) {
    
    this.enableMultiLineItems = enableMultiLineItems;
    return this;
  }

  /**
   * This flag is related to offer/line item details to be included instead of sending one line item, and a grand total. Example, offer0, offer 1...offer n. Applicable for American Express Direct (amexdirect) and Elavon Americas (elavonamericas) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cp, cnp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
   * @return enableMultiLineItems
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_MULTI_LINE_ITEMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnableMultiLineItems() {
    return enableMultiLineItems;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_MULTI_LINE_ITEMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableMultiLineItems(Boolean enableMultiLineItems) {
    this.enableMultiLineItems = enableMultiLineItems;
  }

  public CardProcessingConfigCommonProcessorsValue enableTransactionReferenceNumber(Boolean enableTransactionReferenceNumber) {
    
    this.enableTransactionReferenceNumber = enableTransactionReferenceNumber;
    return this;
  }

  /**
   * To enable merchant to send in transaction reference number (unique reconciliation ID). Applicable for VPC, Vero (vero), FDI Global (fdiglobal), Six (six), CB2A, CUP, VPC, Chase Paymentech Salem (chasepaymentechsalem), Fiserv (fiserv), Elavon Americas (elavonamericas) and EFTPOS processors.
   * @return enableTransactionReferenceNumber
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_TRANSACTION_REFERENCE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnableTransactionReferenceNumber() {
    return enableTransactionReferenceNumber;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_TRANSACTION_REFERENCE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableTransactionReferenceNumber(Boolean enableTransactionReferenceNumber) {
    this.enableTransactionReferenceNumber = enableTransactionReferenceNumber;
  }

  public CardProcessingConfigCommonProcessorsValue enableAutoAuthReversalAfterVoid(Boolean enableAutoAuthReversalAfterVoid) {
    
    this.enableAutoAuthReversalAfterVoid = enableAutoAuthReversalAfterVoid;
    return this;
  }

  /**
   * Enables to meet the Visa mandate requirements to reverse unused authorizations, benefitting the customer by releasing the hold on unused credit card funds. Applicable for CB2A, Elavon Americas (elavonamericas), Six (six), VPC and American Express Direct (amexdirect) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cp, cnp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
   * @return enableAutoAuthReversalAfterVoid
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_AUTO_AUTH_REVERSAL_AFTER_VOID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnableAutoAuthReversalAfterVoid() {
    return enableAutoAuthReversalAfterVoid;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_AUTO_AUTH_REVERSAL_AFTER_VOID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableAutoAuthReversalAfterVoid(Boolean enableAutoAuthReversalAfterVoid) {
    this.enableAutoAuthReversalAfterVoid = enableAutoAuthReversalAfterVoid;
  }

  public CardProcessingConfigCommonProcessorsValue enableExpresspayPanTranslation(Boolean enableExpresspayPanTranslation) {
    
    this.enableExpresspayPanTranslation = enableExpresspayPanTranslation;
    return this;
  }

  /**
   * When this is enabled, authorization responses from American Express expresspay transactions include the Primary Account Number (PAN) and expiration date of the card. Applicable for American Express Direct (amexdirect) processor.
   * @return enableExpresspayPanTranslation
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_EXPRESSPAY_PAN_TRANSLATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnableExpresspayPanTranslation() {
    return enableExpresspayPanTranslation;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_EXPRESSPAY_PAN_TRANSLATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableExpresspayPanTranslation(Boolean enableExpresspayPanTranslation) {
    this.enableExpresspayPanTranslation = enableExpresspayPanTranslation;
  }

  public CardProcessingConfigCommonProcessorsValue enableCreditAuth(Boolean enableCreditAuth) {
    
    this.enableCreditAuth = enableCreditAuth;
    return this;
  }

  /**
   * Authorizes a credit. Reduces refund chargebacks and prevents customers from seeing the online update for credits which are otherwise offline settlements.
   * @return enableCreditAuth
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_CREDIT_AUTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnableCreditAuth() {
    return enableCreditAuth;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_CREDIT_AUTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableCreditAuth(Boolean enableCreditAuth) {
    this.enableCreditAuth = enableCreditAuth;
  }

  public CardProcessingConfigCommonProcessorsValue industryCode(IndustryCodeEnum industryCode) {
    
    this.industryCode = industryCode;
    return this;
  }

  /**
   * Field used to identify the industry type of the merchant submitting the authorization request.  Valid values: &#x60;0&#x60; – unknown or unsure &#x60;A&#x60; – auto rental (EMV supported) &#x60;B&#x60; – bank/financial institution (EMV supported) &#x60;D&#x60; – direct marketing &#x60;F&#x60; – food/restaurant (EMV supported) &#x60;G&#x60; – grocery store/super market (EMV supported) &#x60;H&#x60; – hotel (EMV supported) &#x60;L&#x60; – limited amount terminal (EMV supported) &#x60;O&#x60; – oil company/automated fueling system (EMV supported) &#x60;P&#x60; – passenger transport (EMV supported) &#x60;R&#x60; – retail (EMV supported) Applicable for TSYS (tsys), RUPAY and Elavon Americas (elavonamericas) processors. 
   * @return industryCode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INDUSTRY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public IndustryCodeEnum getIndustryCode() {
    return industryCode;
  }


  @JsonProperty(JSON_PROPERTY_INDUSTRY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIndustryCode(IndustryCodeEnum industryCode) {
    this.industryCode = industryCode;
  }

  public CardProcessingConfigCommonProcessorsValue sendAmexLevel2Data(Boolean sendAmexLevel2Data) {
    
    this.sendAmexLevel2Data = sendAmexLevel2Data;
    return this;
  }

  /**
   * Field that indicates whether merchant will send level 2 data for Amex cards. Applicable for TSYS (tsys) processor.
   * @return sendAmexLevel2Data
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SEND_AMEX_LEVEL2_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSendAmexLevel2Data() {
    return sendAmexLevel2Data;
  }


  @JsonProperty(JSON_PROPERTY_SEND_AMEX_LEVEL2_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSendAmexLevel2Data(Boolean sendAmexLevel2Data) {
    this.sendAmexLevel2Data = sendAmexLevel2Data;
  }

  public CardProcessingConfigCommonProcessorsValue softDescriptorType(String softDescriptorType) {
    
    this.softDescriptorType = softDescriptorType;
    return this;
  }

  /**
   * A soft descriptor is a text, rendered on a cardholder&#39;s statement, describing a particular product or service, purchased by the cardholder. Descriptors are intended to help the cardholder identify the products or services purchased. Valid values: &#x60;1&#x60; - trans_ref_no &#x60;2&#x60; - merchant_descriptor &#x60;3&#x60; - trans_ref_no and merchant_descriptor Applicable for TSYS (tsys) processor. 
   * @return softDescriptorType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOFT_DESCRIPTOR_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSoftDescriptorType() {
    return softDescriptorType;
  }


  @JsonProperty(JSON_PROPERTY_SOFT_DESCRIPTOR_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSoftDescriptorType(String softDescriptorType) {
    this.softDescriptorType = softDescriptorType;
  }

  public CardProcessingConfigCommonProcessorsValue vitalNumber(String vitalNumber) {
    
    this.vitalNumber = vitalNumber;
    return this;
  }

  /**
   * V-number provided by TSYS info. The leading &#x60;V&#x60; must be replaced by a &#x60;7&#x60;. For example, replace &#x60;V1234567&#x60; with &#x60;71234567&#x60;. Applicable for TSYS (tsys) processor.
   * @return vitalNumber
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VITAL_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getVitalNumber() {
    return vitalNumber;
  }


  @JsonProperty(JSON_PROPERTY_VITAL_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVitalNumber(String vitalNumber) {
    this.vitalNumber = vitalNumber;
  }

  public CardProcessingConfigCommonProcessorsValue bankNumber(String bankNumber) {
    
    this.bankNumber = bankNumber;
    return this;
  }

  /**
   * 6 digit agent bank number provided by acquirer. Applicable for TSYS (tsys) processor.
   * @return bankNumber
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BANK_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBankNumber() {
    return bankNumber;
  }


  @JsonProperty(JSON_PROPERTY_BANK_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBankNumber(String bankNumber) {
    this.bankNumber = bankNumber;
  }

  public CardProcessingConfigCommonProcessorsValue chainNumber(String chainNumber) {
    
    this.chainNumber = chainNumber;
    return this;
  }

  /**
   * 6 digit chain number provided by acquirer. Applicable for TSYS (tsys) processor.
   * @return chainNumber
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CHAIN_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getChainNumber() {
    return chainNumber;
  }


  @JsonProperty(JSON_PROPERTY_CHAIN_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChainNumber(String chainNumber) {
    this.chainNumber = chainNumber;
  }

  public CardProcessingConfigCommonProcessorsValue merchantBinNumber(String merchantBinNumber) {
    
    this.merchantBinNumber = merchantBinNumber;
    return this;
  }

  /**
   * 6 digits acquirer bank identification number. Applicable for TSYS (tsys) processor.
   * @return merchantBinNumber
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MERCHANT_BIN_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMerchantBinNumber() {
    return merchantBinNumber;
  }


  @JsonProperty(JSON_PROPERTY_MERCHANT_BIN_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMerchantBinNumber(String merchantBinNumber) {
    this.merchantBinNumber = merchantBinNumber;
  }

  public CardProcessingConfigCommonProcessorsValue merchantLocationNumber(String merchantLocationNumber) {
    
    this.merchantLocationNumber = merchantLocationNumber;
    return this;
  }

  /**
   * 5 digit merchant location number. Unless otherwise specified by merchant&#39;s bank or processor, this field should default to 00001. Applicable for TSYS (tsys) processor.
   * @return merchantLocationNumber
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MERCHANT_LOCATION_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMerchantLocationNumber() {
    return merchantLocationNumber;
  }


  @JsonProperty(JSON_PROPERTY_MERCHANT_LOCATION_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMerchantLocationNumber(String merchantLocationNumber) {
    this.merchantLocationNumber = merchantLocationNumber;
  }

  public CardProcessingConfigCommonProcessorsValue storeID(String storeID) {
    
    this.storeID = storeID;
    return this;
  }

  /**
   * 4 digits number used to identify a specific merchant store location within the member systems. Applicable for TSYS (tsys) processor.
   * @return storeID
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STORE_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getStoreID() {
    return storeID;
  }


  @JsonProperty(JSON_PROPERTY_STORE_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStoreID(String storeID) {
    this.storeID = storeID;
  }

  public CardProcessingConfigCommonProcessorsValue travelAgencyCode(String travelAgencyCode) {
    
    this.travelAgencyCode = travelAgencyCode;
    return this;
  }

  /**
   * Contains travel agency code if airline ticket was issued by a travel agency. Applicable for TSYS (tsys) processor.
   * @return travelAgencyCode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRAVEL_AGENCY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTravelAgencyCode() {
    return travelAgencyCode;
  }


  @JsonProperty(JSON_PROPERTY_TRAVEL_AGENCY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTravelAgencyCode(String travelAgencyCode) {
    this.travelAgencyCode = travelAgencyCode;
  }

  public CardProcessingConfigCommonProcessorsValue travelAgencyName(String travelAgencyName) {
    
    this.travelAgencyName = travelAgencyName;
    return this;
  }

  /**
   * Contains travel agency name if airline ticket was issued by travel agency. Applicable for TSYS (tsys) processor.
   * @return travelAgencyName
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRAVEL_AGENCY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTravelAgencyName() {
    return travelAgencyName;
  }


  @JsonProperty(JSON_PROPERTY_TRAVEL_AGENCY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTravelAgencyName(String travelAgencyName) {
    this.travelAgencyName = travelAgencyName;
  }

  public CardProcessingConfigCommonProcessorsValue settlementCurrency(String settlementCurrency) {
    
    this.settlementCurrency = settlementCurrency;
    return this;
  }

  /**
   * This field is used to indicate Merchant&#39;s settlement currency. [ISO 4217 ALPHA-3 Standard Currency Codes] Applicable for TSYS (tsys) and Streamline (streamline2) processors.
   * @return settlementCurrency
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SETTLEMENT_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSettlementCurrency() {
    return settlementCurrency;
  }


  @JsonProperty(JSON_PROPERTY_SETTLEMENT_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSettlementCurrency(String settlementCurrency) {
    this.settlementCurrency = settlementCurrency;
  }

  public CardProcessingConfigCommonProcessorsValue enableLeastCostRouting(Boolean enableLeastCostRouting) {
    
    this.enableLeastCostRouting = enableLeastCostRouting;
    return this;
  }

  /**
   * Indicates whether Least Cost Routing is enabled. Applicable for EFTPOS and CUP processors.
   * @return enableLeastCostRouting
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_LEAST_COST_ROUTING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnableLeastCostRouting() {
    return enableLeastCostRouting;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_LEAST_COST_ROUTING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableLeastCostRouting(Boolean enableLeastCostRouting) {
    this.enableLeastCostRouting = enableLeastCostRouting;
  }

  public CardProcessingConfigCommonProcessorsValue enableCVVResponseIndicator(Boolean enableCVVResponseIndicator) {
    
    this.enableCVVResponseIndicator = enableCVVResponseIndicator;
    return this;
  }

  /**
   * This field denotes EFTPOS Merchant&#39;s choice of receiving CVV Processing Response in return. Applicable for EFTPOS processors.
   * @return enableCVVResponseIndicator
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_C_V_V_RESPONSE_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnableCVVResponseIndicator() {
    return enableCVVResponseIndicator;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_C_V_V_RESPONSE_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableCVVResponseIndicator(Boolean enableCVVResponseIndicator) {
    this.enableCVVResponseIndicator = enableCVVResponseIndicator;
  }

  public CardProcessingConfigCommonProcessorsValue enableMultiCurrencyProcessing(String enableMultiCurrencyProcessing) {
    
    this.enableMultiCurrencyProcessing = enableMultiCurrencyProcessing;
    return this;
  }

  /**
   * Applicable for Barclays (barclays2) processor.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
   * @return enableMultiCurrencyProcessing
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_MULTI_CURRENCY_PROCESSING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEnableMultiCurrencyProcessing() {
    return enableMultiCurrencyProcessing;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_MULTI_CURRENCY_PROCESSING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableMultiCurrencyProcessing(String enableMultiCurrencyProcessing) {
    this.enableMultiCurrencyProcessing = enableMultiCurrencyProcessing;
  }

  public CardProcessingConfigCommonProcessorsValue enablePosNetworkSwitching(Boolean enablePosNetworkSwitching) {
    
    this.enablePosNetworkSwitching = enablePosNetworkSwitching;
    return this;
  }

  /**
   * &#39;POS Network Switching&#39; or &#39;Alternate Routing&#39; means merchant can process PIN Debit transactions without a PIN. Set the value to &#39;Yes&#39; if it is supported. Applicable for FDI Global (fdiglobal) processor.
   * @return enablePosNetworkSwitching
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_POS_NETWORK_SWITCHING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnablePosNetworkSwitching() {
    return enablePosNetworkSwitching;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_POS_NETWORK_SWITCHING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnablePosNetworkSwitching(Boolean enablePosNetworkSwitching) {
    this.enablePosNetworkSwitching = enablePosNetworkSwitching;
  }

  public CardProcessingConfigCommonProcessorsValue enableDynamicCurrencyConversion(Boolean enableDynamicCurrencyConversion) {
    
    this.enableDynamicCurrencyConversion = enableDynamicCurrencyConversion;
    return this;
  }

  /**
   * Enable dynamic currency conversion for a merchant.
   * @return enableDynamicCurrencyConversion
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_DYNAMIC_CURRENCY_CONVERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnableDynamicCurrencyConversion() {
    return enableDynamicCurrencyConversion;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_DYNAMIC_CURRENCY_CONVERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableDynamicCurrencyConversion(Boolean enableDynamicCurrencyConversion) {
    this.enableDynamicCurrencyConversion = enableDynamicCurrencyConversion;
  }

  public CardProcessingConfigCommonProcessorsValue merchantTier(String merchantTier) {
    
    this.merchantTier = merchantTier;
    return this;
  }

  /**
   * Merchant Tier defines the type of merchant, the numeric Merchant Tier value is allocated by EFTPOS. Applicable for EFTPOS processors.
   * @return merchantTier
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MERCHANT_TIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMerchantTier() {
    return merchantTier;
  }


  @JsonProperty(JSON_PROPERTY_MERCHANT_TIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMerchantTier(String merchantTier) {
    this.merchantTier = merchantTier;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardProcessingConfigCommonProcessorsValue cardProcessingConfigCommonProcessorsValue = (CardProcessingConfigCommonProcessorsValue) o;
    return Objects.equals(this.batchGroup, cardProcessingConfigCommonProcessorsValue.batchGroup) &&
        Objects.equals(this.businessApplicationId, cardProcessingConfigCommonProcessorsValue.businessApplicationId) &&
        Objects.equals(this.merchantVerificationValue, cardProcessingConfigCommonProcessorsValue.merchantVerificationValue) &&
        Objects.equals(this.abaNumber, cardProcessingConfigCommonProcessorsValue.abaNumber) &&
        Objects.equals(this.acquirer, cardProcessingConfigCommonProcessorsValue.acquirer) &&
        Objects.equals(this.merchantId, cardProcessingConfigCommonProcessorsValue.merchantId) &&
        Objects.equals(this.terminalId, cardProcessingConfigCommonProcessorsValue.terminalId) &&
        Objects.equals(this.paymentTypes, cardProcessingConfigCommonProcessorsValue.paymentTypes) &&
        Objects.equals(this.currencies, cardProcessingConfigCommonProcessorsValue.currencies) &&
        Objects.equals(this.visaAggregatorId, cardProcessingConfigCommonProcessorsValue.visaAggregatorId) &&
        Objects.equals(this.amexAggregatorId, cardProcessingConfigCommonProcessorsValue.amexAggregatorId) &&
        Objects.equals(this.masterCardAggregatorId, cardProcessingConfigCommonProcessorsValue.masterCardAggregatorId) &&
        Objects.equals(this.sicCode, cardProcessingConfigCommonProcessorsValue.sicCode) &&
        Objects.equals(this.allowMultipleBills, cardProcessingConfigCommonProcessorsValue.allowMultipleBills) &&
        Objects.equals(this.allowMerchantDescriptorOverride, cardProcessingConfigCommonProcessorsValue.allowMerchantDescriptorOverride) &&
        Objects.equals(this.enhancedData, cardProcessingConfigCommonProcessorsValue.enhancedData) &&
        Objects.equals(this.fireSafetyIndicator, cardProcessingConfigCommonProcessorsValue.fireSafetyIndicator) &&
        Objects.equals(this.quasiCash, cardProcessingConfigCommonProcessorsValue.quasiCash) &&
        Objects.equals(this.acquirerMerchantId, cardProcessingConfigCommonProcessorsValue.acquirerMerchantId) &&
        Objects.equals(this.avsFormat, cardProcessingConfigCommonProcessorsValue.avsFormat) &&
        Objects.equals(this.enableLongTransRefNo, cardProcessingConfigCommonProcessorsValue.enableLongTransRefNo) &&
        Objects.equals(this.enableLevel2, cardProcessingConfigCommonProcessorsValue.enableLevel2) &&
        Objects.equals(this.enableMultipleTransactionAdviceAddendum, cardProcessingConfigCommonProcessorsValue.enableMultipleTransactionAdviceAddendum) &&
        Objects.equals(this.amexTransactionAdviceAddendum1, cardProcessingConfigCommonProcessorsValue.amexTransactionAdviceAddendum1) &&
        Objects.equals(this.enableMultiLineItems, cardProcessingConfigCommonProcessorsValue.enableMultiLineItems) &&
        Objects.equals(this.enableTransactionReferenceNumber, cardProcessingConfigCommonProcessorsValue.enableTransactionReferenceNumber) &&
        Objects.equals(this.enableAutoAuthReversalAfterVoid, cardProcessingConfigCommonProcessorsValue.enableAutoAuthReversalAfterVoid) &&
        Objects.equals(this.enableExpresspayPanTranslation, cardProcessingConfigCommonProcessorsValue.enableExpresspayPanTranslation) &&
        Objects.equals(this.enableCreditAuth, cardProcessingConfigCommonProcessorsValue.enableCreditAuth) &&
        Objects.equals(this.industryCode, cardProcessingConfigCommonProcessorsValue.industryCode) &&
        Objects.equals(this.sendAmexLevel2Data, cardProcessingConfigCommonProcessorsValue.sendAmexLevel2Data) &&
        Objects.equals(this.softDescriptorType, cardProcessingConfigCommonProcessorsValue.softDescriptorType) &&
        Objects.equals(this.vitalNumber, cardProcessingConfigCommonProcessorsValue.vitalNumber) &&
        Objects.equals(this.bankNumber, cardProcessingConfigCommonProcessorsValue.bankNumber) &&
        Objects.equals(this.chainNumber, cardProcessingConfigCommonProcessorsValue.chainNumber) &&
        Objects.equals(this.merchantBinNumber, cardProcessingConfigCommonProcessorsValue.merchantBinNumber) &&
        Objects.equals(this.merchantLocationNumber, cardProcessingConfigCommonProcessorsValue.merchantLocationNumber) &&
        Objects.equals(this.storeID, cardProcessingConfigCommonProcessorsValue.storeID) &&
        Objects.equals(this.travelAgencyCode, cardProcessingConfigCommonProcessorsValue.travelAgencyCode) &&
        Objects.equals(this.travelAgencyName, cardProcessingConfigCommonProcessorsValue.travelAgencyName) &&
        Objects.equals(this.settlementCurrency, cardProcessingConfigCommonProcessorsValue.settlementCurrency) &&
        Objects.equals(this.enableLeastCostRouting, cardProcessingConfigCommonProcessorsValue.enableLeastCostRouting) &&
        Objects.equals(this.enableCVVResponseIndicator, cardProcessingConfigCommonProcessorsValue.enableCVVResponseIndicator) &&
        Objects.equals(this.enableMultiCurrencyProcessing, cardProcessingConfigCommonProcessorsValue.enableMultiCurrencyProcessing) &&
        Objects.equals(this.enablePosNetworkSwitching, cardProcessingConfigCommonProcessorsValue.enablePosNetworkSwitching) &&
        Objects.equals(this.enableDynamicCurrencyConversion, cardProcessingConfigCommonProcessorsValue.enableDynamicCurrencyConversion) &&
        Objects.equals(this.merchantTier, cardProcessingConfigCommonProcessorsValue.merchantTier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(batchGroup, businessApplicationId, merchantVerificationValue, abaNumber, acquirer, merchantId, terminalId, paymentTypes, currencies, visaAggregatorId, amexAggregatorId, masterCardAggregatorId, sicCode, allowMultipleBills, allowMerchantDescriptorOverride, enhancedData, fireSafetyIndicator, quasiCash, acquirerMerchantId, avsFormat, enableLongTransRefNo, enableLevel2, enableMultipleTransactionAdviceAddendum, amexTransactionAdviceAddendum1, enableMultiLineItems, enableTransactionReferenceNumber, enableAutoAuthReversalAfterVoid, enableExpresspayPanTranslation, enableCreditAuth, industryCode, sendAmexLevel2Data, softDescriptorType, vitalNumber, bankNumber, chainNumber, merchantBinNumber, merchantLocationNumber, storeID, travelAgencyCode, travelAgencyName, settlementCurrency, enableLeastCostRouting, enableCVVResponseIndicator, enableMultiCurrencyProcessing, enablePosNetworkSwitching, enableDynamicCurrencyConversion, merchantTier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardProcessingConfigCommonProcessorsValue {\n");
    sb.append("    batchGroup: ").append(toIndentedString(batchGroup)).append("\n");
    sb.append("    businessApplicationId: ").append(toIndentedString(businessApplicationId)).append("\n");
    sb.append("    merchantVerificationValue: ").append(toIndentedString(merchantVerificationValue)).append("\n");
    sb.append("    abaNumber: ").append(toIndentedString(abaNumber)).append("\n");
    sb.append("    acquirer: ").append(toIndentedString(acquirer)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    terminalId: ").append(toIndentedString(terminalId)).append("\n");
    sb.append("    paymentTypes: ").append(toIndentedString(paymentTypes)).append("\n");
    sb.append("    currencies: ").append(toIndentedString(currencies)).append("\n");
    sb.append("    visaAggregatorId: ").append(toIndentedString(visaAggregatorId)).append("\n");
    sb.append("    amexAggregatorId: ").append(toIndentedString(amexAggregatorId)).append("\n");
    sb.append("    masterCardAggregatorId: ").append(toIndentedString(masterCardAggregatorId)).append("\n");
    sb.append("    sicCode: ").append(toIndentedString(sicCode)).append("\n");
    sb.append("    allowMultipleBills: ").append(toIndentedString(allowMultipleBills)).append("\n");
    sb.append("    allowMerchantDescriptorOverride: ").append(toIndentedString(allowMerchantDescriptorOverride)).append("\n");
    sb.append("    enhancedData: ").append(toIndentedString(enhancedData)).append("\n");
    sb.append("    fireSafetyIndicator: ").append(toIndentedString(fireSafetyIndicator)).append("\n");
    sb.append("    quasiCash: ").append(toIndentedString(quasiCash)).append("\n");
    sb.append("    acquirerMerchantId: ").append(toIndentedString(acquirerMerchantId)).append("\n");
    sb.append("    avsFormat: ").append(toIndentedString(avsFormat)).append("\n");
    sb.append("    enableLongTransRefNo: ").append(toIndentedString(enableLongTransRefNo)).append("\n");
    sb.append("    enableLevel2: ").append(toIndentedString(enableLevel2)).append("\n");
    sb.append("    enableMultipleTransactionAdviceAddendum: ").append(toIndentedString(enableMultipleTransactionAdviceAddendum)).append("\n");
    sb.append("    amexTransactionAdviceAddendum1: ").append(toIndentedString(amexTransactionAdviceAddendum1)).append("\n");
    sb.append("    enableMultiLineItems: ").append(toIndentedString(enableMultiLineItems)).append("\n");
    sb.append("    enableTransactionReferenceNumber: ").append(toIndentedString(enableTransactionReferenceNumber)).append("\n");
    sb.append("    enableAutoAuthReversalAfterVoid: ").append(toIndentedString(enableAutoAuthReversalAfterVoid)).append("\n");
    sb.append("    enableExpresspayPanTranslation: ").append(toIndentedString(enableExpresspayPanTranslation)).append("\n");
    sb.append("    enableCreditAuth: ").append(toIndentedString(enableCreditAuth)).append("\n");
    sb.append("    industryCode: ").append(toIndentedString(industryCode)).append("\n");
    sb.append("    sendAmexLevel2Data: ").append(toIndentedString(sendAmexLevel2Data)).append("\n");
    sb.append("    softDescriptorType: ").append(toIndentedString(softDescriptorType)).append("\n");
    sb.append("    vitalNumber: ").append(toIndentedString(vitalNumber)).append("\n");
    sb.append("    bankNumber: ").append(toIndentedString(bankNumber)).append("\n");
    sb.append("    chainNumber: ").append(toIndentedString(chainNumber)).append("\n");
    sb.append("    merchantBinNumber: ").append(toIndentedString(merchantBinNumber)).append("\n");
    sb.append("    merchantLocationNumber: ").append(toIndentedString(merchantLocationNumber)).append("\n");
    sb.append("    storeID: ").append(toIndentedString(storeID)).append("\n");
    sb.append("    travelAgencyCode: ").append(toIndentedString(travelAgencyCode)).append("\n");
    sb.append("    travelAgencyName: ").append(toIndentedString(travelAgencyName)).append("\n");
    sb.append("    settlementCurrency: ").append(toIndentedString(settlementCurrency)).append("\n");
    sb.append("    enableLeastCostRouting: ").append(toIndentedString(enableLeastCostRouting)).append("\n");
    sb.append("    enableCVVResponseIndicator: ").append(toIndentedString(enableCVVResponseIndicator)).append("\n");
    sb.append("    enableMultiCurrencyProcessing: ").append(toIndentedString(enableMultiCurrencyProcessing)).append("\n");
    sb.append("    enablePosNetworkSwitching: ").append(toIndentedString(enablePosNetworkSwitching)).append("\n");
    sb.append("    enableDynamicCurrencyConversion: ").append(toIndentedString(enableDynamicCurrencyConversion)).append("\n");
    sb.append("    merchantTier: ").append(toIndentedString(merchantTier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

