/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ValidateAuthenticationResultsRequestConsumerAuthenticationInformation
 */
@JsonPropertyOrder({
  ValidateAuthenticationResultsRequestConsumerAuthenticationInformation.JSON_PROPERTY_AUTHENTICATION_TRANSACTION_ID,
  ValidateAuthenticationResultsRequestConsumerAuthenticationInformation.JSON_PROPERTY_AUTHENTICATION_TRANSACTION_CONTEXT,
  ValidateAuthenticationResultsRequestConsumerAuthenticationInformation.JSON_PROPERTY_OTP_TOKEN,
  ValidateAuthenticationResultsRequestConsumerAuthenticationInformation.JSON_PROPERTY_RESPONSE_ACCESS_TOKEN,
  ValidateAuthenticationResultsRequestConsumerAuthenticationInformation.JSON_PROPERTY_SIGNED_PARES_STATUS_REASON,
  ValidateAuthenticationResultsRequestConsumerAuthenticationInformation.JSON_PROPERTY_SIGNED_PARES,
  ValidateAuthenticationResultsRequestConsumerAuthenticationInformation.JSON_PROPERTY_WHITE_LIST_STATUS,
  ValidateAuthenticationResultsRequestConsumerAuthenticationInformation.JSON_PROPERTY_CREDENTIAL_ENCRYPTED
})
@JsonTypeName("validateAuthenticationResults_request_consumerAuthenticationInformation")
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T19:17:21.826843+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class ValidateAuthenticationResultsRequestConsumerAuthenticationInformation {
  public static final String JSON_PROPERTY_AUTHENTICATION_TRANSACTION_ID = "authenticationTransactionId";
  private String authenticationTransactionId;

  public static final String JSON_PROPERTY_AUTHENTICATION_TRANSACTION_CONTEXT = "authenticationTransactionContext";
  private String authenticationTransactionContext;

  public static final String JSON_PROPERTY_OTP_TOKEN = "otpToken";
  private String otpToken;

  public static final String JSON_PROPERTY_RESPONSE_ACCESS_TOKEN = "responseAccessToken";
  private String responseAccessToken;

  public static final String JSON_PROPERTY_SIGNED_PARES_STATUS_REASON = "signedParesStatusReason";
  private String signedParesStatusReason;

  public static final String JSON_PROPERTY_SIGNED_PARES = "signedPares";
  private String signedPares;

  public static final String JSON_PROPERTY_WHITE_LIST_STATUS = "whiteListStatus";
  private String whiteListStatus;

  public static final String JSON_PROPERTY_CREDENTIAL_ENCRYPTED = "credentialEncrypted";
  private String credentialEncrypted;

  public ValidateAuthenticationResultsRequestConsumerAuthenticationInformation() {
  }

  public ValidateAuthenticationResultsRequestConsumerAuthenticationInformation authenticationTransactionId(String authenticationTransactionId) {
    
    this.authenticationTransactionId = authenticationTransactionId;
    return this;
  }

  /**
   * Payer authentication transaction identifier passed to link the check enrollment and validate authentication messages.For Rupay,this is passed only in Re-Send OTP usecase. **Note**: Required for Standard integration, Rupay Seamless server to server integration for enroll service. Required for Hybrid integration for validate service. 
   * @return authenticationTransactionId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AUTHENTICATION_TRANSACTION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getAuthenticationTransactionId() {
    return authenticationTransactionId;
  }


  @JsonProperty(JSON_PROPERTY_AUTHENTICATION_TRANSACTION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAuthenticationTransactionId(String authenticationTransactionId) {
    this.authenticationTransactionId = authenticationTransactionId;
  }

  public ValidateAuthenticationResultsRequestConsumerAuthenticationInformation authenticationTransactionContext(String authenticationTransactionContext) {
    
    this.authenticationTransactionContext = authenticationTransactionContext;
    return this;
  }

  /**
   * Authentication transaction context is used as a unique identifier to link enroll and validate call. 
   * @return authenticationTransactionContext
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTHENTICATION_TRANSACTION_CONTEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAuthenticationTransactionContext() {
    return authenticationTransactionContext;
  }


  @JsonProperty(JSON_PROPERTY_AUTHENTICATION_TRANSACTION_CONTEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAuthenticationTransactionContext(String authenticationTransactionContext) {
    this.authenticationTransactionContext = authenticationTransactionContext;
  }

  public ValidateAuthenticationResultsRequestConsumerAuthenticationInformation otpToken(String otpToken) {
    
    this.otpToken = otpToken;
    return this;
  }

  /**
   * OTP entered by the card holder. 
   * @return otpToken
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OTP_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOtpToken() {
    return otpToken;
  }


  @JsonProperty(JSON_PROPERTY_OTP_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOtpToken(String otpToken) {
    this.otpToken = otpToken;
  }

  public ValidateAuthenticationResultsRequestConsumerAuthenticationInformation responseAccessToken(String responseAccessToken) {
    
    this.responseAccessToken = responseAccessToken;
    return this;
  }

  /**
   * JWT returned by the 3D Secure provider when the authentication is complete. Required for Hybrid integration if you use the Cybersource-generated access token. Note: Max. length of this field is 2048 characters. 
   * @return responseAccessToken
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RESPONSE_ACCESS_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getResponseAccessToken() {
    return responseAccessToken;
  }


  @JsonProperty(JSON_PROPERTY_RESPONSE_ACCESS_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResponseAccessToken(String responseAccessToken) {
    this.responseAccessToken = responseAccessToken;
  }

  public ValidateAuthenticationResultsRequestConsumerAuthenticationInformation signedParesStatusReason(String signedParesStatusReason) {
    
    this.signedParesStatusReason = signedParesStatusReason;
    return this;
  }

  /**
   * Provides additional information as to why the PAResStatus has a specific value. 
   * @return signedParesStatusReason
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SIGNED_PARES_STATUS_REASON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSignedParesStatusReason() {
    return signedParesStatusReason;
  }


  @JsonProperty(JSON_PROPERTY_SIGNED_PARES_STATUS_REASON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSignedParesStatusReason(String signedParesStatusReason) {
    this.signedParesStatusReason = signedParesStatusReason;
  }

  public ValidateAuthenticationResultsRequestConsumerAuthenticationInformation signedPares(String signedPares) {
    
    this.signedPares = signedPares;
    return this;
  }

  /**
   * Payer authentication result (PARes) message returned by the card-issuing bank. If you need to show proof of enrollment checking, you may need to decrypt and parse the string for the information required by the payment card company. For more information, see \&quot;Storing Payer Authentication Data,\&quot; page 160. Important The value is in base64. You must remove all carriage returns and line feeds before adding the PARes to the request. 
   * @return signedPares
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SIGNED_PARES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSignedPares() {
    return signedPares;
  }


  @JsonProperty(JSON_PROPERTY_SIGNED_PARES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSignedPares(String signedPares) {
    this.signedPares = signedPares;
  }

  public ValidateAuthenticationResultsRequestConsumerAuthenticationInformation whiteListStatus(String whiteListStatus) {
    
    this.whiteListStatus = whiteListStatus;
    return this;
  }

  /**
   * Enables the communication of trusted beneficiary/whitelist status between the ACS, the DS and the 3DS Requestor.  Possible Values:  Y - 3DS Requestor is whitelisted by cardholder  N - 3DS Requestor is not whitelisted by cardholder 
   * @return whiteListStatus
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WHITE_LIST_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getWhiteListStatus() {
    return whiteListStatus;
  }


  @JsonProperty(JSON_PROPERTY_WHITE_LIST_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWhiteListStatus(String whiteListStatus) {
    this.whiteListStatus = whiteListStatus;
  }

  public ValidateAuthenticationResultsRequestConsumerAuthenticationInformation credentialEncrypted(String credentialEncrypted) {
    
    this.credentialEncrypted = credentialEncrypted;
    return this;
  }

  /**
   * A flag to indicate if the passed credential has been encrypted by the Merchant.
   * @return credentialEncrypted
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREDENTIAL_ENCRYPTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCredentialEncrypted() {
    return credentialEncrypted;
  }


  @JsonProperty(JSON_PROPERTY_CREDENTIAL_ENCRYPTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCredentialEncrypted(String credentialEncrypted) {
    this.credentialEncrypted = credentialEncrypted;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ValidateAuthenticationResultsRequestConsumerAuthenticationInformation validateAuthenticationResultsRequestConsumerAuthenticationInformation = (ValidateAuthenticationResultsRequestConsumerAuthenticationInformation) o;
    return Objects.equals(this.authenticationTransactionId, validateAuthenticationResultsRequestConsumerAuthenticationInformation.authenticationTransactionId) &&
        Objects.equals(this.authenticationTransactionContext, validateAuthenticationResultsRequestConsumerAuthenticationInformation.authenticationTransactionContext) &&
        Objects.equals(this.otpToken, validateAuthenticationResultsRequestConsumerAuthenticationInformation.otpToken) &&
        Objects.equals(this.responseAccessToken, validateAuthenticationResultsRequestConsumerAuthenticationInformation.responseAccessToken) &&
        Objects.equals(this.signedParesStatusReason, validateAuthenticationResultsRequestConsumerAuthenticationInformation.signedParesStatusReason) &&
        Objects.equals(this.signedPares, validateAuthenticationResultsRequestConsumerAuthenticationInformation.signedPares) &&
        Objects.equals(this.whiteListStatus, validateAuthenticationResultsRequestConsumerAuthenticationInformation.whiteListStatus) &&
        Objects.equals(this.credentialEncrypted, validateAuthenticationResultsRequestConsumerAuthenticationInformation.credentialEncrypted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authenticationTransactionId, authenticationTransactionContext, otpToken, responseAccessToken, signedParesStatusReason, signedPares, whiteListStatus, credentialEncrypted);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ValidateAuthenticationResultsRequestConsumerAuthenticationInformation {\n");
    sb.append("    authenticationTransactionId: ").append(toIndentedString(authenticationTransactionId)).append("\n");
    sb.append("    authenticationTransactionContext: ").append(toIndentedString(authenticationTransactionContext)).append("\n");
    sb.append("    otpToken: ").append(toIndentedString(otpToken)).append("\n");
    sb.append("    responseAccessToken: ").append(toIndentedString(responseAccessToken)).append("\n");
    sb.append("    signedParesStatusReason: ").append(toIndentedString(signedParesStatusReason)).append("\n");
    sb.append("    signedPares: ").append(toIndentedString(signedPares)).append("\n");
    sb.append("    whiteListStatus: ").append(toIndentedString(whiteListStatus)).append("\n");
    sb.append("    credentialEncrypted: ").append(toIndentedString(credentialEncrypted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

