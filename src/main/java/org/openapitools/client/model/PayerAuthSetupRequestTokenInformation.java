/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * PayerAuthSetupRequestTokenInformation
 */
@JsonPropertyOrder({
  PayerAuthSetupRequestTokenInformation.JSON_PROPERTY_TRANSIENT_TOKEN,
  PayerAuthSetupRequestTokenInformation.JSON_PROPERTY_JTI
})
@JsonTypeName("payerAuthSetup_request_tokenInformation")
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T19:17:21.826843+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class PayerAuthSetupRequestTokenInformation {
  public static final String JSON_PROPERTY_TRANSIENT_TOKEN = "transientToken";
  private String transientToken;

  public static final String JSON_PROPERTY_JTI = "jti";
  private String jti;

  public PayerAuthSetupRequestTokenInformation() {
  }

  public PayerAuthSetupRequestTokenInformation transientToken(String transientToken) {
    
    this.transientToken = transientToken;
    return this;
  }

  /**
   * A temporary ID that represents the customer&#39;s payment data (which is securely stored in Visa Data Centers). Flex Microform generates this ID and sets it to expire within 15 minutes from when the ID is generated or until the first payment authorization is carried out (whichever occurs first).  Valid value for the ID is a 64-character, alphanumeric string.  Example: 1D08M4YB968R1F7YVL4TBBKYVNRIR02VZFH9CBYSQIJJXORPI1NK5C98D7F6EB53 
   * @return transientToken
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRANSIENT_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTransientToken() {
    return transientToken;
  }


  @JsonProperty(JSON_PROPERTY_TRANSIENT_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransientToken(String transientToken) {
    this.transientToken = transientToken;
  }

  public PayerAuthSetupRequestTokenInformation jti(String jti) {
    
    this.jti = jti;
    return this;
  }

  /**
   * TMS Transient Token, 64 hexadecimal id value representing captured payment credentials (including Sensitive Authentication Data, e.g. CVV). 
   * @return jti
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_JTI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getJti() {
    return jti;
  }


  @JsonProperty(JSON_PROPERTY_JTI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setJti(String jti) {
    this.jti = jti;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PayerAuthSetupRequestTokenInformation payerAuthSetupRequestTokenInformation = (PayerAuthSetupRequestTokenInformation) o;
    return Objects.equals(this.transientToken, payerAuthSetupRequestTokenInformation.transientToken) &&
        Objects.equals(this.jti, payerAuthSetupRequestTokenInformation.jti);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transientToken, jti);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayerAuthSetupRequestTokenInformation {\n");
    sb.append("    transientToken: ").append(toIndentedString(transientToken)).append("\n");
    sb.append("    jti: ").append(toIndentedString(jti)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

