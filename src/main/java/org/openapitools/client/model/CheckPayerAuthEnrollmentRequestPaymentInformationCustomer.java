/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CheckPayerAuthEnrollmentRequestPaymentInformationCustomer
 */
@JsonPropertyOrder({
  CheckPayerAuthEnrollmentRequestPaymentInformationCustomer.JSON_PROPERTY_CUSTOMER_ID,
  CheckPayerAuthEnrollmentRequestPaymentInformationCustomer.JSON_PROPERTY_ID
})
@JsonTypeName("checkPayerAuthEnrollment_request_paymentInformation_customer")
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T19:17:21.826843+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class CheckPayerAuthEnrollmentRequestPaymentInformationCustomer {
  public static final String JSON_PROPERTY_CUSTOMER_ID = "customerId";
  private String customerId;

  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public CheckPayerAuthEnrollmentRequestPaymentInformationCustomer() {
  }

  public CheckPayerAuthEnrollmentRequestPaymentInformationCustomer customerId(String customerId) {
    
    this.customerId = customerId;
    return this;
  }

  /**
   * Unique identifier for the legacy Secure Storage token used in the transaction. When you include this value in your request, many of the fields that are normally required for an authorization or credit become optional. 
   * @return customerId
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CUSTOMER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCustomerId() {
    return customerId;
  }


  @JsonProperty(JSON_PROPERTY_CUSTOMER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCustomerId(String customerId) {
    this.customerId = customerId;
  }

  public CheckPayerAuthEnrollmentRequestPaymentInformationCustomer id(String id) {
    
    this.id = id;
    return this;
  }

  /**
   * Unique identifier for the Customer token used in the transaction. When you include this value in your request, many of the fields that are normally required for an authorization or credit become optional. 
   * @return id
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckPayerAuthEnrollmentRequestPaymentInformationCustomer checkPayerAuthEnrollmentRequestPaymentInformationCustomer = (CheckPayerAuthEnrollmentRequestPaymentInformationCustomer) o;
    return Objects.equals(this.customerId, checkPayerAuthEnrollmentRequestPaymentInformationCustomer.customerId) &&
        Objects.equals(this.id, checkPayerAuthEnrollmentRequestPaymentInformationCustomer.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customerId, id);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckPayerAuthEnrollmentRequestPaymentInformationCustomer {\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

