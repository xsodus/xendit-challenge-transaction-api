/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreatePaymentRequestTravelInformationTransitAirlineAncillaryInformation;
import org.openapitools.client.model.CreatePaymentRequestTravelInformationTransitAirlineLegsInner;
import org.openapitools.client.model.CreatePaymentRequestTravelInformationTransitAirlineTicketIssuer;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CreatePaymentRequestTravelInformationTransitAirline
 */
@JsonPropertyOrder({
  CreatePaymentRequestTravelInformationTransitAirline.JSON_PROPERTY_IS_DOMESTIC,
  CreatePaymentRequestTravelInformationTransitAirline.JSON_PROPERTY_BOOKING_REFERENCE_NUMBER,
  CreatePaymentRequestTravelInformationTransitAirline.JSON_PROPERTY_CARRIER_NAME,
  CreatePaymentRequestTravelInformationTransitAirline.JSON_PROPERTY_TICKET_ISSUER,
  CreatePaymentRequestTravelInformationTransitAirline.JSON_PROPERTY_TICKET_NUMBER,
  CreatePaymentRequestTravelInformationTransitAirline.JSON_PROPERTY_CHECK_DIGIT,
  CreatePaymentRequestTravelInformationTransitAirline.JSON_PROPERTY_RESTRICTED_TICKET_INDICATOR,
  CreatePaymentRequestTravelInformationTransitAirline.JSON_PROPERTY_TRANSACTION_TYPE,
  CreatePaymentRequestTravelInformationTransitAirline.JSON_PROPERTY_EXTENDED_PAYMENT_CODE,
  CreatePaymentRequestTravelInformationTransitAirline.JSON_PROPERTY_PASSENGER_NAME,
  CreatePaymentRequestTravelInformationTransitAirline.JSON_PROPERTY_CUSTOMER_CODE,
  CreatePaymentRequestTravelInformationTransitAirline.JSON_PROPERTY_DOCUMENT_TYPE,
  CreatePaymentRequestTravelInformationTransitAirline.JSON_PROPERTY_DOCUMENT_NUMBER,
  CreatePaymentRequestTravelInformationTransitAirline.JSON_PROPERTY_DOCUMENT_NUMBER_OF_PARTS,
  CreatePaymentRequestTravelInformationTransitAirline.JSON_PROPERTY_INVOICE_NUMBER,
  CreatePaymentRequestTravelInformationTransitAirline.JSON_PROPERTY_INVOICE_DATE,
  CreatePaymentRequestTravelInformationTransitAirline.JSON_PROPERTY_ADDITIONAL_CHARGES,
  CreatePaymentRequestTravelInformationTransitAirline.JSON_PROPERTY_TOTAL_FEE_AMOUNT,
  CreatePaymentRequestTravelInformationTransitAirline.JSON_PROPERTY_CLEARING_SEQUENCE,
  CreatePaymentRequestTravelInformationTransitAirline.JSON_PROPERTY_CLEARING_COUNT,
  CreatePaymentRequestTravelInformationTransitAirline.JSON_PROPERTY_TOTAL_CLEARING_AMOUNT,
  CreatePaymentRequestTravelInformationTransitAirline.JSON_PROPERTY_NUMBER_OF_PASSENGERS,
  CreatePaymentRequestTravelInformationTransitAirline.JSON_PROPERTY_RESERVATION_SYSTEM_CODE,
  CreatePaymentRequestTravelInformationTransitAirline.JSON_PROPERTY_PROCESS_IDENTIFIER,
  CreatePaymentRequestTravelInformationTransitAirline.JSON_PROPERTY_TICKET_ISSUE_DATE,
  CreatePaymentRequestTravelInformationTransitAirline.JSON_PROPERTY_ELECTRONIC_TICKET_INDICATOR,
  CreatePaymentRequestTravelInformationTransitAirline.JSON_PROPERTY_ORIGINAL_TICKET_NUMBER,
  CreatePaymentRequestTravelInformationTransitAirline.JSON_PROPERTY_PURCHASE_TYPE,
  CreatePaymentRequestTravelInformationTransitAirline.JSON_PROPERTY_CREDIT_REASON_INDICATOR,
  CreatePaymentRequestTravelInformationTransitAirline.JSON_PROPERTY_TICKET_CHANGE_INDICATOR,
  CreatePaymentRequestTravelInformationTransitAirline.JSON_PROPERTY_PLAN_NUMBER,
  CreatePaymentRequestTravelInformationTransitAirline.JSON_PROPERTY_ARRIVAL_DATE,
  CreatePaymentRequestTravelInformationTransitAirline.JSON_PROPERTY_RESTRICTED_TICKET_DESCIPTION,
  CreatePaymentRequestTravelInformationTransitAirline.JSON_PROPERTY_EXCHANGE_TICKET_AMOUNT,
  CreatePaymentRequestTravelInformationTransitAirline.JSON_PROPERTY_EXCHANGE_TICKET_FEE_AMOUNT,
  CreatePaymentRequestTravelInformationTransitAirline.JSON_PROPERTY_RESERVATION_TYPE,
  CreatePaymentRequestTravelInformationTransitAirline.JSON_PROPERTY_BOARDING_FEE_AMOUNT,
  CreatePaymentRequestTravelInformationTransitAirline.JSON_PROPERTY_LEGS,
  CreatePaymentRequestTravelInformationTransitAirline.JSON_PROPERTY_ANCILLARY_INFORMATION,
  CreatePaymentRequestTravelInformationTransitAirline.JSON_PROPERTY_FLIGHT_TYPE,
  CreatePaymentRequestTravelInformationTransitAirline.JSON_PROPERTY_INSURANCE_AMOUNT,
  CreatePaymentRequestTravelInformationTransitAirline.JSON_PROPERTY_FREQUENT_FLYER_NUMBER,
  CreatePaymentRequestTravelInformationTransitAirline.JSON_PROPERTY_THIRD_PARTY_STATUS,
  CreatePaymentRequestTravelInformationTransitAirline.JSON_PROPERTY_PASSENGER_TYPE,
  CreatePaymentRequestTravelInformationTransitAirline.JSON_PROPERTY_TOTAL_INSURANCE_AMOUNT
})
@JsonTypeName("createPayment_request_travelInformation_transit_airline")
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T19:17:21.826843+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class CreatePaymentRequestTravelInformationTransitAirline {
  public static final String JSON_PROPERTY_IS_DOMESTIC = "isDomestic";
  private String isDomestic;

  public static final String JSON_PROPERTY_BOOKING_REFERENCE_NUMBER = "bookingReferenceNumber";
  private String bookingReferenceNumber;

  public static final String JSON_PROPERTY_CARRIER_NAME = "carrierName";
  private String carrierName;

  public static final String JSON_PROPERTY_TICKET_ISSUER = "ticketIssuer";
  private CreatePaymentRequestTravelInformationTransitAirlineTicketIssuer ticketIssuer;

  public static final String JSON_PROPERTY_TICKET_NUMBER = "ticketNumber";
  private String ticketNumber;

  public static final String JSON_PROPERTY_CHECK_DIGIT = "checkDigit";
  private String checkDigit;

  public static final String JSON_PROPERTY_RESTRICTED_TICKET_INDICATOR = "restrictedTicketIndicator";
  private Integer restrictedTicketIndicator;

  public static final String JSON_PROPERTY_TRANSACTION_TYPE = "transactionType";
  private Integer transactionType;

  public static final String JSON_PROPERTY_EXTENDED_PAYMENT_CODE = "extendedPaymentCode";
  private String extendedPaymentCode;

  public static final String JSON_PROPERTY_PASSENGER_NAME = "passengerName";
  private String passengerName;

  public static final String JSON_PROPERTY_CUSTOMER_CODE = "customerCode";
  private String customerCode;

  public static final String JSON_PROPERTY_DOCUMENT_TYPE = "documentType";
  private String documentType;

  public static final String JSON_PROPERTY_DOCUMENT_NUMBER = "documentNumber";
  private String documentNumber;

  public static final String JSON_PROPERTY_DOCUMENT_NUMBER_OF_PARTS = "documentNumberOfParts";
  private Integer documentNumberOfParts;

  public static final String JSON_PROPERTY_INVOICE_NUMBER = "invoiceNumber";
  private String invoiceNumber;

  public static final String JSON_PROPERTY_INVOICE_DATE = "invoiceDate";
  private Integer invoiceDate;

  public static final String JSON_PROPERTY_ADDITIONAL_CHARGES = "additionalCharges";
  private String additionalCharges;

  public static final String JSON_PROPERTY_TOTAL_FEE_AMOUNT = "totalFeeAmount";
  private String totalFeeAmount;

  public static final String JSON_PROPERTY_CLEARING_SEQUENCE = "clearingSequence";
  private String clearingSequence;

  public static final String JSON_PROPERTY_CLEARING_COUNT = "clearingCount";
  private String clearingCount;

  public static final String JSON_PROPERTY_TOTAL_CLEARING_AMOUNT = "totalClearingAmount";
  private String totalClearingAmount;

  public static final String JSON_PROPERTY_NUMBER_OF_PASSENGERS = "numberOfPassengers";
  private Integer numberOfPassengers;

  public static final String JSON_PROPERTY_RESERVATION_SYSTEM_CODE = "reservationSystemCode";
  private String reservationSystemCode;

  public static final String JSON_PROPERTY_PROCESS_IDENTIFIER = "processIdentifier";
  private String processIdentifier;

  public static final String JSON_PROPERTY_TICKET_ISSUE_DATE = "ticketIssueDate";
  private String ticketIssueDate;

  public static final String JSON_PROPERTY_ELECTRONIC_TICKET_INDICATOR = "electronicTicketIndicator";
  private Boolean electronicTicketIndicator;

  public static final String JSON_PROPERTY_ORIGINAL_TICKET_NUMBER = "originalTicketNumber";
  private String originalTicketNumber;

  public static final String JSON_PROPERTY_PURCHASE_TYPE = "purchaseType";
  private String purchaseType;

  public static final String JSON_PROPERTY_CREDIT_REASON_INDICATOR = "creditReasonIndicator";
  private String creditReasonIndicator;

  public static final String JSON_PROPERTY_TICKET_CHANGE_INDICATOR = "ticketChangeIndicator";
  private String ticketChangeIndicator;

  public static final String JSON_PROPERTY_PLAN_NUMBER = "planNumber";
  private String planNumber;

  public static final String JSON_PROPERTY_ARRIVAL_DATE = "arrivalDate";
  private String arrivalDate;

  public static final String JSON_PROPERTY_RESTRICTED_TICKET_DESCIPTION = "restrictedTicketDesciption";
  private String restrictedTicketDesciption;

  public static final String JSON_PROPERTY_EXCHANGE_TICKET_AMOUNT = "exchangeTicketAmount";
  private String exchangeTicketAmount;

  public static final String JSON_PROPERTY_EXCHANGE_TICKET_FEE_AMOUNT = "exchangeTicketFeeAmount";
  private String exchangeTicketFeeAmount;

  public static final String JSON_PROPERTY_RESERVATION_TYPE = "reservationType";
  private String reservationType;

  public static final String JSON_PROPERTY_BOARDING_FEE_AMOUNT = "boardingFeeAmount";
  private String boardingFeeAmount;

  public static final String JSON_PROPERTY_LEGS = "legs";
  private List<CreatePaymentRequestTravelInformationTransitAirlineLegsInner> legs = new ArrayList<>();

  public static final String JSON_PROPERTY_ANCILLARY_INFORMATION = "ancillaryInformation";
  private CreatePaymentRequestTravelInformationTransitAirlineAncillaryInformation ancillaryInformation;

  public static final String JSON_PROPERTY_FLIGHT_TYPE = "flightType";
  private String flightType;

  public static final String JSON_PROPERTY_INSURANCE_AMOUNT = "insuranceAmount";
  private String insuranceAmount;

  public static final String JSON_PROPERTY_FREQUENT_FLYER_NUMBER = "frequentFlyerNumber";
  private String frequentFlyerNumber;

  public static final String JSON_PROPERTY_THIRD_PARTY_STATUS = "thirdPartyStatus";
  private String thirdPartyStatus;

  public static final String JSON_PROPERTY_PASSENGER_TYPE = "passengerType";
  private String passengerType;

  public static final String JSON_PROPERTY_TOTAL_INSURANCE_AMOUNT = "totalInsuranceAmount";
  private String totalInsuranceAmount;

  public CreatePaymentRequestTravelInformationTransitAirline() {
  }

  public CreatePaymentRequestTravelInformationTransitAirline isDomestic(String isDomestic) {
    
    this.isDomestic = isDomestic;
    return this;
  }

  /**
   * Specifies if the flight is: Domestic (01) International (02) If Y then 01 else 02 
   * @return isDomestic
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_DOMESTIC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIsDomestic() {
    return isDomestic;
  }


  @JsonProperty(JSON_PROPERTY_IS_DOMESTIC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsDomestic(String isDomestic) {
    this.isDomestic = isDomestic;
  }

  public CreatePaymentRequestTravelInformationTransitAirline bookingReferenceNumber(String bookingReferenceNumber) {
    
    this.bookingReferenceNumber = bookingReferenceNumber;
    return this;
  }

  /**
   * Reference number for the airline booking. Required if ticket numbers are not issued. 
   * @return bookingReferenceNumber
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BOOKING_REFERENCE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBookingReferenceNumber() {
    return bookingReferenceNumber;
  }


  @JsonProperty(JSON_PROPERTY_BOOKING_REFERENCE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBookingReferenceNumber(String bookingReferenceNumber) {
    this.bookingReferenceNumber = bookingReferenceNumber;
  }

  public CreatePaymentRequestTravelInformationTransitAirline carrierName(String carrierName) {
    
    this.carrierName = carrierName;
    return this;
  }

  /**
   * Airline that generated the ticket. Format: English characters only. Optional request field. 
   * @return carrierName
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CARRIER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCarrierName() {
    return carrierName;
  }


  @JsonProperty(JSON_PROPERTY_CARRIER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCarrierName(String carrierName) {
    this.carrierName = carrierName;
  }

  public CreatePaymentRequestTravelInformationTransitAirline ticketIssuer(CreatePaymentRequestTravelInformationTransitAirlineTicketIssuer ticketIssuer) {
    
    this.ticketIssuer = ticketIssuer;
    return this;
  }

  /**
   * Get ticketIssuer
   * @return ticketIssuer
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TICKET_ISSUER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CreatePaymentRequestTravelInformationTransitAirlineTicketIssuer getTicketIssuer() {
    return ticketIssuer;
  }


  @JsonProperty(JSON_PROPERTY_TICKET_ISSUER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTicketIssuer(CreatePaymentRequestTravelInformationTransitAirlineTicketIssuer ticketIssuer) {
    this.ticketIssuer = ticketIssuer;
  }

  public CreatePaymentRequestTravelInformationTransitAirline ticketNumber(String ticketNumber) {
    
    this.ticketNumber = ticketNumber;
    return this;
  }

  /**
   * Ticket number. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field. 
   * @return ticketNumber
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TICKET_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTicketNumber() {
    return ticketNumber;
  }


  @JsonProperty(JSON_PROPERTY_TICKET_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTicketNumber(String ticketNumber) {
    this.ticketNumber = ticketNumber;
  }

  public CreatePaymentRequestTravelInformationTransitAirline checkDigit(String checkDigit) {
    
    this.checkDigit = checkDigit;
    return this;
  }

  /**
   * Check digit for the ticket number. CyberSource recommends that you validate the check digit. With Discover and Diners Club, a valid ticket number has these characteristics: - The value is numeric. - The first three digits are a valid IATA2 license plate carrier code. - The last digit is a check digit or zero (0). - All remaining digits are nonzero. 
   * @return checkDigit
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CHECK_DIGIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCheckDigit() {
    return checkDigit;
  }


  @JsonProperty(JSON_PROPERTY_CHECK_DIGIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCheckDigit(String checkDigit) {
    this.checkDigit = checkDigit;
  }

  public CreatePaymentRequestTravelInformationTransitAirline restrictedTicketIndicator(Integer restrictedTicketIndicator) {
    
    this.restrictedTicketIndicator = restrictedTicketIndicator;
    return this;
  }

  /**
   * Flag that indicates whether or not the ticket is restricted (nonrefundable). Possible values: - 0: No restriction (refundable) - 1: Restricted (nonrefundable) Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field. 
   * @return restrictedTicketIndicator
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RESTRICTED_TICKET_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getRestrictedTicketIndicator() {
    return restrictedTicketIndicator;
  }


  @JsonProperty(JSON_PROPERTY_RESTRICTED_TICKET_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRestrictedTicketIndicator(Integer restrictedTicketIndicator) {
    this.restrictedTicketIndicator = restrictedTicketIndicator;
  }

  public CreatePaymentRequestTravelInformationTransitAirline transactionType(Integer transactionType) {
    
    this.transactionType = transactionType;
    return this;
  }

  /**
   * Type of charge. Possible values: - 01: Charge is for an airline ticket - 02: Charge is for an item that is not an airline ticket 
   * @return transactionType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRANSACTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTransactionType() {
    return transactionType;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransactionType(Integer transactionType) {
    this.transactionType = transactionType;
  }

  public CreatePaymentRequestTravelInformationTransitAirline extendedPaymentCode(String extendedPaymentCode) {
    
    this.extendedPaymentCode = extendedPaymentCode;
    return this;
  }

  /**
   * The field is not currently supported. 
   * @return extendedPaymentCode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXTENDED_PAYMENT_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExtendedPaymentCode() {
    return extendedPaymentCode;
  }


  @JsonProperty(JSON_PROPERTY_EXTENDED_PAYMENT_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExtendedPaymentCode(String extendedPaymentCode) {
    this.extendedPaymentCode = extendedPaymentCode;
  }

  public CreatePaymentRequestTravelInformationTransitAirline passengerName(String passengerName) {
    
    this.passengerName = passengerName;
    return this;
  }

  /**
   * Name of the passenger to whom the ticket was issued.  This will always be a single passenger&#39;s name. If there are more than one passengers, provide only the primary passenger&#39;s name. Do not include special characters such as commas, hyphens, or apostrophes. Only ASCII characters are supported. Format: English characters only. Optional request field. 
   * @return passengerName
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PASSENGER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPassengerName() {
    return passengerName;
  }


  @JsonProperty(JSON_PROPERTY_PASSENGER_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPassengerName(String passengerName) {
    this.passengerName = passengerName;
  }

  public CreatePaymentRequestTravelInformationTransitAirline customerCode(String customerCode) {
    
    this.customerCode = customerCode;
    return this;
  }

  /**
   * Reference number or code that identifies the cardholder. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field. 
   * @return customerCode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CUSTOMER_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCustomerCode() {
    return customerCode;
  }


  @JsonProperty(JSON_PROPERTY_CUSTOMER_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCustomerCode(String customerCode) {
    this.customerCode = customerCode;
  }

  public CreatePaymentRequestTravelInformationTransitAirline documentType(String documentType) {
    
    this.documentType = documentType;
    return this;
  }

  /**
   * Airline document type code that specifies the purpose of the transaction. Format: English characters only. Optional request field.  | Code | Description | | --- | --- | | 01 | Passenger ticket | | 02 | Additional collection | | 03 | Excess baggage | | 04 | Miscellaneous charge order (MCO) or prepaid ticket authorization | | 05 | Special service ticket | | 06 | Supported refund | | 07 | Unsupported refund | | 08 | Lost ticket application | | 09 | Tour order voucher | | 10 | Ticket by mail | | 11 | Undercharge adjustment | | 12 | Group ticket | | 13 | Exchange adjustment | | 14 | SPD or air freight | | 15 | In-flight adjustment | | 16 | Agency passenger ticket | | 17 | Agency tour order or voucher | | 18 | Agency miscellaneous charge order (MCO) | | 19 | Agency exchange order | | 20 | Agency group ticket | | 21 | Debit adjustment for duplicate refund or use | | 22 | In-flight merchandise order | | 23 | Catalogue merchandise order | | 24 | In-flight phone charges | | 25 | Frequent flyer fee or purchase | | 26 | Kennel charge | | 27 | Animal transportation charge | | 28 | Firearms case | | 29 | Upgrade charge | | 30 | Credit for unused transportation | | 31 | Credit for class of service adjustment | | 32 | Credit for denied boarding | | 33 | Credit for miscellaneous refund | | 34 | Credit for lost ticket refund | | 35 | Credit for exchange refund | | 36 | Credit for overcharge adjustment | | 37 | Credit for multiple Unused tickets | | 38 | Exchange order | | 39 | Self-service ticket | | 41 | In-flight duty-free purchase | | 42 | Senior citizen discount booklets | | 43 | Club membership fee | | 44 | Coupon book | | 45 | In-flight charges | | 46 | Tour deposit | | 47 | Frequent flyer overnight delivery charge | | 48 | Frequent flyer fulfillment | | 49 | Small package delivery | | 50 | Vendor sale | | 51 | Miscellaneous taxes or fees | | 52 | Travel agency fee | | 60 | Vendor refund or credit | | 64 | Duty free sale | | 65 | Preferred seat upgrade | | 66 | Cabin upgrade | | 67 | Lounge or club access or day pass | | 68 | Agent assisted reservation or ticketing fee | | 69 | Ticket change or cancel fee | | 70 | Trip insurance | | 71 | Unaccompanied minor | | 72 | Standby fee | | 73 | Curbside baggage | | 74 | In-flight medical equipment | | 75 | Ticket or pass print fee | | 76 | Checked sporting or special equipment | | 77 | Dry ice fee | | 78 | Mail or postage fee | | 79 | Club membership fee or temporary trial | | 80 | Frequent flyer activation or reinstatement | | 81 | Gift certificate | | 82 | Onboard or in-flight prepaid voucher | | 83 | Optional services fee | | 84 | Advance purchase for excess baggage | | 85 | Advance purchase for preferred seat upgrade | | 86 | Advance purchase for cabin upgrade | | 87 | Advance purchase for optional services | | 88 | WiFi | | 89 | Packages | | 90 | In-flight entertainment or internet access | | 91 | Overweight bag fee | | 92 | Sleep sets | | 93 | Special purchase fee | 
   * @return documentType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DOCUMENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDocumentType() {
    return documentType;
  }


  @JsonProperty(JSON_PROPERTY_DOCUMENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDocumentType(String documentType) {
    this.documentType = documentType;
  }

  public CreatePaymentRequestTravelInformationTransitAirline documentNumber(String documentNumber) {
    
    this.documentNumber = documentNumber;
    return this;
  }

  /**
   * The field is not currently supported. 
   * @return documentNumber
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DOCUMENT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDocumentNumber() {
    return documentNumber;
  }


  @JsonProperty(JSON_PROPERTY_DOCUMENT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDocumentNumber(String documentNumber) {
    this.documentNumber = documentNumber;
  }

  public CreatePaymentRequestTravelInformationTransitAirline documentNumberOfParts(Integer documentNumberOfParts) {
    
    this.documentNumberOfParts = documentNumberOfParts;
    return this;
  }

  /**
   * The field is not currently supported. 
   * @return documentNumberOfParts
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DOCUMENT_NUMBER_OF_PARTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getDocumentNumberOfParts() {
    return documentNumberOfParts;
  }


  @JsonProperty(JSON_PROPERTY_DOCUMENT_NUMBER_OF_PARTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDocumentNumberOfParts(Integer documentNumberOfParts) {
    this.documentNumberOfParts = documentNumberOfParts;
  }

  public CreatePaymentRequestTravelInformationTransitAirline invoiceNumber(String invoiceNumber) {
    
    this.invoiceNumber = invoiceNumber;
    return this;
  }

  /**
   * Invoice number for the airline transaction. 
   * @return invoiceNumber
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INVOICE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getInvoiceNumber() {
    return invoiceNumber;
  }


  @JsonProperty(JSON_PROPERTY_INVOICE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInvoiceNumber(String invoiceNumber) {
    this.invoiceNumber = invoiceNumber;
  }

  public CreatePaymentRequestTravelInformationTransitAirline invoiceDate(Integer invoiceDate) {
    
    this.invoiceDate = invoiceDate;
    return this;
  }

  /**
   * Invoice date. The format is YYYYMMDD. If this value is included in the request, it is used in the creation of the invoice number. See \&quot;Invoice Number,\&quot; 
   * @return invoiceDate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INVOICE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getInvoiceDate() {
    return invoiceDate;
  }


  @JsonProperty(JSON_PROPERTY_INVOICE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInvoiceDate(Integer invoiceDate) {
    this.invoiceDate = invoiceDate;
  }

  public CreatePaymentRequestTravelInformationTransitAirline additionalCharges(String additionalCharges) {
    
    this.additionalCharges = additionalCharges;
    return this;
  }

  /**
   * Description of the charge if the charge does not involve an airline ticket. For example: Excess baggage. 
   * @return additionalCharges
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ADDITIONAL_CHARGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAdditionalCharges() {
    return additionalCharges;
  }


  @JsonProperty(JSON_PROPERTY_ADDITIONAL_CHARGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAdditionalCharges(String additionalCharges) {
    this.additionalCharges = additionalCharges;
  }

  public CreatePaymentRequestTravelInformationTransitAirline totalFeeAmount(String totalFeeAmount) {
    
    this.totalFeeAmount = totalFeeAmount;
    return this;
  }

  /**
   * Total fee for the ticket. This value cannot exceed &#x60;99999999999999999999&#x60; (twenty 9s). Format: English characters only. Optional request field. 
   * @return totalFeeAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL_FEE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTotalFeeAmount() {
    return totalFeeAmount;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_FEE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalFeeAmount(String totalFeeAmount) {
    this.totalFeeAmount = totalFeeAmount;
  }

  public CreatePaymentRequestTravelInformationTransitAirline clearingSequence(String clearingSequence) {
    
    this.clearingSequence = clearingSequence;
    return this;
  }

  /**
   * Number that identifies the clearing message when multiple clearing messages are allowed per authorized transaction. Each clearing message linked to one authorization request must include a unique clearing sequence number between 1 and the total number of clearing records. Format: English characters only. Optional request field. 
   * @return clearingSequence
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CLEARING_SEQUENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getClearingSequence() {
    return clearingSequence;
  }


  @JsonProperty(JSON_PROPERTY_CLEARING_SEQUENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setClearingSequence(String clearingSequence) {
    this.clearingSequence = clearingSequence;
  }

  public CreatePaymentRequestTravelInformationTransitAirline clearingCount(String clearingCount) {
    
    this.clearingCount = clearingCount;
    return this;
  }

  /**
   * Total number of clearing messages associated with the authorization request. Format: English characters only. Optional request field. 
   * @return clearingCount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CLEARING_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getClearingCount() {
    return clearingCount;
  }


  @JsonProperty(JSON_PROPERTY_CLEARING_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setClearingCount(String clearingCount) {
    this.clearingCount = clearingCount;
  }

  public CreatePaymentRequestTravelInformationTransitAirline totalClearingAmount(String totalClearingAmount) {
    
    this.totalClearingAmount = totalClearingAmount;
    return this;
  }

  /**
   * Total clearing amount for all transactions in the clearing count set. This value cannot exceed &#x60;99999999999999999999&#x60; (twenty 9s). Format: English characters only. If this field is not set and if the total amount from the original authorization is not NULL, the total clearing amount is set to the total amount from the original authorization. 
   * @return totalClearingAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL_CLEARING_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTotalClearingAmount() {
    return totalClearingAmount;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_CLEARING_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalClearingAmount(String totalClearingAmount) {
    this.totalClearingAmount = totalClearingAmount;
  }

  public CreatePaymentRequestTravelInformationTransitAirline numberOfPassengers(Integer numberOfPassengers) {
    
    this.numberOfPassengers = numberOfPassengers;
    return this;
  }

  /**
   * Number of passengers for whom the ticket was issued. Format: English characters only. Optional request field. 
   * @return numberOfPassengers
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NUMBER_OF_PASSENGERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getNumberOfPassengers() {
    return numberOfPassengers;
  }


  @JsonProperty(JSON_PROPERTY_NUMBER_OF_PASSENGERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNumberOfPassengers(Integer numberOfPassengers) {
    this.numberOfPassengers = numberOfPassengers;
  }

  public CreatePaymentRequestTravelInformationTransitAirline reservationSystemCode(String reservationSystemCode) {
    
    this.reservationSystemCode = reservationSystemCode;
    return this;
  }

  /**
   * Code that specifies the computerized reservation system used to make the reservation and purchase the ticket. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field. 
   * @return reservationSystemCode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RESERVATION_SYSTEM_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getReservationSystemCode() {
    return reservationSystemCode;
  }


  @JsonProperty(JSON_PROPERTY_RESERVATION_SYSTEM_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReservationSystemCode(String reservationSystemCode) {
    this.reservationSystemCode = reservationSystemCode;
  }

  public CreatePaymentRequestTravelInformationTransitAirline processIdentifier(String processIdentifier) {
    
    this.processIdentifier = processIdentifier;
    return this;
  }

  /**
   * Airline process identifier. This value is the airline&#39;s three-digit IATA1 code which is used to process extended payment airline tickets. 
   * @return processIdentifier
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROCESS_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProcessIdentifier() {
    return processIdentifier;
  }


  @JsonProperty(JSON_PROPERTY_PROCESS_IDENTIFIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProcessIdentifier(String processIdentifier) {
    this.processIdentifier = processIdentifier;
  }

  public CreatePaymentRequestTravelInformationTransitAirline ticketIssueDate(String ticketIssueDate) {
    
    this.ticketIssueDate = ticketIssueDate;
    return this;
  }

  /**
   * Date on which the transaction occurred. Format: &#x60;YYYYMMDD&#x60; Format: English characters only. Optional request field. 
   * @return ticketIssueDate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TICKET_ISSUE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTicketIssueDate() {
    return ticketIssueDate;
  }


  @JsonProperty(JSON_PROPERTY_TICKET_ISSUE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTicketIssueDate(String ticketIssueDate) {
    this.ticketIssueDate = ticketIssueDate;
  }

  public CreatePaymentRequestTravelInformationTransitAirline electronicTicketIndicator(Boolean electronicTicketIndicator) {
    
    this.electronicTicketIndicator = electronicTicketIndicator;
    return this;
  }

  /**
   * Flag that indicates whether an electronic ticket was issued. Possible values: - &#x60;true&#x60; - &#x60;false&#x60; Optional request field. 
   * @return electronicTicketIndicator
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ELECTRONIC_TICKET_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getElectronicTicketIndicator() {
    return electronicTicketIndicator;
  }


  @JsonProperty(JSON_PROPERTY_ELECTRONIC_TICKET_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setElectronicTicketIndicator(Boolean electronicTicketIndicator) {
    this.electronicTicketIndicator = electronicTicketIndicator;
  }

  public CreatePaymentRequestTravelInformationTransitAirline originalTicketNumber(String originalTicketNumber) {
    
    this.originalTicketNumber = originalTicketNumber;
    return this;
  }

  /**
   * Original ticket number when the transaction is for a replacement ticket. 
   * @return originalTicketNumber
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ORIGINAL_TICKET_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOriginalTicketNumber() {
    return originalTicketNumber;
  }


  @JsonProperty(JSON_PROPERTY_ORIGINAL_TICKET_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOriginalTicketNumber(String originalTicketNumber) {
    this.originalTicketNumber = originalTicketNumber;
  }

  public CreatePaymentRequestTravelInformationTransitAirline purchaseType(String purchaseType) {
    
    this.purchaseType = purchaseType;
    return this;
  }

  /**
   * Type of purchase. Possible values: - &#x60;EXC&#x60;: Exchange ticket - &#x60;MSC&#x60;: Miscellaneous (not a ticket purchase and not a transaction related to an exchange ticket) - &#x60;REF&#x60;: Refund - &#x60;TKT&#x60;: Ticket Format: English characters only. Optional request field. 
   * @return purchaseType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PURCHASE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPurchaseType() {
    return purchaseType;
  }


  @JsonProperty(JSON_PROPERTY_PURCHASE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPurchaseType(String purchaseType) {
    this.purchaseType = purchaseType;
  }

  public CreatePaymentRequestTravelInformationTransitAirline creditReasonIndicator(String creditReasonIndicator) {
    
    this.creditReasonIndicator = creditReasonIndicator;
    return this;
  }

  /**
   * Reason for the credit. Possible values: - &#x60;A&#x60;: Cancellation of the ancillary passenger transport purchase. - &#x60;B&#x60;: Cancellation of the airline ticket and the passenger transport ancillary purchase. - &#x60;C&#x60;: Cancellation of the airline ticket. - &#x60;O&#x60;: Other. - &#x60;P&#x60;: Partial refund of the airline ticket. Format: English characters only.  Optional request field. 
   * @return creditReasonIndicator
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREDIT_REASON_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCreditReasonIndicator() {
    return creditReasonIndicator;
  }


  @JsonProperty(JSON_PROPERTY_CREDIT_REASON_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreditReasonIndicator(String creditReasonIndicator) {
    this.creditReasonIndicator = creditReasonIndicator;
  }

  public CreatePaymentRequestTravelInformationTransitAirline ticketChangeIndicator(String ticketChangeIndicator) {
    
    this.ticketChangeIndicator = ticketChangeIndicator;
    return this;
  }

  /**
   * Type of update. Possible values: - &#x60;C&#x60;: Change to the existing ticket. - &#x60;N&#x60;: New ticket. Format: English characters only Optional request field. 
   * @return ticketChangeIndicator
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TICKET_CHANGE_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTicketChangeIndicator() {
    return ticketChangeIndicator;
  }


  @JsonProperty(JSON_PROPERTY_TICKET_CHANGE_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTicketChangeIndicator(String ticketChangeIndicator) {
    this.ticketChangeIndicator = ticketChangeIndicator;
  }

  public CreatePaymentRequestTravelInformationTransitAirline planNumber(String planNumber) {
    
    this.planNumber = planNumber;
    return this;
  }

  /**
   * Plan number based on the fare. This value is provided by the airline. Format: English characters only. Optional request field. 
   * @return planNumber
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PLAN_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPlanNumber() {
    return planNumber;
  }


  @JsonProperty(JSON_PROPERTY_PLAN_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPlanNumber(String planNumber) {
    this.planNumber = planNumber;
  }

  public CreatePaymentRequestTravelInformationTransitAirline arrivalDate(String arrivalDate) {
    
    this.arrivalDate = arrivalDate;
    return this;
  }

  /**
   * Date of arrival for the last leg of the trip. Format: &#x60;MMDDYYYY&#x60; English characters only. Optional request field. 
   * @return arrivalDate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ARRIVAL_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getArrivalDate() {
    return arrivalDate;
  }


  @JsonProperty(JSON_PROPERTY_ARRIVAL_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setArrivalDate(String arrivalDate) {
    this.arrivalDate = arrivalDate;
  }

  public CreatePaymentRequestTravelInformationTransitAirline restrictedTicketDesciption(String restrictedTicketDesciption) {
    
    this.restrictedTicketDesciption = restrictedTicketDesciption;
    return this;
  }

  /**
   * Text that describes the ticket limitations, such as _nonrefundable_. Format: English characters only. Optional request field. 
   * @return restrictedTicketDesciption
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RESTRICTED_TICKET_DESCIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRestrictedTicketDesciption() {
    return restrictedTicketDesciption;
  }


  @JsonProperty(JSON_PROPERTY_RESTRICTED_TICKET_DESCIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRestrictedTicketDesciption(String restrictedTicketDesciption) {
    this.restrictedTicketDesciption = restrictedTicketDesciption;
  }

  public CreatePaymentRequestTravelInformationTransitAirline exchangeTicketAmount(String exchangeTicketAmount) {
    
    this.exchangeTicketAmount = exchangeTicketAmount;
    return this;
  }

  /**
   * Amount of the exchanged ticket. Format: English characters only. 
   * @return exchangeTicketAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXCHANGE_TICKET_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExchangeTicketAmount() {
    return exchangeTicketAmount;
  }


  @JsonProperty(JSON_PROPERTY_EXCHANGE_TICKET_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExchangeTicketAmount(String exchangeTicketAmount) {
    this.exchangeTicketAmount = exchangeTicketAmount;
  }

  public CreatePaymentRequestTravelInformationTransitAirline exchangeTicketFeeAmount(String exchangeTicketFeeAmount) {
    
    this.exchangeTicketFeeAmount = exchangeTicketFeeAmount;
    return this;
  }

  /**
   * Fee for exchanging the ticket. Format: English characters only. Optional request field. 
   * @return exchangeTicketFeeAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXCHANGE_TICKET_FEE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExchangeTicketFeeAmount() {
    return exchangeTicketFeeAmount;
  }


  @JsonProperty(JSON_PROPERTY_EXCHANGE_TICKET_FEE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExchangeTicketFeeAmount(String exchangeTicketFeeAmount) {
    this.exchangeTicketFeeAmount = exchangeTicketFeeAmount;
  }

  public CreatePaymentRequestTravelInformationTransitAirline reservationType(String reservationType) {
    
    this.reservationType = reservationType;
    return this;
  }

  /**
   * The field is not currently supported. 
   * @return reservationType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RESERVATION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getReservationType() {
    return reservationType;
  }


  @JsonProperty(JSON_PROPERTY_RESERVATION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReservationType(String reservationType) {
    this.reservationType = reservationType;
  }

  public CreatePaymentRequestTravelInformationTransitAirline boardingFeeAmount(String boardingFeeAmount) {
    
    this.boardingFeeAmount = boardingFeeAmount;
    return this;
  }

  /**
   * Boarding fee. 
   * @return boardingFeeAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BOARDING_FEE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBoardingFeeAmount() {
    return boardingFeeAmount;
  }


  @JsonProperty(JSON_PROPERTY_BOARDING_FEE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBoardingFeeAmount(String boardingFeeAmount) {
    this.boardingFeeAmount = boardingFeeAmount;
  }

  public CreatePaymentRequestTravelInformationTransitAirline legs(List<CreatePaymentRequestTravelInformationTransitAirlineLegsInner> legs) {
    
    this.legs = legs;
    return this;
  }

  public CreatePaymentRequestTravelInformationTransitAirline addLegsItem(CreatePaymentRequestTravelInformationTransitAirlineLegsInner legsItem) {
    if (this.legs == null) {
      this.legs = new ArrayList<>();
    }
    this.legs.add(legsItem);
    return this;
  }

  /**
   * Get legs
   * @return legs
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LEGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<CreatePaymentRequestTravelInformationTransitAirlineLegsInner> getLegs() {
    return legs;
  }


  @JsonProperty(JSON_PROPERTY_LEGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLegs(List<CreatePaymentRequestTravelInformationTransitAirlineLegsInner> legs) {
    this.legs = legs;
  }

  public CreatePaymentRequestTravelInformationTransitAirline ancillaryInformation(CreatePaymentRequestTravelInformationTransitAirlineAncillaryInformation ancillaryInformation) {
    
    this.ancillaryInformation = ancillaryInformation;
    return this;
  }

  /**
   * Get ancillaryInformation
   * @return ancillaryInformation
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ANCILLARY_INFORMATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CreatePaymentRequestTravelInformationTransitAirlineAncillaryInformation getAncillaryInformation() {
    return ancillaryInformation;
  }


  @JsonProperty(JSON_PROPERTY_ANCILLARY_INFORMATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAncillaryInformation(CreatePaymentRequestTravelInformationTransitAirlineAncillaryInformation ancillaryInformation) {
    this.ancillaryInformation = ancillaryInformation;
  }

  public CreatePaymentRequestTravelInformationTransitAirline flightType(String flightType) {
    
    this.flightType = flightType;
    return this;
  }

  /**
   * Specifies the type of flight. One way (0) Return (1) Transit (2) Transit &amp; Return (3) Multi-City (4) 
   * @return flightType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FLIGHT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFlightType() {
    return flightType;
  }


  @JsonProperty(JSON_PROPERTY_FLIGHT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFlightType(String flightType) {
    this.flightType = flightType;
  }

  public CreatePaymentRequestTravelInformationTransitAirline insuranceAmount(String insuranceAmount) {
    
    this.insuranceAmount = insuranceAmount;
    return this;
  }

  /**
   * The total cost of the flight insurance. Example: 10000.00 
   * @return insuranceAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INSURANCE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getInsuranceAmount() {
    return insuranceAmount;
  }


  @JsonProperty(JSON_PROPERTY_INSURANCE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInsuranceAmount(String insuranceAmount) {
    this.insuranceAmount = insuranceAmount;
  }

  public CreatePaymentRequestTravelInformationTransitAirline frequentFlyerNumber(String frequentFlyerNumber) {
    
    this.frequentFlyerNumber = frequentFlyerNumber;
    return this;
  }

  /**
   * The consumer&#39;s frequent flyer number. Leave 0 if there is no frequent flyer number 
   * @return frequentFlyerNumber
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FREQUENT_FLYER_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFrequentFlyerNumber() {
    return frequentFlyerNumber;
  }


  @JsonProperty(JSON_PROPERTY_FREQUENT_FLYER_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFrequentFlyerNumber(String frequentFlyerNumber) {
    this.frequentFlyerNumber = frequentFlyerNumber;
  }

  public CreatePaymentRequestTravelInformationTransitAirline thirdPartyStatus(String thirdPartyStatus) {
    
    this.thirdPartyStatus = thirdPartyStatus;
    return this;
  }

  /**
   * Specifies if the travel agent joins the flight (0) or not (1) 
   * @return thirdPartyStatus
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_THIRD_PARTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getThirdPartyStatus() {
    return thirdPartyStatus;
  }


  @JsonProperty(JSON_PROPERTY_THIRD_PARTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setThirdPartyStatus(String thirdPartyStatus) {
    this.thirdPartyStatus = thirdPartyStatus;
  }

  public CreatePaymentRequestTravelInformationTransitAirline passengerType(String passengerType) {
    
    this.passengerType = passengerType;
    return this;
  }

  /**
   * List of passenger types in a booking code: A (Adult) C (Child) Comma separated values for total number of passenger 
   * @return passengerType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PASSENGER_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPassengerType() {
    return passengerType;
  }


  @JsonProperty(JSON_PROPERTY_PASSENGER_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPassengerType(String passengerType) {
    this.passengerType = passengerType;
  }

  public CreatePaymentRequestTravelInformationTransitAirline totalInsuranceAmount(String totalInsuranceAmount) {
    
    this.totalInsuranceAmount = totalInsuranceAmount;
    return this;
  }

  /**
   * Total insurance amount. We have per leg and not total 
   * @return totalInsuranceAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL_INSURANCE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTotalInsuranceAmount() {
    return totalInsuranceAmount;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_INSURANCE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalInsuranceAmount(String totalInsuranceAmount) {
    this.totalInsuranceAmount = totalInsuranceAmount;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreatePaymentRequestTravelInformationTransitAirline createPaymentRequestTravelInformationTransitAirline = (CreatePaymentRequestTravelInformationTransitAirline) o;
    return Objects.equals(this.isDomestic, createPaymentRequestTravelInformationTransitAirline.isDomestic) &&
        Objects.equals(this.bookingReferenceNumber, createPaymentRequestTravelInformationTransitAirline.bookingReferenceNumber) &&
        Objects.equals(this.carrierName, createPaymentRequestTravelInformationTransitAirline.carrierName) &&
        Objects.equals(this.ticketIssuer, createPaymentRequestTravelInformationTransitAirline.ticketIssuer) &&
        Objects.equals(this.ticketNumber, createPaymentRequestTravelInformationTransitAirline.ticketNumber) &&
        Objects.equals(this.checkDigit, createPaymentRequestTravelInformationTransitAirline.checkDigit) &&
        Objects.equals(this.restrictedTicketIndicator, createPaymentRequestTravelInformationTransitAirline.restrictedTicketIndicator) &&
        Objects.equals(this.transactionType, createPaymentRequestTravelInformationTransitAirline.transactionType) &&
        Objects.equals(this.extendedPaymentCode, createPaymentRequestTravelInformationTransitAirline.extendedPaymentCode) &&
        Objects.equals(this.passengerName, createPaymentRequestTravelInformationTransitAirline.passengerName) &&
        Objects.equals(this.customerCode, createPaymentRequestTravelInformationTransitAirline.customerCode) &&
        Objects.equals(this.documentType, createPaymentRequestTravelInformationTransitAirline.documentType) &&
        Objects.equals(this.documentNumber, createPaymentRequestTravelInformationTransitAirline.documentNumber) &&
        Objects.equals(this.documentNumberOfParts, createPaymentRequestTravelInformationTransitAirline.documentNumberOfParts) &&
        Objects.equals(this.invoiceNumber, createPaymentRequestTravelInformationTransitAirline.invoiceNumber) &&
        Objects.equals(this.invoiceDate, createPaymentRequestTravelInformationTransitAirline.invoiceDate) &&
        Objects.equals(this.additionalCharges, createPaymentRequestTravelInformationTransitAirline.additionalCharges) &&
        Objects.equals(this.totalFeeAmount, createPaymentRequestTravelInformationTransitAirline.totalFeeAmount) &&
        Objects.equals(this.clearingSequence, createPaymentRequestTravelInformationTransitAirline.clearingSequence) &&
        Objects.equals(this.clearingCount, createPaymentRequestTravelInformationTransitAirline.clearingCount) &&
        Objects.equals(this.totalClearingAmount, createPaymentRequestTravelInformationTransitAirline.totalClearingAmount) &&
        Objects.equals(this.numberOfPassengers, createPaymentRequestTravelInformationTransitAirline.numberOfPassengers) &&
        Objects.equals(this.reservationSystemCode, createPaymentRequestTravelInformationTransitAirline.reservationSystemCode) &&
        Objects.equals(this.processIdentifier, createPaymentRequestTravelInformationTransitAirline.processIdentifier) &&
        Objects.equals(this.ticketIssueDate, createPaymentRequestTravelInformationTransitAirline.ticketIssueDate) &&
        Objects.equals(this.electronicTicketIndicator, createPaymentRequestTravelInformationTransitAirline.electronicTicketIndicator) &&
        Objects.equals(this.originalTicketNumber, createPaymentRequestTravelInformationTransitAirline.originalTicketNumber) &&
        Objects.equals(this.purchaseType, createPaymentRequestTravelInformationTransitAirline.purchaseType) &&
        Objects.equals(this.creditReasonIndicator, createPaymentRequestTravelInformationTransitAirline.creditReasonIndicator) &&
        Objects.equals(this.ticketChangeIndicator, createPaymentRequestTravelInformationTransitAirline.ticketChangeIndicator) &&
        Objects.equals(this.planNumber, createPaymentRequestTravelInformationTransitAirline.planNumber) &&
        Objects.equals(this.arrivalDate, createPaymentRequestTravelInformationTransitAirline.arrivalDate) &&
        Objects.equals(this.restrictedTicketDesciption, createPaymentRequestTravelInformationTransitAirline.restrictedTicketDesciption) &&
        Objects.equals(this.exchangeTicketAmount, createPaymentRequestTravelInformationTransitAirline.exchangeTicketAmount) &&
        Objects.equals(this.exchangeTicketFeeAmount, createPaymentRequestTravelInformationTransitAirline.exchangeTicketFeeAmount) &&
        Objects.equals(this.reservationType, createPaymentRequestTravelInformationTransitAirline.reservationType) &&
        Objects.equals(this.boardingFeeAmount, createPaymentRequestTravelInformationTransitAirline.boardingFeeAmount) &&
        Objects.equals(this.legs, createPaymentRequestTravelInformationTransitAirline.legs) &&
        Objects.equals(this.ancillaryInformation, createPaymentRequestTravelInformationTransitAirline.ancillaryInformation) &&
        Objects.equals(this.flightType, createPaymentRequestTravelInformationTransitAirline.flightType) &&
        Objects.equals(this.insuranceAmount, createPaymentRequestTravelInformationTransitAirline.insuranceAmount) &&
        Objects.equals(this.frequentFlyerNumber, createPaymentRequestTravelInformationTransitAirline.frequentFlyerNumber) &&
        Objects.equals(this.thirdPartyStatus, createPaymentRequestTravelInformationTransitAirline.thirdPartyStatus) &&
        Objects.equals(this.passengerType, createPaymentRequestTravelInformationTransitAirline.passengerType) &&
        Objects.equals(this.totalInsuranceAmount, createPaymentRequestTravelInformationTransitAirline.totalInsuranceAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isDomestic, bookingReferenceNumber, carrierName, ticketIssuer, ticketNumber, checkDigit, restrictedTicketIndicator, transactionType, extendedPaymentCode, passengerName, customerCode, documentType, documentNumber, documentNumberOfParts, invoiceNumber, invoiceDate, additionalCharges, totalFeeAmount, clearingSequence, clearingCount, totalClearingAmount, numberOfPassengers, reservationSystemCode, processIdentifier, ticketIssueDate, electronicTicketIndicator, originalTicketNumber, purchaseType, creditReasonIndicator, ticketChangeIndicator, planNumber, arrivalDate, restrictedTicketDesciption, exchangeTicketAmount, exchangeTicketFeeAmount, reservationType, boardingFeeAmount, legs, ancillaryInformation, flightType, insuranceAmount, frequentFlyerNumber, thirdPartyStatus, passengerType, totalInsuranceAmount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreatePaymentRequestTravelInformationTransitAirline {\n");
    sb.append("    isDomestic: ").append(toIndentedString(isDomestic)).append("\n");
    sb.append("    bookingReferenceNumber: ").append(toIndentedString(bookingReferenceNumber)).append("\n");
    sb.append("    carrierName: ").append(toIndentedString(carrierName)).append("\n");
    sb.append("    ticketIssuer: ").append(toIndentedString(ticketIssuer)).append("\n");
    sb.append("    ticketNumber: ").append(toIndentedString(ticketNumber)).append("\n");
    sb.append("    checkDigit: ").append(toIndentedString(checkDigit)).append("\n");
    sb.append("    restrictedTicketIndicator: ").append(toIndentedString(restrictedTicketIndicator)).append("\n");
    sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
    sb.append("    extendedPaymentCode: ").append(toIndentedString(extendedPaymentCode)).append("\n");
    sb.append("    passengerName: ").append(toIndentedString(passengerName)).append("\n");
    sb.append("    customerCode: ").append(toIndentedString(customerCode)).append("\n");
    sb.append("    documentType: ").append(toIndentedString(documentType)).append("\n");
    sb.append("    documentNumber: ").append(toIndentedString(documentNumber)).append("\n");
    sb.append("    documentNumberOfParts: ").append(toIndentedString(documentNumberOfParts)).append("\n");
    sb.append("    invoiceNumber: ").append(toIndentedString(invoiceNumber)).append("\n");
    sb.append("    invoiceDate: ").append(toIndentedString(invoiceDate)).append("\n");
    sb.append("    additionalCharges: ").append(toIndentedString(additionalCharges)).append("\n");
    sb.append("    totalFeeAmount: ").append(toIndentedString(totalFeeAmount)).append("\n");
    sb.append("    clearingSequence: ").append(toIndentedString(clearingSequence)).append("\n");
    sb.append("    clearingCount: ").append(toIndentedString(clearingCount)).append("\n");
    sb.append("    totalClearingAmount: ").append(toIndentedString(totalClearingAmount)).append("\n");
    sb.append("    numberOfPassengers: ").append(toIndentedString(numberOfPassengers)).append("\n");
    sb.append("    reservationSystemCode: ").append(toIndentedString(reservationSystemCode)).append("\n");
    sb.append("    processIdentifier: ").append(toIndentedString(processIdentifier)).append("\n");
    sb.append("    ticketIssueDate: ").append(toIndentedString(ticketIssueDate)).append("\n");
    sb.append("    electronicTicketIndicator: ").append(toIndentedString(electronicTicketIndicator)).append("\n");
    sb.append("    originalTicketNumber: ").append(toIndentedString(originalTicketNumber)).append("\n");
    sb.append("    purchaseType: ").append(toIndentedString(purchaseType)).append("\n");
    sb.append("    creditReasonIndicator: ").append(toIndentedString(creditReasonIndicator)).append("\n");
    sb.append("    ticketChangeIndicator: ").append(toIndentedString(ticketChangeIndicator)).append("\n");
    sb.append("    planNumber: ").append(toIndentedString(planNumber)).append("\n");
    sb.append("    arrivalDate: ").append(toIndentedString(arrivalDate)).append("\n");
    sb.append("    restrictedTicketDesciption: ").append(toIndentedString(restrictedTicketDesciption)).append("\n");
    sb.append("    exchangeTicketAmount: ").append(toIndentedString(exchangeTicketAmount)).append("\n");
    sb.append("    exchangeTicketFeeAmount: ").append(toIndentedString(exchangeTicketFeeAmount)).append("\n");
    sb.append("    reservationType: ").append(toIndentedString(reservationType)).append("\n");
    sb.append("    boardingFeeAmount: ").append(toIndentedString(boardingFeeAmount)).append("\n");
    sb.append("    legs: ").append(toIndentedString(legs)).append("\n");
    sb.append("    ancillaryInformation: ").append(toIndentedString(ancillaryInformation)).append("\n");
    sb.append("    flightType: ").append(toIndentedString(flightType)).append("\n");
    sb.append("    insuranceAmount: ").append(toIndentedString(insuranceAmount)).append("\n");
    sb.append("    frequentFlyerNumber: ").append(toIndentedString(frequentFlyerNumber)).append("\n");
    sb.append("    thirdPartyStatus: ").append(toIndentedString(thirdPartyStatus)).append("\n");
    sb.append("    passengerType: ").append(toIndentedString(passengerType)).append("\n");
    sb.append("    totalInsuranceAmount: ").append(toIndentedString(totalInsuranceAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

