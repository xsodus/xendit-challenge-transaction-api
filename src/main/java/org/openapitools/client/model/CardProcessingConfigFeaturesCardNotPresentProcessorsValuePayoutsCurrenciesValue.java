/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayoutsCurrenciesValue
 */
@JsonPropertyOrder({
  CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayoutsCurrenciesValue.JSON_PROPERTY_ENABLED,
  CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayoutsCurrenciesValue.JSON_PROPERTY_ENABLED_CARD_PRESENT,
  CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayoutsCurrenciesValue.JSON_PROPERTY_ENABLED_CARD_NOT_PRESENT,
  CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayoutsCurrenciesValue.JSON_PROPERTY_MERCHANT_ID,
  CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayoutsCurrenciesValue.JSON_PROPERTY_TERMINAL_ID,
  CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayoutsCurrenciesValue.JSON_PROPERTY_TERMINAL_IDS,
  CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayoutsCurrenciesValue.JSON_PROPERTY_SERVICE_ENABLEMENT_NUMBER
})
@JsonTypeName("CardProcessingConfig_features_cardNotPresent_processors_value_payouts_currencies_value")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T18:32:10.370382+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayoutsCurrenciesValue {
  public static final String JSON_PROPERTY_ENABLED = "enabled";
  private Boolean enabled;

  public static final String JSON_PROPERTY_ENABLED_CARD_PRESENT = "enabledCardPresent";
  private Boolean enabledCardPresent;

  public static final String JSON_PROPERTY_ENABLED_CARD_NOT_PRESENT = "enabledCardNotPresent";
  private Boolean enabledCardNotPresent;

  public static final String JSON_PROPERTY_MERCHANT_ID = "merchantId";
  private String merchantId;

  public static final String JSON_PROPERTY_TERMINAL_ID = "terminalId";
  private String terminalId;

  public static final String JSON_PROPERTY_TERMINAL_IDS = "terminalIds";
  private List<String> terminalIds = new ArrayList<>();

  public static final String JSON_PROPERTY_SERVICE_ENABLEMENT_NUMBER = "serviceEnablementNumber";
  private String serviceEnablementNumber;

  public CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayoutsCurrenciesValue() {
  }

  public CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayoutsCurrenciesValue enabled(Boolean enabled) {
    
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnabled() {
    return enabled;
  }


  @JsonProperty(JSON_PROPERTY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayoutsCurrenciesValue enabledCardPresent(Boolean enabledCardPresent) {
    
    this.enabledCardPresent = enabledCardPresent;
    return this;
  }

  /**
   * Indicates whether the card-present transaction is activated for the selected currency. If both enabledCardPresent and enabledCardNotPresent are set to null, then enabledCardPresent will have the value of enabled. 
   * @return enabledCardPresent
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLED_CARD_PRESENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnabledCardPresent() {
    return enabledCardPresent;
  }


  @JsonProperty(JSON_PROPERTY_ENABLED_CARD_PRESENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnabledCardPresent(Boolean enabledCardPresent) {
    this.enabledCardPresent = enabledCardPresent;
  }

  public CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayoutsCurrenciesValue enabledCardNotPresent(Boolean enabledCardNotPresent) {
    
    this.enabledCardNotPresent = enabledCardNotPresent;
    return this;
  }

  /**
   * Indicates whether the card-present transaction is activated for the selected currency. If both enabledCardPresent and enabledCardNotPresent are set to null, then enabledCardNotPresent will have the value of enabled. 
   * @return enabledCardNotPresent
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLED_CARD_NOT_PRESENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnabledCardNotPresent() {
    return enabledCardNotPresent;
  }


  @JsonProperty(JSON_PROPERTY_ENABLED_CARD_NOT_PRESENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnabledCardNotPresent(Boolean enabledCardNotPresent) {
    this.enabledCardNotPresent = enabledCardNotPresent;
  }

  public CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayoutsCurrenciesValue merchantId(String merchantId) {
    
    this.merchantId = merchantId;
    return this;
  }

  /**
   * Merchant ID assigned by an acquirer or a processor. Should not be overriden by any other party.
   * @return merchantId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MERCHANT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMerchantId() {
    return merchantId;
  }


  @JsonProperty(JSON_PROPERTY_MERCHANT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }

  public CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayoutsCurrenciesValue terminalId(String terminalId) {
    
    this.terminalId = terminalId;
    return this;
  }

  /**
   * The &#39;Terminal Id&#39; aka TID, is an identifier used for with your payments processor. Depending on the processor and payment acceptance type this may also be the default Terminal ID used for Card Present and Virtual Terminal transactions. 
   * @return terminalId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TERMINAL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTerminalId() {
    return terminalId;
  }


  @JsonProperty(JSON_PROPERTY_TERMINAL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTerminalId(String terminalId) {
    this.terminalId = terminalId;
  }

  public CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayoutsCurrenciesValue terminalIds(List<String> terminalIds) {
    
    this.terminalIds = terminalIds;
    return this;
  }

  public CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayoutsCurrenciesValue addTerminalIdsItem(String terminalIdsItem) {
    if (this.terminalIds == null) {
      this.terminalIds = new ArrayList<>();
    }
    this.terminalIds.add(terminalIdsItem);
    return this;
  }

  /**
   * Applicable for Prisma (prisma) processor.
   * @return terminalIds
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TERMINAL_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getTerminalIds() {
    return terminalIds;
  }


  @JsonProperty(JSON_PROPERTY_TERMINAL_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTerminalIds(List<String> terminalIds) {
    this.terminalIds = terminalIds;
  }

  public CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayoutsCurrenciesValue serviceEnablementNumber(String serviceEnablementNumber) {
    
    this.serviceEnablementNumber = serviceEnablementNumber;
    return this;
  }

  /**
   * Service Establishment Number (a.k.a. SE Number) is a unique ten-digit number assigned by American Express to a merchant that accepts American Express cards. 10 digit number provided by acquirer currency. This may be unique for each currency, however it depends on the way the processor is set up for the merchant. 
   * @return serviceEnablementNumber
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SERVICE_ENABLEMENT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getServiceEnablementNumber() {
    return serviceEnablementNumber;
  }


  @JsonProperty(JSON_PROPERTY_SERVICE_ENABLEMENT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setServiceEnablementNumber(String serviceEnablementNumber) {
    this.serviceEnablementNumber = serviceEnablementNumber;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayoutsCurrenciesValue cardProcessingConfigFeaturesCardNotPresentProcessorsValuePayoutsCurrenciesValue = (CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayoutsCurrenciesValue) o;
    return Objects.equals(this.enabled, cardProcessingConfigFeaturesCardNotPresentProcessorsValuePayoutsCurrenciesValue.enabled) &&
        Objects.equals(this.enabledCardPresent, cardProcessingConfigFeaturesCardNotPresentProcessorsValuePayoutsCurrenciesValue.enabledCardPresent) &&
        Objects.equals(this.enabledCardNotPresent, cardProcessingConfigFeaturesCardNotPresentProcessorsValuePayoutsCurrenciesValue.enabledCardNotPresent) &&
        Objects.equals(this.merchantId, cardProcessingConfigFeaturesCardNotPresentProcessorsValuePayoutsCurrenciesValue.merchantId) &&
        Objects.equals(this.terminalId, cardProcessingConfigFeaturesCardNotPresentProcessorsValuePayoutsCurrenciesValue.terminalId) &&
        Objects.equals(this.terminalIds, cardProcessingConfigFeaturesCardNotPresentProcessorsValuePayoutsCurrenciesValue.terminalIds) &&
        Objects.equals(this.serviceEnablementNumber, cardProcessingConfigFeaturesCardNotPresentProcessorsValuePayoutsCurrenciesValue.serviceEnablementNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, enabledCardPresent, enabledCardNotPresent, merchantId, terminalId, terminalIds, serviceEnablementNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardProcessingConfigFeaturesCardNotPresentProcessorsValuePayoutsCurrenciesValue {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    enabledCardPresent: ").append(toIndentedString(enabledCardPresent)).append("\n");
    sb.append("    enabledCardNotPresent: ").append(toIndentedString(enabledCardNotPresent)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    terminalId: ").append(toIndentedString(terminalId)).append("\n");
    sb.append("    terminalIds: ").append(toIndentedString(terminalIds)).append("\n");
    sb.append("    serviceEnablementNumber: ").append(toIndentedString(serviceEnablementNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

