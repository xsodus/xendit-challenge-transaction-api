/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.ECheckConfigCommonInternalOnly;
import org.openapitools.client.model.ECheckConfigCommonProcessorsValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ECheckConfigCommon
 */
@JsonPropertyOrder({
  ECheckConfigCommon.JSON_PROPERTY_PROCESSORS,
  ECheckConfigCommon.JSON_PROPERTY_INTERNAL_ONLY,
  ECheckConfigCommon.JSON_PROPERTY_ACCOUNT_HOLDER_NAME,
  ECheckConfigCommon.JSON_PROPERTY_ACCOUNT_TYPE,
  ECheckConfigCommon.JSON_PROPERTY_ACCOUNT_ROUTING_NUMBER,
  ECheckConfigCommon.JSON_PROPERTY_ACCOUNT_NUMBER
})
@JsonTypeName("ECheckConfig_common")
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T19:17:21.826843+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class ECheckConfigCommon {
  public static final String JSON_PROPERTY_PROCESSORS = "processors";
  private Map<String, ECheckConfigCommonProcessorsValue> processors = new HashMap<>();

  public static final String JSON_PROPERTY_INTERNAL_ONLY = "internalOnly";
  private ECheckConfigCommonInternalOnly internalOnly;

  public static final String JSON_PROPERTY_ACCOUNT_HOLDER_NAME = "accountHolderName";
  private String accountHolderName;

  public static final String JSON_PROPERTY_ACCOUNT_TYPE = "accountType";
  private String accountType;

  public static final String JSON_PROPERTY_ACCOUNT_ROUTING_NUMBER = "accountRoutingNumber";
  private String accountRoutingNumber;

  public static final String JSON_PROPERTY_ACCOUNT_NUMBER = "accountNumber";
  private String accountNumber;

  public ECheckConfigCommon() {
  }

  public ECheckConfigCommon processors(Map<String, ECheckConfigCommonProcessorsValue> processors) {
    
    this.processors = processors;
    return this;
  }

  public ECheckConfigCommon putProcessorsItem(String key, ECheckConfigCommonProcessorsValue processorsItem) {
    if (this.processors == null) {
      this.processors = new HashMap<>();
    }
    this.processors.put(key, processorsItem);
    return this;
  }

  /**
   * Get processors
   * @return processors
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROCESSORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, ECheckConfigCommonProcessorsValue> getProcessors() {
    return processors;
  }


  @JsonProperty(JSON_PROPERTY_PROCESSORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProcessors(Map<String, ECheckConfigCommonProcessorsValue> processors) {
    this.processors = processors;
  }

  public ECheckConfigCommon internalOnly(ECheckConfigCommonInternalOnly internalOnly) {
    
    this.internalOnly = internalOnly;
    return this;
  }

  /**
   * Get internalOnly
   * @return internalOnly
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INTERNAL_ONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ECheckConfigCommonInternalOnly getInternalOnly() {
    return internalOnly;
  }


  @JsonProperty(JSON_PROPERTY_INTERNAL_ONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInternalOnly(ECheckConfigCommonInternalOnly internalOnly) {
    this.internalOnly = internalOnly;
  }

  public ECheckConfigCommon accountHolderName(String accountHolderName) {
    
    this.accountHolderName = accountHolderName;
    return this;
  }

  /**
   * Mandatory  Name on Merchant&#39;s Bank Account Only ASCII (Hex 20 to Hex 7E) 
   * @return accountHolderName
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACCOUNT_HOLDER_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getAccountHolderName() {
    return accountHolderName;
  }


  @JsonProperty(JSON_PROPERTY_ACCOUNT_HOLDER_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAccountHolderName(String accountHolderName) {
    this.accountHolderName = accountHolderName;
  }

  public ECheckConfigCommon accountType(String accountType) {
    
    this.accountType = accountType;
    return this;
  }

  /**
   * Mandatory  Type of account for Merchant&#39;s Bank Account Possible values: - checking - savings - corporatechecking - corporatesavings 
   * @return accountType
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACCOUNT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getAccountType() {
    return accountType;
  }


  @JsonProperty(JSON_PROPERTY_ACCOUNT_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAccountType(String accountType) {
    this.accountType = accountType;
  }

  public ECheckConfigCommon accountRoutingNumber(String accountRoutingNumber) {
    
    this.accountRoutingNumber = accountRoutingNumber;
    return this;
  }

  /**
   * Mandatory  Routing number for Merchant&#39;s Bank Account US Account Routing Number 
   * @return accountRoutingNumber
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACCOUNT_ROUTING_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getAccountRoutingNumber() {
    return accountRoutingNumber;
  }


  @JsonProperty(JSON_PROPERTY_ACCOUNT_ROUTING_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAccountRoutingNumber(String accountRoutingNumber) {
    this.accountRoutingNumber = accountRoutingNumber;
  }

  public ECheckConfigCommon accountNumber(String accountNumber) {
    
    this.accountNumber = accountNumber;
    return this;
  }

  /**
   * Mandatory  Account number for Merchant&#39;s Bank Account 
   * @return accountNumber
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACCOUNT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getAccountNumber() {
    return accountNumber;
  }


  @JsonProperty(JSON_PROPERTY_ACCOUNT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAccountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ECheckConfigCommon echeckConfigCommon = (ECheckConfigCommon) o;
    return Objects.equals(this.processors, echeckConfigCommon.processors) &&
        Objects.equals(this.internalOnly, echeckConfigCommon.internalOnly) &&
        Objects.equals(this.accountHolderName, echeckConfigCommon.accountHolderName) &&
        Objects.equals(this.accountType, echeckConfigCommon.accountType) &&
        Objects.equals(this.accountRoutingNumber, echeckConfigCommon.accountRoutingNumber) &&
        Objects.equals(this.accountNumber, echeckConfigCommon.accountNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(processors, internalOnly, accountHolderName, accountType, accountRoutingNumber, accountNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ECheckConfigCommon {\n");
    sb.append("    processors: ").append(toIndentedString(processors)).append("\n");
    sb.append("    internalOnly: ").append(toIndentedString(internalOnly)).append("\n");
    sb.append("    accountHolderName: ").append(toIndentedString(accountHolderName)).append("\n");
    sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
    sb.append("    accountRoutingNumber: ").append(toIndentedString(accountRoutingNumber)).append("\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

