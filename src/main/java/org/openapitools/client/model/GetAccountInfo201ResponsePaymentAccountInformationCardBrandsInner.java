/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * GetAccountInfo201ResponsePaymentAccountInformationCardBrandsInner
 */
@JsonPropertyOrder({
  GetAccountInfo201ResponsePaymentAccountInformationCardBrandsInner.JSON_PROPERTY_TYPE,
  GetAccountInfo201ResponsePaymentAccountInformationCardBrandsInner.JSON_PROPERTY_BRAND_NAME
})
@JsonTypeName("getAccountInfo_201_response_paymentAccountInformation_card_brands_inner")
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T19:17:21.826843+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class GetAccountInfo201ResponsePaymentAccountInformationCardBrandsInner {
  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  public static final String JSON_PROPERTY_BRAND_NAME = "brandName";
  private String brandName;

  public GetAccountInfo201ResponsePaymentAccountInformationCardBrandsInner() {
  }

  public GetAccountInfo201ResponsePaymentAccountInformationCardBrandsInner type(String type) {
    
    this.type = type;
    return this;
  }

  /**
   * This field contains the 3-digit value that indicates the card type.  Possible values: - &#x60;001&#x60;: Visa. For card-present transactions on all processors except SIX, the Visa Electron card type is processed the same way that the Visa debit card is processed. Use card type value &#x60;001&#x60; for Visa Electron. - &#x60;002&#x60;: Mastercard, Eurocard[^1], which is a European regional brand of Mastercard. - &#x60;003&#x60;: American Express - &#x60;004&#x60;: Discover - &#x60;005&#x60;: Diners Club - &#x60;006&#x60;: Carte Blanche[^1] - &#x60;007&#x60;: JCB[^1] - &#x60;008&#x60;: Optima - &#x60;011&#x60;: Twinpay Credit Card - &#x60;012&#x60;: Twinpay Debit Card - &#x60;013&#x60;: Walmart - &#x60;014&#x60;: Enroute[^1] - &#x60;015&#x60;: Lowes Consumer - &#x60;016&#x60;: Home Depot Consumer - &#x60;017&#x60;: MBNA - &#x60;018&#x60;: Dick&#39;s Sportwear - &#x60;019&#x60;: Casual Corner - &#x60;020&#x60;: Sears - &#x60;021&#x60;: JAL[^1] - &#x60;023&#x60;: Disney Card - &#x60;024&#x60;: Switch/Solo - &#x60;025&#x60;: Sams Club Consumer - &#x60;026&#x60;: Sams Club Business - &#x60;027&#x60;: Nicos - &#x60;029&#x60;: Bebe - &#x60;030&#x60;: Restoration Hardware - &#x60;031&#x60;: Delta[^1]: Use this value only for Ingenico ePayments. For other processors, use &#x60;001&#x60; for all Visa card types. - &#x60;032&#x60;: Solo - &#x60;033&#x60;: Visa Electron[^1]. Use this value only for Ingenico ePayments and SIX. For other processors, use &#x60;001&#x60; for all Visa card types. - &#x60;034&#x60;: Dankort[^1] - &#x60;035&#x60;: Laser - &#x60;036&#x60;: Cartes Bancaires[^1] - &#x60;037&#x60;: Carta Si[^1] - &#x60;039&#x60;: Encoded account number[^1] - &#x60;040&#x60;: UATP[^1] - &#x60;041&#x60;: HOUSEHOLD - &#x60;042&#x60;: Maestro (International)[^1] - &#x60;043&#x60;: GE MONEY - &#x60;044&#x60;: Korean Cards - &#x60;045&#x60;: Style - &#x60;046&#x60;: J.Crew - &#x60;050&#x60;: Hipercard[^2,3] - &#x60;051&#x60;: Aura - &#x60;052&#x60;: Redecard - &#x60;053&#x60;: Orico Card - &#x60;054&#x60;: Elo[^3] - &#x60;055&#x60;: Capital One Private Label - &#x60;058&#x60;: Carnet - &#x60;059&#x60;: ValueLink - &#x60;061&#x60;: RuPay - &#x60;062&#x60;: China UnionPay - &#x60;063&#x60;: Falabella Private Label - &#x60;064&#x60;: Prompt Card - &#x60;065&#x60;: Korean Domestic - &#x60;066&#x60;: Banricompras  [^1]: For this card type, you must include the &#x60;paymentInformation.card.type&#x60; or &#x60;paymentInformation.tokenizedCard.type&#x60; field in your request for an authorization or a stand-alone credit.  [^2]: For this card type on Cielo 3.0, you must include the &#x60;paymentInformation.card.type&#x60; or &#x60;paymentInformation.tokenizedCard.type&#x60; field in a request for an authorization or a stand-alone credit. This card type is not supported on Cielo 1.5.  [^3]: For this card type on Getnet and Rede, you must include the &#x60;paymentInformation.card.type&#x60; or &#x60;paymentInformation.tokenizedCard.type&#x60; field in a request for an authorization or a stand-alone credit. 
   * @return type
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(String type) {
    this.type = type;
  }

  public GetAccountInfo201ResponsePaymentAccountInformationCardBrandsInner brandName(String brandName) {
    
    this.brandName = brandName;
    return this;
  }

  /**
   * This field contains the card brand name.   Some of the possible values (not an exhaustive list) are -    - VISA   - MASTERCARD   - AMERICAN EXPRESS   - DISCOVER   - DINERS CLUB   - CARTE BLANCHE   - JCB   - OPTIMA   - TWINPAY CREDIT CARD   - TWINPAY DEBIT CARD   - WALMART   - ENROUTE   - LOWES CONSUMER   - HOME DEPOT CONSUMER   - MBNA   - DICKS SPORTWEAR   - CASUAL CORNER   - SEARS   - JAL   - DISNEY CARD   - SWITCH/SOLO   - SAMS CLUB CONSUMER   - SAMS CLUB BUSINESS   - NICOS HOUSE CARD   - BEBE   - RESTORATION HARDWARE   - DELTA ONLINE   - SOLO   - VISA ELECTRON   - DANKORT   - LASER   - CARTE BANCAIRE   - CARTA SI   - ENCODED ACCOUNT   - UATP   - HOUSEHOLD   - MAESTRO   - GE CAPITAL   - KOREAN CARDS   - STYLE CARDS   - JCREW   - MEIJER   - HIPERCARD   - AURA   - REDECARD   - ORICO HOUSE CARD   - ELO   - CAPITAL ONE PRIVATE LABEL   - CARNET   - RUPAY   - CHINA UNION PAY   - FALABELLA PRIVATE LABEL   - PROMPTCARD   - KOREAN DOMESTIC   - BANRICOMPRAS 
   * @return brandName
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BRAND_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBrandName() {
    return brandName;
  }


  @JsonProperty(JSON_PROPERTY_BRAND_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBrandName(String brandName) {
    this.brandName = brandName;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetAccountInfo201ResponsePaymentAccountInformationCardBrandsInner getAccountInfo201ResponsePaymentAccountInformationCardBrandsInner = (GetAccountInfo201ResponsePaymentAccountInformationCardBrandsInner) o;
    return Objects.equals(this.type, getAccountInfo201ResponsePaymentAccountInformationCardBrandsInner.type) &&
        Objects.equals(this.brandName, getAccountInfo201ResponsePaymentAccountInformationCardBrandsInner.brandName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, brandName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetAccountInfo201ResponsePaymentAccountInformationCardBrandsInner {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    brandName: ").append(toIndentedString(brandName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

