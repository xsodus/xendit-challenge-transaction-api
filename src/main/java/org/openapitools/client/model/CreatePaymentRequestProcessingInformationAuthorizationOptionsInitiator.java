/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.client.model.CreatePaymentRequestProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CreatePaymentRequestProcessingInformationAuthorizationOptionsInitiator
 */
@JsonPropertyOrder({
  CreatePaymentRequestProcessingInformationAuthorizationOptionsInitiator.JSON_PROPERTY_TYPE,
  CreatePaymentRequestProcessingInformationAuthorizationOptionsInitiator.JSON_PROPERTY_CREDENTIAL_STORED_ON_FILE,
  CreatePaymentRequestProcessingInformationAuthorizationOptionsInitiator.JSON_PROPERTY_STORED_CREDENTIAL_USED,
  CreatePaymentRequestProcessingInformationAuthorizationOptionsInitiator.JSON_PROPERTY_MERCHANT_INITIATED_TRANSACTION
})
@JsonTypeName("createPayment_request_processingInformation_authorizationOptions_initiator")
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T19:17:21.826843+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class CreatePaymentRequestProcessingInformationAuthorizationOptionsInitiator {
  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  public static final String JSON_PROPERTY_CREDENTIAL_STORED_ON_FILE = "credentialStoredOnFile";
  private Boolean credentialStoredOnFile;

  public static final String JSON_PROPERTY_STORED_CREDENTIAL_USED = "storedCredentialUsed";
  private Boolean storedCredentialUsed;

  public static final String JSON_PROPERTY_MERCHANT_INITIATED_TRANSACTION = "merchantInitiatedTransaction";
  private CreatePaymentRequestProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction merchantInitiatedTransaction;

  public CreatePaymentRequestProcessingInformationAuthorizationOptionsInitiator() {
  }

  public CreatePaymentRequestProcessingInformationAuthorizationOptionsInitiator type(String type) {
    
    this.type = type;
    return this;
  }

  /**
   * This field indicates whether the transaction is a merchant-initiated transaction or customer-initiated transaction.  Valid values: - **customer** - **merchant** 
   * @return type
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(String type) {
    this.type = type;
  }

  public CreatePaymentRequestProcessingInformationAuthorizationOptionsInitiator credentialStoredOnFile(Boolean credentialStoredOnFile) {
    
    this.credentialStoredOnFile = credentialStoredOnFile;
    return this;
  }

  /**
   * Indicates to the issuing bank two things: - The merchant has received consent from the cardholder to store their card details on file - The merchant wants the issuing bank to check out the card details before the merchant initiates their first transaction for this cardholder. The purpose of the merchant-initiated transaction is to ensure that the cardholder&#39;s credentials are valid (that the card is not stolen or has restrictions) and that the card details are good to be stored on the merchant&#39;s file for future transactions.  Valid values: - &#x60;true&#x60; means merchant will use this transaction to store payment credentials for follow-up merchant-initiated transactions. - &#x60;false&#x60; means merchant will not use this transaction to store payment credentials for follow-up merchant-initiated transactions.  **NOTE:** The value for this field does not correspond to any data in the TC 33 capture file5.  This field is supported only for Visa transactions on CyberSource through VisaNet. 
   * @return credentialStoredOnFile
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREDENTIAL_STORED_ON_FILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCredentialStoredOnFile() {
    return credentialStoredOnFile;
  }


  @JsonProperty(JSON_PROPERTY_CREDENTIAL_STORED_ON_FILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCredentialStoredOnFile(Boolean credentialStoredOnFile) {
    this.credentialStoredOnFile = credentialStoredOnFile;
  }

  public CreatePaymentRequestProcessingInformationAuthorizationOptionsInitiator storedCredentialUsed(Boolean storedCredentialUsed) {
    
    this.storedCredentialUsed = storedCredentialUsed;
    return this;
  }

  /**
   * Indicates to an issuing bank whether a merchant-initiated transaction came from a card that was already stored on file.  Possible values: - **true** means the merchant-initiated transaction came from a card that was already stored on file. - **false**  means the merchant-initiated transaction came from a card that was not stored on file. 
   * @return storedCredentialUsed
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STORED_CREDENTIAL_USED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getStoredCredentialUsed() {
    return storedCredentialUsed;
  }


  @JsonProperty(JSON_PROPERTY_STORED_CREDENTIAL_USED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStoredCredentialUsed(Boolean storedCredentialUsed) {
    this.storedCredentialUsed = storedCredentialUsed;
  }

  public CreatePaymentRequestProcessingInformationAuthorizationOptionsInitiator merchantInitiatedTransaction(CreatePaymentRequestProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction merchantInitiatedTransaction) {
    
    this.merchantInitiatedTransaction = merchantInitiatedTransaction;
    return this;
  }

  /**
   * Get merchantInitiatedTransaction
   * @return merchantInitiatedTransaction
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MERCHANT_INITIATED_TRANSACTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CreatePaymentRequestProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction getMerchantInitiatedTransaction() {
    return merchantInitiatedTransaction;
  }


  @JsonProperty(JSON_PROPERTY_MERCHANT_INITIATED_TRANSACTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMerchantInitiatedTransaction(CreatePaymentRequestProcessingInformationAuthorizationOptionsInitiatorMerchantInitiatedTransaction merchantInitiatedTransaction) {
    this.merchantInitiatedTransaction = merchantInitiatedTransaction;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreatePaymentRequestProcessingInformationAuthorizationOptionsInitiator createPaymentRequestProcessingInformationAuthorizationOptionsInitiator = (CreatePaymentRequestProcessingInformationAuthorizationOptionsInitiator) o;
    return Objects.equals(this.type, createPaymentRequestProcessingInformationAuthorizationOptionsInitiator.type) &&
        Objects.equals(this.credentialStoredOnFile, createPaymentRequestProcessingInformationAuthorizationOptionsInitiator.credentialStoredOnFile) &&
        Objects.equals(this.storedCredentialUsed, createPaymentRequestProcessingInformationAuthorizationOptionsInitiator.storedCredentialUsed) &&
        Objects.equals(this.merchantInitiatedTransaction, createPaymentRequestProcessingInformationAuthorizationOptionsInitiator.merchantInitiatedTransaction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, credentialStoredOnFile, storedCredentialUsed, merchantInitiatedTransaction);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreatePaymentRequestProcessingInformationAuthorizationOptionsInitiator {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    credentialStoredOnFile: ").append(toIndentedString(credentialStoredOnFile)).append("\n");
    sb.append("    storedCredentialUsed: ").append(toIndentedString(storedCredentialUsed)).append("\n");
    sb.append("    merchantInitiatedTransaction: ").append(toIndentedString(merchantInitiatedTransaction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

