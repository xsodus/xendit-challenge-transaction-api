/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreatePaymentRequestProcessingInformationAuthorizationOptions;
import org.openapitools.client.model.CreatePaymentRequestProcessingInformationBankTransferOptions;
import org.openapitools.client.model.CreatePaymentRequestProcessingInformationCaptureOptions;
import org.openapitools.client.model.CreatePaymentRequestProcessingInformationElectronicBenefitsTransfer;
import org.openapitools.client.model.CreatePaymentRequestProcessingInformationJapanPaymentOptions;
import org.openapitools.client.model.CreatePaymentRequestProcessingInformationLoanOptions;
import org.openapitools.client.model.CreatePaymentRequestProcessingInformationPurchaseOptions;
import org.openapitools.client.model.CreatePaymentRequestProcessingInformationRecurringOptions;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CreatePaymentRequestProcessingInformation
 */
@JsonPropertyOrder({
  CreatePaymentRequestProcessingInformation.JSON_PROPERTY_ACTION_LIST,
  CreatePaymentRequestProcessingInformation.JSON_PROPERTY_ENABLE_ESCROW_OPTION,
  CreatePaymentRequestProcessingInformation.JSON_PROPERTY_ACTION_TOKEN_TYPES,
  CreatePaymentRequestProcessingInformation.JSON_PROPERTY_BIN_SOURCE,
  CreatePaymentRequestProcessingInformation.JSON_PROPERTY_CAPTURE,
  CreatePaymentRequestProcessingInformation.JSON_PROPERTY_PROCESSOR_ID,
  CreatePaymentRequestProcessingInformation.JSON_PROPERTY_BUSINESS_APPLICATION_ID,
  CreatePaymentRequestProcessingInformation.JSON_PROPERTY_COMMERCE_INDICATOR,
  CreatePaymentRequestProcessingInformation.JSON_PROPERTY_COMMERCE_INDICATOR_LABEL,
  CreatePaymentRequestProcessingInformation.JSON_PROPERTY_PAYMENT_SOLUTION,
  CreatePaymentRequestProcessingInformation.JSON_PROPERTY_RECONCILIATION_ID,
  CreatePaymentRequestProcessingInformation.JSON_PROPERTY_LINK_ID,
  CreatePaymentRequestProcessingInformation.JSON_PROPERTY_PURCHASE_LEVEL,
  CreatePaymentRequestProcessingInformation.JSON_PROPERTY_TRANSACTION_TIMEOUT,
  CreatePaymentRequestProcessingInformation.JSON_PROPERTY_INTENTS_ID,
  CreatePaymentRequestProcessingInformation.JSON_PROPERTY_REPORT_GROUP,
  CreatePaymentRequestProcessingInformation.JSON_PROPERTY_VISA_CHECKOUT_ID,
  CreatePaymentRequestProcessingInformation.JSON_PROPERTY_INDUSTRY_DATA_TYPE,
  CreatePaymentRequestProcessingInformation.JSON_PROPERTY_AUTHORIZATION_OPTIONS,
  CreatePaymentRequestProcessingInformation.JSON_PROPERTY_CAPTURE_OPTIONS,
  CreatePaymentRequestProcessingInformation.JSON_PROPERTY_RECURRING_OPTIONS,
  CreatePaymentRequestProcessingInformation.JSON_PROPERTY_BANK_TRANSFER_OPTIONS,
  CreatePaymentRequestProcessingInformation.JSON_PROPERTY_PURCHASE_OPTIONS,
  CreatePaymentRequestProcessingInformation.JSON_PROPERTY_ELECTRONIC_BENEFITS_TRANSFER,
  CreatePaymentRequestProcessingInformation.JSON_PROPERTY_LOAN_OPTIONS,
  CreatePaymentRequestProcessingInformation.JSON_PROPERTY_WALLET_TYPE,
  CreatePaymentRequestProcessingInformation.JSON_PROPERTY_NATIONAL_NET_DOMESTIC_DATA,
  CreatePaymentRequestProcessingInformation.JSON_PROPERTY_JAPAN_PAYMENT_OPTIONS,
  CreatePaymentRequestProcessingInformation.JSON_PROPERTY_MOBILE_REMOTE_PAYMENT_TYPE,
  CreatePaymentRequestProcessingInformation.JSON_PROPERTY_EXTENDED_CREDIT_TOTAL_COUNT,
  CreatePaymentRequestProcessingInformation.JSON_PROPERTY_NETWORK_ROUTING_ORDER,
  CreatePaymentRequestProcessingInformation.JSON_PROPERTY_PAY_BY_POINTS_INDICATOR,
  CreatePaymentRequestProcessingInformation.JSON_PROPERTY_TIMEOUT,
  CreatePaymentRequestProcessingInformation.JSON_PROPERTY_IS_RETURN_AUTH_RECORD_ENABLED,
  CreatePaymentRequestProcessingInformation.JSON_PROPERTY_NETWORK_PARTNER_ID,
  CreatePaymentRequestProcessingInformation.JSON_PROPERTY_PAYMENT_TYPE,
  CreatePaymentRequestProcessingInformation.JSON_PROPERTY_ENABLER_ID
})
@JsonTypeName("createPayment_request_processingInformation")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T18:32:10.370382+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class CreatePaymentRequestProcessingInformation {
  public static final String JSON_PROPERTY_ACTION_LIST = "actionList";
  private List<String> actionList = new ArrayList<>();

  public static final String JSON_PROPERTY_ENABLE_ESCROW_OPTION = "enableEscrowOption";
  private Boolean enableEscrowOption;

  public static final String JSON_PROPERTY_ACTION_TOKEN_TYPES = "actionTokenTypes";
  private List<String> actionTokenTypes = new ArrayList<>();

  public static final String JSON_PROPERTY_BIN_SOURCE = "binSource";
  private String binSource;

  public static final String JSON_PROPERTY_CAPTURE = "capture";
  private Boolean capture = false;

  public static final String JSON_PROPERTY_PROCESSOR_ID = "processorId";
  private String processorId;

  public static final String JSON_PROPERTY_BUSINESS_APPLICATION_ID = "businessApplicationId";
  private String businessApplicationId;

  public static final String JSON_PROPERTY_COMMERCE_INDICATOR = "commerceIndicator";
  private String commerceIndicator;

  public static final String JSON_PROPERTY_COMMERCE_INDICATOR_LABEL = "commerceIndicatorLabel";
  private String commerceIndicatorLabel;

  public static final String JSON_PROPERTY_PAYMENT_SOLUTION = "paymentSolution";
  private String paymentSolution;

  public static final String JSON_PROPERTY_RECONCILIATION_ID = "reconciliationId";
  private String reconciliationId;

  public static final String JSON_PROPERTY_LINK_ID = "linkId";
  private String linkId;

  public static final String JSON_PROPERTY_PURCHASE_LEVEL = "purchaseLevel";
  private String purchaseLevel;

  public static final String JSON_PROPERTY_TRANSACTION_TIMEOUT = "transactionTimeout";
  private Integer transactionTimeout;

  public static final String JSON_PROPERTY_INTENTS_ID = "intentsId";
  private String intentsId;

  public static final String JSON_PROPERTY_REPORT_GROUP = "reportGroup";
  private String reportGroup;

  public static final String JSON_PROPERTY_VISA_CHECKOUT_ID = "visaCheckoutId";
  private String visaCheckoutId;

  public static final String JSON_PROPERTY_INDUSTRY_DATA_TYPE = "industryDataType";
  private String industryDataType;

  public static final String JSON_PROPERTY_AUTHORIZATION_OPTIONS = "authorizationOptions";
  private CreatePaymentRequestProcessingInformationAuthorizationOptions authorizationOptions;

  public static final String JSON_PROPERTY_CAPTURE_OPTIONS = "captureOptions";
  private CreatePaymentRequestProcessingInformationCaptureOptions captureOptions;

  public static final String JSON_PROPERTY_RECURRING_OPTIONS = "recurringOptions";
  private CreatePaymentRequestProcessingInformationRecurringOptions recurringOptions;

  public static final String JSON_PROPERTY_BANK_TRANSFER_OPTIONS = "bankTransferOptions";
  private CreatePaymentRequestProcessingInformationBankTransferOptions bankTransferOptions;

  public static final String JSON_PROPERTY_PURCHASE_OPTIONS = "purchaseOptions";
  private CreatePaymentRequestProcessingInformationPurchaseOptions purchaseOptions;

  public static final String JSON_PROPERTY_ELECTRONIC_BENEFITS_TRANSFER = "electronicBenefitsTransfer";
  private CreatePaymentRequestProcessingInformationElectronicBenefitsTransfer electronicBenefitsTransfer;

  public static final String JSON_PROPERTY_LOAN_OPTIONS = "loanOptions";
  private CreatePaymentRequestProcessingInformationLoanOptions loanOptions;

  public static final String JSON_PROPERTY_WALLET_TYPE = "walletType";
  private String walletType;

  public static final String JSON_PROPERTY_NATIONAL_NET_DOMESTIC_DATA = "nationalNetDomesticData";
  private String nationalNetDomesticData;

  public static final String JSON_PROPERTY_JAPAN_PAYMENT_OPTIONS = "japanPaymentOptions";
  private CreatePaymentRequestProcessingInformationJapanPaymentOptions japanPaymentOptions;

  public static final String JSON_PROPERTY_MOBILE_REMOTE_PAYMENT_TYPE = "mobileRemotePaymentType";
  private String mobileRemotePaymentType;

  public static final String JSON_PROPERTY_EXTENDED_CREDIT_TOTAL_COUNT = "extendedCreditTotalCount";
  private String extendedCreditTotalCount;

  public static final String JSON_PROPERTY_NETWORK_ROUTING_ORDER = "networkRoutingOrder";
  private String networkRoutingOrder;

  public static final String JSON_PROPERTY_PAY_BY_POINTS_INDICATOR = "payByPointsIndicator";
  private Boolean payByPointsIndicator;

  public static final String JSON_PROPERTY_TIMEOUT = "timeout";
  private Integer timeout;

  public static final String JSON_PROPERTY_IS_RETURN_AUTH_RECORD_ENABLED = "isReturnAuthRecordEnabled";
  private Boolean isReturnAuthRecordEnabled;

  public static final String JSON_PROPERTY_NETWORK_PARTNER_ID = "networkPartnerId";
  private String networkPartnerId;

  public static final String JSON_PROPERTY_PAYMENT_TYPE = "paymentType";
  private String paymentType;

  public static final String JSON_PROPERTY_ENABLER_ID = "enablerId";
  private String enablerId;

  public CreatePaymentRequestProcessingInformation() {
  }

  public CreatePaymentRequestProcessingInformation actionList(List<String> actionList) {
    
    this.actionList = actionList;
    return this;
  }

  public CreatePaymentRequestProcessingInformation addActionListItem(String actionListItem) {
    if (this.actionList == null) {
      this.actionList = new ArrayList<>();
    }
    this.actionList.add(actionListItem);
    return this;
  }

  /**
   * Array of actions (one or more) to be included in the payment to invoke bundled services along with payment.  Possible values are one or more of follows:   - &#x60;DECISION_SKIP&#x60;: Use this when you want to skip Decision Manager service(s).   - &#x60;TOKEN_CREATE&#x60;: Use this when you want to create a token from the card/bank data in your payment request.   - &#x60;CONSUMER_AUTHENTICATION&#x60;: Use this when you want to check if a card is enrolled in Payer Authentication along with your payment request.   - &#x60;VALIDATE_CONSUMER_AUTHENTICATION&#x60;: Use this after you acquire a Payer Authentication result that needs to be included for your payment request.    - &#x60;AP_INITIATE&#x60;: Use this when Alternative Payment Initiate service is requested.   - &#x60;WATCHLIST_SCREENING&#x60; : Use this when you want to call Watchlist Screening service.   - &#x60;AP_SALE&#x60; : Use this when Alternative Payment Sale service is requested.    - &#x60;AP_AUTH&#x60; : Use this when Alternative Payment Authorize service is requested. 
   * @return actionList
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACTION_LIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getActionList() {
    return actionList;
  }


  @JsonProperty(JSON_PROPERTY_ACTION_LIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActionList(List<String> actionList) {
    this.actionList = actionList;
  }

  public CreatePaymentRequestProcessingInformation enableEscrowOption(Boolean enableEscrowOption) {
    
    this.enableEscrowOption = enableEscrowOption;
    return this;
  }

  /**
   * Indicates whether to use the customer&#39;s escrow agreement. Possible values: - &#x60;true&#x60;: yes, use the customer&#39;s escrow agreement. - &#x60;false&#x60;: no, do not use the customer&#39;s escrow agreement.  
   * @return enableEscrowOption
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_ESCROW_OPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnableEscrowOption() {
    return enableEscrowOption;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_ESCROW_OPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableEscrowOption(Boolean enableEscrowOption) {
    this.enableEscrowOption = enableEscrowOption;
  }

  public CreatePaymentRequestProcessingInformation actionTokenTypes(List<String> actionTokenTypes) {
    
    this.actionTokenTypes = actionTokenTypes;
    return this;
  }

  public CreatePaymentRequestProcessingInformation addActionTokenTypesItem(String actionTokenTypesItem) {
    if (this.actionTokenTypes == null) {
      this.actionTokenTypes = new ArrayList<>();
    }
    this.actionTokenTypes.add(actionTokenTypesItem);
    return this;
  }

  /**
   * CyberSource tokens types you are performing a create on. If not supplied the default token type for the merchants token vault will be used.  Valid values: - customer - paymentInstrument - instrumentIdentifier - shippingAddress 
   * @return actionTokenTypes
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACTION_TOKEN_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getActionTokenTypes() {
    return actionTokenTypes;
  }


  @JsonProperty(JSON_PROPERTY_ACTION_TOKEN_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActionTokenTypes(List<String> actionTokenTypes) {
    this.actionTokenTypes = actionTokenTypes;
  }

  public CreatePaymentRequestProcessingInformation binSource(String binSource) {
    
    this.binSource = binSource;
    return this;
  }

  /**
   * Bin Source File Identifier. Possible values: - itmx - rupay 
   * @return binSource
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BIN_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBinSource() {
    return binSource;
  }


  @JsonProperty(JSON_PROPERTY_BIN_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBinSource(String binSource) {
    this.binSource = binSource;
  }

  public CreatePaymentRequestProcessingInformation capture(Boolean capture) {
    
    this.capture = capture;
    return this;
  }

  /**
   * Indicates whether to also include a capture  in the submitted authorization request or not.  Possible values: - &#x60;true&#x60;: Include a capture with an authorization request. - &#x60;false&#x60;: (default) Do not include a capture with an authorization request.  #### Used by **Authorization and Capture** Optional field. 
   * @return capture
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CAPTURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCapture() {
    return capture;
  }


  @JsonProperty(JSON_PROPERTY_CAPTURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCapture(Boolean capture) {
    this.capture = capture;
  }

  public CreatePaymentRequestProcessingInformation processorId(String processorId) {
    
    this.processorId = processorId;
    return this;
  }

  /**
   * Value that identifies the processor/acquirer to use for the transaction. This value is supported only for **CyberSource through VisaNet**.  Contact CyberSource Customer Support to get the value for this field. 
   * @return processorId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROCESSOR_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProcessorId() {
    return processorId;
  }


  @JsonProperty(JSON_PROPERTY_PROCESSOR_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProcessorId(String processorId) {
    this.processorId = processorId;
  }

  public CreatePaymentRequestProcessingInformation businessApplicationId(String businessApplicationId) {
    
    this.businessApplicationId = businessApplicationId;
    return this;
  }

  /**
   * Payouts transaction type. Required for OCT transactions. This field is a pass-through, which means that CyberSource does not verify the value or modify it in any way before sending it to the processor. **Note** When the request includes this field, this value overrides the information in your CyberSource account. 
   * @return businessApplicationId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BUSINESS_APPLICATION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBusinessApplicationId() {
    return businessApplicationId;
  }


  @JsonProperty(JSON_PROPERTY_BUSINESS_APPLICATION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBusinessApplicationId(String businessApplicationId) {
    this.businessApplicationId = businessApplicationId;
  }

  public CreatePaymentRequestProcessingInformation commerceIndicator(String commerceIndicator) {
    
    this.commerceIndicator = commerceIndicator;
    return this;
  }

  /**
   * Type of transaction. Some payment card companies use this information when determining discount rates.  #### Used by **Authorization** Required payer authentication transactions; otherwise, optional. **Credit** Required for standalone credits on Chase Paymentech solutions; otherwise, optional.  The list of valid values in this field depends on your processor.  #### Ingenico ePayments When you omit this field for Ingenico ePayments, the processor uses the default transaction type they have on file for you instead of the default value   #### Card Present You must set this field to &#x60;retail&#x60;. This field is required for a card-present transaction. Note that this should ONLY be used when the cardholder and card are present at the time of the transaction. For all keyed transactions originated from a POS terminal where the cardholder and card are not present, commerceIndicator should be submitted as \&quot;moto\&quot; 
   * @return commerceIndicator
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMMERCE_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCommerceIndicator() {
    return commerceIndicator;
  }


  @JsonProperty(JSON_PROPERTY_COMMERCE_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCommerceIndicator(String commerceIndicator) {
    this.commerceIndicator = commerceIndicator;
  }

  public CreatePaymentRequestProcessingInformation commerceIndicatorLabel(String commerceIndicatorLabel) {
    
    this.commerceIndicatorLabel = commerceIndicatorLabel;
    return this;
  }

  /**
   * Type of transaction. Some payment card companies use this information when determining discount rates.  #### Used by **Authorization** Required payer authentication transactions; otherwise, optional. **Credit** Required for standalone credits on Chase Paymentech solutions; otherwise, optional.  The list of valid values in this field depends on your processor.  #### Ingenico ePayments When you omit this field for Ingenico ePayments, the processor uses the default transaction type they have on file for you instead of the default value   #### Card Present You must set this field to &#x60;retail&#x60;. This field is required for a card-present transaction. Note that this should ONLY be used when the cardholder and card are present at the time of the transaction. For all keyed transactions originated from a POS terminal where the cardholder and card are not present, commerceIndicator should be submitted as &#x60;moto&#x60; 
   * @return commerceIndicatorLabel
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMMERCE_INDICATOR_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCommerceIndicatorLabel() {
    return commerceIndicatorLabel;
  }


  @JsonProperty(JSON_PROPERTY_COMMERCE_INDICATOR_LABEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCommerceIndicatorLabel(String commerceIndicatorLabel) {
    this.commerceIndicatorLabel = commerceIndicatorLabel;
  }

  public CreatePaymentRequestProcessingInformation paymentSolution(String paymentSolution) {
    
    this.paymentSolution = paymentSolution;
    return this;
  }

  /**
   * Type of digital payment solution for the transaction. Possible Values:   - &#x60;visacheckout&#x60;: Visa Checkout. This value is required for Visa Checkout transactions. For details, see &#x60;payment_solution&#x60; field description in [Visa Checkout Using the REST API.](https://developer.cybersource.com/content/dam/docs/cybs/en-us/apifields/reference/all/rest/api-fields.pdf)  - &#x60;001&#x60;: Apple Pay.  - &#x60;004&#x60;: Cybersource In-App Solution.  - &#x60;005&#x60;: Masterpass. This value is required for Masterpass transactions on OmniPay Direct.   - &#x60;006&#x60;: Android Pay.  - &#x60;007&#x60;: Chase Pay.  - &#x60;008&#x60;: Samsung Pay.  - &#x60;012&#x60;: Google Pay.  - &#x60;013&#x60;: Cybersource P2PE Decryption  - &#x60;014&#x60;: Mastercard credential on file (COF) payment network token. Returned in authorizations that use a payment network token associated with a TMS token.  - &#x60;015&#x60;: Visa credential on file (COF) payment network token. Returned in authorizations that use a payment network token associated with a TMS token.  - &#x60;027&#x60;: Click to Pay. 
   * @return paymentSolution
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAYMENT_SOLUTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPaymentSolution() {
    return paymentSolution;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_SOLUTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentSolution(String paymentSolution) {
    this.paymentSolution = paymentSolution;
  }

  public CreatePaymentRequestProcessingInformation reconciliationId(String reconciliationId) {
    
    this.reconciliationId = reconciliationId;
    return this;
  }

  /**
   * Please check with Cybersource customer support to see if your merchant account is configured correctly so you can include this field in your request. * For Payouts: max length for FDCCompass is String (22). 
   * @return reconciliationId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RECONCILIATION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getReconciliationId() {
    return reconciliationId;
  }


  @JsonProperty(JSON_PROPERTY_RECONCILIATION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReconciliationId(String reconciliationId) {
    this.reconciliationId = reconciliationId;
  }

  public CreatePaymentRequestProcessingInformation linkId(String linkId) {
    
    this.linkId = linkId;
    return this;
  }

  /**
   * Value that links the current authorization request to the original authorization request. Set this value to the ID that was returned in the reply message from the original authorization request.  This value is used for:  - Partial authorizations - Split shipments 
   * @return linkId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LINK_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLinkId() {
    return linkId;
  }


  @JsonProperty(JSON_PROPERTY_LINK_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLinkId(String linkId) {
    this.linkId = linkId;
  }

  public CreatePaymentRequestProcessingInformation purchaseLevel(String purchaseLevel) {
    
    this.purchaseLevel = purchaseLevel;
    return this;
  }

  /**
   * Set this field to 3 to indicate that the request includes Level III data.
   * @return purchaseLevel
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PURCHASE_LEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPurchaseLevel() {
    return purchaseLevel;
  }


  @JsonProperty(JSON_PROPERTY_PURCHASE_LEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPurchaseLevel(String purchaseLevel) {
    this.purchaseLevel = purchaseLevel;
  }

  public CreatePaymentRequestProcessingInformation transactionTimeout(Integer transactionTimeout) {
    
    this.transactionTimeout = transactionTimeout;
    return this;
  }

  /**
   * The time-out limit in seconds for the transaction. The time-out limit starts when the customer is directed to the merchant URL that is included in the sale service response. The maximum value is 99999 (about 27 hours). When the transaction times out, the payment system changes the status to abandoned.
   * maximum: 99999
   * @return transactionTimeout
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRANSACTION_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTransactionTimeout() {
    return transactionTimeout;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTION_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransactionTimeout(Integer transactionTimeout) {
    this.transactionTimeout = transactionTimeout;
  }

  public CreatePaymentRequestProcessingInformation intentsId(String intentsId) {
    
    this.intentsId = intentsId;
    return this;
  }

  /**
   * Set to the value of the requestID field returned in the order service response.
   * @return intentsId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INTENTS_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIntentsId() {
    return intentsId;
  }


  @JsonProperty(JSON_PROPERTY_INTENTS_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIntentsId(String intentsId) {
    this.intentsId = intentsId;
  }

  public CreatePaymentRequestProcessingInformation reportGroup(String reportGroup) {
    
    this.reportGroup = reportGroup;
    return this;
  }

  /**
   * Attribute that lets you define custom grouping for your processor reports. This field is supported only for **Worldpay VAP**. 
   * @return reportGroup
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REPORT_GROUP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getReportGroup() {
    return reportGroup;
  }


  @JsonProperty(JSON_PROPERTY_REPORT_GROUP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReportGroup(String reportGroup) {
    this.reportGroup = reportGroup;
  }

  public CreatePaymentRequestProcessingInformation visaCheckoutId(String visaCheckoutId) {
    
    this.visaCheckoutId = visaCheckoutId;
    return this;
  }

  /**
   * Identifier for the **Visa Checkout** order. Visa Checkout provides a unique order ID for every transaction in the Visa Checkout **callID** field. 
   * @return visaCheckoutId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VISA_CHECKOUT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getVisaCheckoutId() {
    return visaCheckoutId;
  }


  @JsonProperty(JSON_PROPERTY_VISA_CHECKOUT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVisaCheckoutId(String visaCheckoutId) {
    this.visaCheckoutId = visaCheckoutId;
  }

  public CreatePaymentRequestProcessingInformation industryDataType(String industryDataType) {
    
    this.industryDataType = industryDataType;
    return this;
  }

  /**
   * Indicates that the transaction includes industry-specific data.  Possible Values: - &#x60;airline&#x60; - &#x60;restaurant&#x60; - &#x60;lodging&#x60; - &#x60;auto_rental&#x60; - &#x60;transit&#x60; - &#x60;healthcare_medical&#x60; - &#x60;healthcare_transit&#x60; - &#x60;transit&#x60;  #### Card Present, Airlines and Auto Rental You must set this field to &#x60;airline&#x60; in order for airline data to be sent to the processor. For example, if this field is not set to &#x60;airline&#x60; or is not included in the request, no airline data is sent to the processor.  You must set this field to &#x60;restaurant&#x60; in order for restaurant data to be sent to the processor. When this field is not set to &#x60;restaurant&#x60; or is not included in the request, no restaurant data is sent to the processor.  You must set this field to &#x60;auto_rental&#x60; in order for auto rental data to be sent to the processor. For example, if this field is not set to &#x60;auto_rental&#x60; or is not included in the request, no auto rental data is sent to the processor.  Restaurant data is supported only on CyberSource through VisaNet. 
   * @return industryDataType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INDUSTRY_DATA_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIndustryDataType() {
    return industryDataType;
  }


  @JsonProperty(JSON_PROPERTY_INDUSTRY_DATA_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIndustryDataType(String industryDataType) {
    this.industryDataType = industryDataType;
  }

  public CreatePaymentRequestProcessingInformation authorizationOptions(CreatePaymentRequestProcessingInformationAuthorizationOptions authorizationOptions) {
    
    this.authorizationOptions = authorizationOptions;
    return this;
  }

  /**
   * Get authorizationOptions
   * @return authorizationOptions
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTHORIZATION_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CreatePaymentRequestProcessingInformationAuthorizationOptions getAuthorizationOptions() {
    return authorizationOptions;
  }


  @JsonProperty(JSON_PROPERTY_AUTHORIZATION_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAuthorizationOptions(CreatePaymentRequestProcessingInformationAuthorizationOptions authorizationOptions) {
    this.authorizationOptions = authorizationOptions;
  }

  public CreatePaymentRequestProcessingInformation captureOptions(CreatePaymentRequestProcessingInformationCaptureOptions captureOptions) {
    
    this.captureOptions = captureOptions;
    return this;
  }

  /**
   * Get captureOptions
   * @return captureOptions
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CAPTURE_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CreatePaymentRequestProcessingInformationCaptureOptions getCaptureOptions() {
    return captureOptions;
  }


  @JsonProperty(JSON_PROPERTY_CAPTURE_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCaptureOptions(CreatePaymentRequestProcessingInformationCaptureOptions captureOptions) {
    this.captureOptions = captureOptions;
  }

  public CreatePaymentRequestProcessingInformation recurringOptions(CreatePaymentRequestProcessingInformationRecurringOptions recurringOptions) {
    
    this.recurringOptions = recurringOptions;
    return this;
  }

  /**
   * Get recurringOptions
   * @return recurringOptions
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RECURRING_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CreatePaymentRequestProcessingInformationRecurringOptions getRecurringOptions() {
    return recurringOptions;
  }


  @JsonProperty(JSON_PROPERTY_RECURRING_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRecurringOptions(CreatePaymentRequestProcessingInformationRecurringOptions recurringOptions) {
    this.recurringOptions = recurringOptions;
  }

  public CreatePaymentRequestProcessingInformation bankTransferOptions(CreatePaymentRequestProcessingInformationBankTransferOptions bankTransferOptions) {
    
    this.bankTransferOptions = bankTransferOptions;
    return this;
  }

  /**
   * Get bankTransferOptions
   * @return bankTransferOptions
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BANK_TRANSFER_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CreatePaymentRequestProcessingInformationBankTransferOptions getBankTransferOptions() {
    return bankTransferOptions;
  }


  @JsonProperty(JSON_PROPERTY_BANK_TRANSFER_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBankTransferOptions(CreatePaymentRequestProcessingInformationBankTransferOptions bankTransferOptions) {
    this.bankTransferOptions = bankTransferOptions;
  }

  public CreatePaymentRequestProcessingInformation purchaseOptions(CreatePaymentRequestProcessingInformationPurchaseOptions purchaseOptions) {
    
    this.purchaseOptions = purchaseOptions;
    return this;
  }

  /**
   * Get purchaseOptions
   * @return purchaseOptions
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PURCHASE_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CreatePaymentRequestProcessingInformationPurchaseOptions getPurchaseOptions() {
    return purchaseOptions;
  }


  @JsonProperty(JSON_PROPERTY_PURCHASE_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPurchaseOptions(CreatePaymentRequestProcessingInformationPurchaseOptions purchaseOptions) {
    this.purchaseOptions = purchaseOptions;
  }

  public CreatePaymentRequestProcessingInformation electronicBenefitsTransfer(CreatePaymentRequestProcessingInformationElectronicBenefitsTransfer electronicBenefitsTransfer) {
    
    this.electronicBenefitsTransfer = electronicBenefitsTransfer;
    return this;
  }

  /**
   * Get electronicBenefitsTransfer
   * @return electronicBenefitsTransfer
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ELECTRONIC_BENEFITS_TRANSFER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CreatePaymentRequestProcessingInformationElectronicBenefitsTransfer getElectronicBenefitsTransfer() {
    return electronicBenefitsTransfer;
  }


  @JsonProperty(JSON_PROPERTY_ELECTRONIC_BENEFITS_TRANSFER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setElectronicBenefitsTransfer(CreatePaymentRequestProcessingInformationElectronicBenefitsTransfer electronicBenefitsTransfer) {
    this.electronicBenefitsTransfer = electronicBenefitsTransfer;
  }

  public CreatePaymentRequestProcessingInformation loanOptions(CreatePaymentRequestProcessingInformationLoanOptions loanOptions) {
    
    this.loanOptions = loanOptions;
    return this;
  }

  /**
   * Get loanOptions
   * @return loanOptions
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOAN_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CreatePaymentRequestProcessingInformationLoanOptions getLoanOptions() {
    return loanOptions;
  }


  @JsonProperty(JSON_PROPERTY_LOAN_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLoanOptions(CreatePaymentRequestProcessingInformationLoanOptions loanOptions) {
    this.loanOptions = loanOptions;
  }

  public CreatePaymentRequestProcessingInformation walletType(String walletType) {
    
    this.walletType = walletType;
    return this;
  }

  /**
   * This field carries the wallet type in authorization requests and credit requests. Possible value are: - &#x60;101&#x60;: Masterpass remote payment. The customer created the wallet by manually interacting with a customer-controlled device such as a computer, tablet, or phone. This value is supported only for Masterpass transactions on Chase Paymentech Solutions and CyberSource through VisaNet. - &#x60;102&#x60;: Masterpass remote near field communication (NFC) payment. The customer created the wallet by tapping a PayPass card or customer-controlled device at a contactless card reader. This value is supported only for card-present Masterpass transactions on CyberSource through VisaNet. - &#x60;103&#x60;: Masterpass Apple Pay payment. The payment was made with a combination of Masterpass and Apple Pay. This value is supported only for Masterpass Apple Pay transactions on CyberSource through VisaNet. - &#x60;216&#x60;: Masterpass Google Pay payment. The payment was made with a combination of Masterpass and Google Pay. This value is supported only for Masterpass Google Pay transactions on CyberSource through VisaNet. - &#x60;217&#x60;: Masterpass Samsung Pay payment. The payment was made with a combination of Masterpass and Samsung Pay. This value is supported only for Masterpass Samsung Pay transactions on CyberSource through VisaNet. - &#x60;SDW&#x60;: Staged digital wallet. An issuer or operator created the wallet. This value is supported only for Masterpass transactions on Chase Paymentech Solutions. - &#x60;VCIND&#x60;: Visa Checkout payment. This value is supported only on CyberSource through VisaNet, FDC Compass, FDC Nashville Global, FDI Australia, and TSYS Acquiring Solutions. See Getting Started with Visa Checkout. For Visa Checkout transactions, the way CyberSource processes the value for this field depends on the processor. See the Visa Checkout section below. For all other values, this field is a passthrough; therefore, CyberSource does not verify the value or modify it in any way before sending it to the processor. Masterpass (101, 102, 103, 216, and 217): The Masterpass platform generates the wallet type value and passes it to you along with the customer&#39;s checkout information.  Visa Checkout: This field is optional for Visa Checkout authorizations on FDI Australia. For all other processors, this field is required for Visa Checkout authorizations. For Visa Checkout transactions on the following processors, CyberSource sends the value that the processor expects for this field:FDC Compass,FDC Nashville Global,FDI Australia,TSYS Acquiring Solutions For all other processors, this field is a passthrough; therefore, CyberSource does not verify the value or modify it in any way before sending it to the processor. For incremental authorizations, this field is supported only for Mastercard and the supported values are 101 and 102. Payment card companies can introduce new values without notice. Your order management system should be able to process new values without problems.  CyberSource through VisaNet When the value for this field is 101, 102, 103, 216, or 217, it corresponds to the following data in the TC 33 capture file5: Record: CP01 TCR6, Position: 88-90,  Field: Mastercard Wallet Identifier. When the value for this field is VCIND, it corresponds to the following data in the TC 33 capture file5: Record: CP01 TCR8, Position: 72-76, Field: Agent Unique ID. 
   * @return walletType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WALLET_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getWalletType() {
    return walletType;
  }


  @JsonProperty(JSON_PROPERTY_WALLET_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWalletType(String walletType) {
    this.walletType = walletType;
  }

  public CreatePaymentRequestProcessingInformation nationalNetDomesticData(String nationalNetDomesticData) {
    
    this.nationalNetDomesticData = nationalNetDomesticData;
    return this;
  }

  /**
   * Supplementary domestic transaction information provided by the acquirer for National Net Settlement Service (NNSS) transactions. NNSS is a settlement service that Visa provides. For transactions on CyberSource through VisaNet in countries that subscribe to NNSS: VisaNet clears transactions; VisaNet transfers funds to the acquirer after deducting processing fees and interchange fees. VisaNet settles transactions in the local pricing currency through a local financial institution. This field is supported only on CyberSource through VisaNet for domestic data in Colombia 
   * @return nationalNetDomesticData
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NATIONAL_NET_DOMESTIC_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNationalNetDomesticData() {
    return nationalNetDomesticData;
  }


  @JsonProperty(JSON_PROPERTY_NATIONAL_NET_DOMESTIC_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNationalNetDomesticData(String nationalNetDomesticData) {
    this.nationalNetDomesticData = nationalNetDomesticData;
  }

  public CreatePaymentRequestProcessingInformation japanPaymentOptions(CreatePaymentRequestProcessingInformationJapanPaymentOptions japanPaymentOptions) {
    
    this.japanPaymentOptions = japanPaymentOptions;
    return this;
  }

  /**
   * Get japanPaymentOptions
   * @return japanPaymentOptions
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_JAPAN_PAYMENT_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CreatePaymentRequestProcessingInformationJapanPaymentOptions getJapanPaymentOptions() {
    return japanPaymentOptions;
  }


  @JsonProperty(JSON_PROPERTY_JAPAN_PAYMENT_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setJapanPaymentOptions(CreatePaymentRequestProcessingInformationJapanPaymentOptions japanPaymentOptions) {
    this.japanPaymentOptions = japanPaymentOptions;
  }

  public CreatePaymentRequestProcessingInformation mobileRemotePaymentType(String mobileRemotePaymentType) {
    
    this.mobileRemotePaymentType = mobileRemotePaymentType;
    return this;
  }

  /**
   * Type of payment initiated from a cardholder&#39;s mobile device. Possible values: - &#x60;1&#x60; :  Consumer-initiated remote purchase, face-to-face - &#x60;2&#x60; :  Consumer-initiated remote purchase, e-commerce - &#x60;3&#x60; :  Consumer-initiated remote purchase, mail order / telephone order - &#x60;4&#x60; :  Consumer-initiated bill pay - &#x60;5&#x60; :  Consumer-initiated top up - &#x60;6&#x60; :  Consumer-initiated cash out - &#x60;7&#x60; :  ATM triggered or agent-initiated cash out - &#x60;8&#x60; :  Merchant-initiated remote purchase, face-to-face - &#x60;9&#x60; :  Merchant-initiated remote purchase, e-commerce  This field is supported only for Mastercard transactions on CyberSource through VisaNet.  Optional field.  **Note** On CyberSource through VisaNet, the value for this field corresponds to the following data in the TC 33 capture file: - Record: CP01 TCR6 - Position: 94 - Field: Mastercard Mobile Remote Payment Program Indicator  The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant&#39;s acquirer, who uses this information to facilitate end-of-day clearing processing with payment networks. 
   * @return mobileRemotePaymentType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MOBILE_REMOTE_PAYMENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMobileRemotePaymentType() {
    return mobileRemotePaymentType;
  }


  @JsonProperty(JSON_PROPERTY_MOBILE_REMOTE_PAYMENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMobileRemotePaymentType(String mobileRemotePaymentType) {
    this.mobileRemotePaymentType = mobileRemotePaymentType;
  }

  public CreatePaymentRequestProcessingInformation extendedCreditTotalCount(String extendedCreditTotalCount) {
    
    this.extendedCreditTotalCount = extendedCreditTotalCount;
    return this;
  }

  /**
   * A private national-use field submitted by acquirers and issuers in South Africa for South Africa-domestic (intra-country) authorizations and financial requests. Values for this field are 00 through 99. 
   * @return extendedCreditTotalCount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXTENDED_CREDIT_TOTAL_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExtendedCreditTotalCount() {
    return extendedCreditTotalCount;
  }


  @JsonProperty(JSON_PROPERTY_EXTENDED_CREDIT_TOTAL_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExtendedCreditTotalCount(String extendedCreditTotalCount) {
    this.extendedCreditTotalCount = extendedCreditTotalCount;
  }

  public CreatePaymentRequestProcessingInformation networkRoutingOrder(String networkRoutingOrder) {
    
    this.networkRoutingOrder = networkRoutingOrder;
    return this;
  }

  /**
   * On PIN Debit Gateways: This U.S.-only field is optionally used by  participants (merchants and acquirers) to specify the network access priority. VisaNet checks to determine if there are issuer routing preferences for any of the networks specified by the sharing group code. If an issuer preference exists for one of the specified debit networks, VisaNet makes a routing selection based on the issuer&#39;s preference. If an issuer preference exists for more than one of the specified debit networks, or if no issuer preference exists, VisaNet makes a selection based on the acquirer&#39;s routing priorities.  #### PIN debit Priority order of the networks through which he transaction will be routed. Set this value to a series of one-character network codes in your preferred order. This is a list of the network codes:  | Network | Code | | --- | --- | | Accel | E | | AFFN | U | | Alaska Option | 3 | | CU24 | C | | Interlink | G | | Maestro | 8 | | NETS | P | | NYCE | F | | Pulse | H | | Shazam | 7 | | Star | M | | Visa | V |  For example, if the Star network is your first preference and Pulse is your second preference, set this field to a value of &#x60;MH&#x60;.  When you do not include this value in your PIN debit request, the list of network codes from your account is used. **Note** This field is supported only for businesses located in the U.S.  Optional field for PIN debit credit or PIN debit purchase. 
   * @return networkRoutingOrder
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NETWORK_ROUTING_ORDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNetworkRoutingOrder() {
    return networkRoutingOrder;
  }


  @JsonProperty(JSON_PROPERTY_NETWORK_ROUTING_ORDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNetworkRoutingOrder(String networkRoutingOrder) {
    this.networkRoutingOrder = networkRoutingOrder;
  }

  public CreatePaymentRequestProcessingInformation payByPointsIndicator(Boolean payByPointsIndicator) {
    
    this.payByPointsIndicator = payByPointsIndicator;
    return this;
  }

  /**
   * Flag that indicates if the transaction is pay by points transaction true: Transaction uses loyalty points false: Transaction does not use loyalty points Default: false 
   * @return payByPointsIndicator
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAY_BY_POINTS_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getPayByPointsIndicator() {
    return payByPointsIndicator;
  }


  @JsonProperty(JSON_PROPERTY_PAY_BY_POINTS_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPayByPointsIndicator(Boolean payByPointsIndicator) {
    this.payByPointsIndicator = payByPointsIndicator;
  }

  public CreatePaymentRequestProcessingInformation timeout(Integer timeout) {
    
    this.timeout = timeout;
    return this;
  }

  /**
   * Minutes until a pending MyBank transaction will be timed out. Value must be between 5 and 30. Default is 5. 
   * @return timeout
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTimeout() {
    return timeout;
  }


  @JsonProperty(JSON_PROPERTY_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTimeout(Integer timeout) {
    this.timeout = timeout;
  }

  public CreatePaymentRequestProcessingInformation isReturnAuthRecordEnabled(Boolean isReturnAuthRecordEnabled) {
    
    this.isReturnAuthRecordEnabled = isReturnAuthRecordEnabled;
    return this;
  }

  /**
   * Flag that indicates the functionality we are having for merchants for which auth is done through Cybersource but settlement is done by themselves. true: functionality is supported. Processor should send raw processor auth response to Merchant. false: functionality is not supported. Default: false 
   * @return isReturnAuthRecordEnabled
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_RETURN_AUTH_RECORD_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsReturnAuthRecordEnabled() {
    return isReturnAuthRecordEnabled;
  }


  @JsonProperty(JSON_PROPERTY_IS_RETURN_AUTH_RECORD_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsReturnAuthRecordEnabled(Boolean isReturnAuthRecordEnabled) {
    this.isReturnAuthRecordEnabled = isReturnAuthRecordEnabled;
  }

  public CreatePaymentRequestProcessingInformation networkPartnerId(String networkPartnerId) {
    
    this.networkPartnerId = networkPartnerId;
    return this;
  }

  /**
   * Merchant payment gateway ID that is assigned by Mastercard and is provided by the acquirer when a registered merchant payment gateway service provider is involved in the transaction.  This field is supported for Visa Platform Connect. 
   * @return networkPartnerId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NETWORK_PARTNER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNetworkPartnerId() {
    return networkPartnerId;
  }


  @JsonProperty(JSON_PROPERTY_NETWORK_PARTNER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNetworkPartnerId(String networkPartnerId) {
    this.networkPartnerId = networkPartnerId;
  }

  public CreatePaymentRequestProcessingInformation paymentType(String paymentType) {
    
    this.paymentType = paymentType;
    return this;
  }

  /**
   * Identifier for the payment type. 
   * @return paymentType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAYMENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPaymentType() {
    return paymentType;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentType(String paymentType) {
    this.paymentType = paymentType;
  }

  public CreatePaymentRequestProcessingInformation enablerId(String enablerId) {
    
    this.enablerId = enablerId;
    return this;
  }

  /**
   * Enablers are payment processing entities that are not acquiring members and are often the primary relationship owner with merchants and originators. Enablers own technical solutions through which the merchant or originator will access acceptance. The Enabler ID is a five-character hexadecimal identifier that will be used by Visa to identify enablers. Enabler ID assignment will be determined by Visa. Visa will communicate Enablers assignments to enablers. 
   * @return enablerId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEnablerId() {
    return enablerId;
  }


  @JsonProperty(JSON_PROPERTY_ENABLER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnablerId(String enablerId) {
    this.enablerId = enablerId;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreatePaymentRequestProcessingInformation createPaymentRequestProcessingInformation = (CreatePaymentRequestProcessingInformation) o;
    return Objects.equals(this.actionList, createPaymentRequestProcessingInformation.actionList) &&
        Objects.equals(this.enableEscrowOption, createPaymentRequestProcessingInformation.enableEscrowOption) &&
        Objects.equals(this.actionTokenTypes, createPaymentRequestProcessingInformation.actionTokenTypes) &&
        Objects.equals(this.binSource, createPaymentRequestProcessingInformation.binSource) &&
        Objects.equals(this.capture, createPaymentRequestProcessingInformation.capture) &&
        Objects.equals(this.processorId, createPaymentRequestProcessingInformation.processorId) &&
        Objects.equals(this.businessApplicationId, createPaymentRequestProcessingInformation.businessApplicationId) &&
        Objects.equals(this.commerceIndicator, createPaymentRequestProcessingInformation.commerceIndicator) &&
        Objects.equals(this.commerceIndicatorLabel, createPaymentRequestProcessingInformation.commerceIndicatorLabel) &&
        Objects.equals(this.paymentSolution, createPaymentRequestProcessingInformation.paymentSolution) &&
        Objects.equals(this.reconciliationId, createPaymentRequestProcessingInformation.reconciliationId) &&
        Objects.equals(this.linkId, createPaymentRequestProcessingInformation.linkId) &&
        Objects.equals(this.purchaseLevel, createPaymentRequestProcessingInformation.purchaseLevel) &&
        Objects.equals(this.transactionTimeout, createPaymentRequestProcessingInformation.transactionTimeout) &&
        Objects.equals(this.intentsId, createPaymentRequestProcessingInformation.intentsId) &&
        Objects.equals(this.reportGroup, createPaymentRequestProcessingInformation.reportGroup) &&
        Objects.equals(this.visaCheckoutId, createPaymentRequestProcessingInformation.visaCheckoutId) &&
        Objects.equals(this.industryDataType, createPaymentRequestProcessingInformation.industryDataType) &&
        Objects.equals(this.authorizationOptions, createPaymentRequestProcessingInformation.authorizationOptions) &&
        Objects.equals(this.captureOptions, createPaymentRequestProcessingInformation.captureOptions) &&
        Objects.equals(this.recurringOptions, createPaymentRequestProcessingInformation.recurringOptions) &&
        Objects.equals(this.bankTransferOptions, createPaymentRequestProcessingInformation.bankTransferOptions) &&
        Objects.equals(this.purchaseOptions, createPaymentRequestProcessingInformation.purchaseOptions) &&
        Objects.equals(this.electronicBenefitsTransfer, createPaymentRequestProcessingInformation.electronicBenefitsTransfer) &&
        Objects.equals(this.loanOptions, createPaymentRequestProcessingInformation.loanOptions) &&
        Objects.equals(this.walletType, createPaymentRequestProcessingInformation.walletType) &&
        Objects.equals(this.nationalNetDomesticData, createPaymentRequestProcessingInformation.nationalNetDomesticData) &&
        Objects.equals(this.japanPaymentOptions, createPaymentRequestProcessingInformation.japanPaymentOptions) &&
        Objects.equals(this.mobileRemotePaymentType, createPaymentRequestProcessingInformation.mobileRemotePaymentType) &&
        Objects.equals(this.extendedCreditTotalCount, createPaymentRequestProcessingInformation.extendedCreditTotalCount) &&
        Objects.equals(this.networkRoutingOrder, createPaymentRequestProcessingInformation.networkRoutingOrder) &&
        Objects.equals(this.payByPointsIndicator, createPaymentRequestProcessingInformation.payByPointsIndicator) &&
        Objects.equals(this.timeout, createPaymentRequestProcessingInformation.timeout) &&
        Objects.equals(this.isReturnAuthRecordEnabled, createPaymentRequestProcessingInformation.isReturnAuthRecordEnabled) &&
        Objects.equals(this.networkPartnerId, createPaymentRequestProcessingInformation.networkPartnerId) &&
        Objects.equals(this.paymentType, createPaymentRequestProcessingInformation.paymentType) &&
        Objects.equals(this.enablerId, createPaymentRequestProcessingInformation.enablerId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionList, enableEscrowOption, actionTokenTypes, binSource, capture, processorId, businessApplicationId, commerceIndicator, commerceIndicatorLabel, paymentSolution, reconciliationId, linkId, purchaseLevel, transactionTimeout, intentsId, reportGroup, visaCheckoutId, industryDataType, authorizationOptions, captureOptions, recurringOptions, bankTransferOptions, purchaseOptions, electronicBenefitsTransfer, loanOptions, walletType, nationalNetDomesticData, japanPaymentOptions, mobileRemotePaymentType, extendedCreditTotalCount, networkRoutingOrder, payByPointsIndicator, timeout, isReturnAuthRecordEnabled, networkPartnerId, paymentType, enablerId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreatePaymentRequestProcessingInformation {\n");
    sb.append("    actionList: ").append(toIndentedString(actionList)).append("\n");
    sb.append("    enableEscrowOption: ").append(toIndentedString(enableEscrowOption)).append("\n");
    sb.append("    actionTokenTypes: ").append(toIndentedString(actionTokenTypes)).append("\n");
    sb.append("    binSource: ").append(toIndentedString(binSource)).append("\n");
    sb.append("    capture: ").append(toIndentedString(capture)).append("\n");
    sb.append("    processorId: ").append(toIndentedString(processorId)).append("\n");
    sb.append("    businessApplicationId: ").append(toIndentedString(businessApplicationId)).append("\n");
    sb.append("    commerceIndicator: ").append(toIndentedString(commerceIndicator)).append("\n");
    sb.append("    commerceIndicatorLabel: ").append(toIndentedString(commerceIndicatorLabel)).append("\n");
    sb.append("    paymentSolution: ").append(toIndentedString(paymentSolution)).append("\n");
    sb.append("    reconciliationId: ").append(toIndentedString(reconciliationId)).append("\n");
    sb.append("    linkId: ").append(toIndentedString(linkId)).append("\n");
    sb.append("    purchaseLevel: ").append(toIndentedString(purchaseLevel)).append("\n");
    sb.append("    transactionTimeout: ").append(toIndentedString(transactionTimeout)).append("\n");
    sb.append("    intentsId: ").append(toIndentedString(intentsId)).append("\n");
    sb.append("    reportGroup: ").append(toIndentedString(reportGroup)).append("\n");
    sb.append("    visaCheckoutId: ").append(toIndentedString(visaCheckoutId)).append("\n");
    sb.append("    industryDataType: ").append(toIndentedString(industryDataType)).append("\n");
    sb.append("    authorizationOptions: ").append(toIndentedString(authorizationOptions)).append("\n");
    sb.append("    captureOptions: ").append(toIndentedString(captureOptions)).append("\n");
    sb.append("    recurringOptions: ").append(toIndentedString(recurringOptions)).append("\n");
    sb.append("    bankTransferOptions: ").append(toIndentedString(bankTransferOptions)).append("\n");
    sb.append("    purchaseOptions: ").append(toIndentedString(purchaseOptions)).append("\n");
    sb.append("    electronicBenefitsTransfer: ").append(toIndentedString(electronicBenefitsTransfer)).append("\n");
    sb.append("    loanOptions: ").append(toIndentedString(loanOptions)).append("\n");
    sb.append("    walletType: ").append(toIndentedString(walletType)).append("\n");
    sb.append("    nationalNetDomesticData: ").append(toIndentedString(nationalNetDomesticData)).append("\n");
    sb.append("    japanPaymentOptions: ").append(toIndentedString(japanPaymentOptions)).append("\n");
    sb.append("    mobileRemotePaymentType: ").append(toIndentedString(mobileRemotePaymentType)).append("\n");
    sb.append("    extendedCreditTotalCount: ").append(toIndentedString(extendedCreditTotalCount)).append("\n");
    sb.append("    networkRoutingOrder: ").append(toIndentedString(networkRoutingOrder)).append("\n");
    sb.append("    payByPointsIndicator: ").append(toIndentedString(payByPointsIndicator)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    isReturnAuthRecordEnabled: ").append(toIndentedString(isReturnAuthRecordEnabled)).append("\n");
    sb.append("    networkPartnerId: ").append(toIndentedString(networkPartnerId)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    enablerId: ").append(toIndentedString(enablerId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

