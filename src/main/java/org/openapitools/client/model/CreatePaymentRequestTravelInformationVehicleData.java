/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CreatePaymentRequestTravelInformationVehicleData
 */
@JsonPropertyOrder({
  CreatePaymentRequestTravelInformationVehicleData.JSON_PROPERTY_CONNECTOR_TYPE,
  CreatePaymentRequestTravelInformationVehicleData.JSON_PROPERTY_CHARGING_REASON_CODE
})
@JsonTypeName("createPayment_request_travelInformation_vehicleData")
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T19:17:21.826843+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class CreatePaymentRequestTravelInformationVehicleData {
  public static final String JSON_PROPERTY_CONNECTOR_TYPE = "connectorType";
  private String connectorType;

  public static final String JSON_PROPERTY_CHARGING_REASON_CODE = "chargingReasonCode";
  private String chargingReasonCode;

  public CreatePaymentRequestTravelInformationVehicleData() {
  }

  public CreatePaymentRequestTravelInformationVehicleData connectorType(String connectorType) {
    
    this.connectorType = connectorType;
    return this;
  }

  /**
   * This field will contain connector type values for electric vehicle transactions.  Possible Values: 001 (AC - J1772 Type 1) 002 (AC - Mennekes - Type 2) 003 (AC - GB/T) 100 (DC - CCS1) 101 (DC - CHAdeMO) 102 (DC - CCS2) 103 (DC - GB/T) 200 (NACS â€“ Tesla) 
   * @return connectorType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONNECTOR_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getConnectorType() {
    return connectorType;
  }


  @JsonProperty(JSON_PROPERTY_CONNECTOR_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConnectorType(String connectorType) {
    this.connectorType = connectorType;
  }

  public CreatePaymentRequestTravelInformationVehicleData chargingReasonCode(String chargingReasonCode) {
    
    this.chargingReasonCode = chargingReasonCode;
    return this;
  }

  /**
   * This field will contain charging reason code values for electric vehicle transactions.  Possible Values: 010 (Other Error) 011 (Connector Lock Failure) 012 (EV Communication Error) 013 (Ground Failure) 014 (High Temperature) 015 (Internal Error) 016 (Over Current Failure) 017 (Over Voltage) 018 (Power Meter Failure) 019 (Power Switch Failure) 020 (Reader Failure) 021 (Reset Failure) 022 (Under Voltage) 023 (Weak Signal) 100 (No Error) 200 (Payment Related Error) 
   * @return chargingReasonCode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CHARGING_REASON_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getChargingReasonCode() {
    return chargingReasonCode;
  }


  @JsonProperty(JSON_PROPERTY_CHARGING_REASON_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChargingReasonCode(String chargingReasonCode) {
    this.chargingReasonCode = chargingReasonCode;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreatePaymentRequestTravelInformationVehicleData createPaymentRequestTravelInformationVehicleData = (CreatePaymentRequestTravelInformationVehicleData) o;
    return Objects.equals(this.connectorType, createPaymentRequestTravelInformationVehicleData.connectorType) &&
        Objects.equals(this.chargingReasonCode, createPaymentRequestTravelInformationVehicleData.chargingReasonCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectorType, chargingReasonCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreatePaymentRequestTravelInformationVehicleData {\n");
    sb.append("    connectorType: ").append(toIndentedString(connectorType)).append("\n");
    sb.append("    chargingReasonCode: ").append(toIndentedString(chargingReasonCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

