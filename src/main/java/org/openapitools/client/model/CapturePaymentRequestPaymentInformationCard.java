/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CapturePaymentRequestPaymentInformationCard
 */
@JsonPropertyOrder({
  CapturePaymentRequestPaymentInformationCard.JSON_PROPERTY_SOURCE_ACCOUNT_TYPE,
  CapturePaymentRequestPaymentInformationCard.JSON_PROPERTY_SOURCE_ACCOUNT_TYPE_DETAILS
})
@JsonTypeName("capturePayment_request_paymentInformation_card")
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T19:17:21.826843+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class CapturePaymentRequestPaymentInformationCard {
  public static final String JSON_PROPERTY_SOURCE_ACCOUNT_TYPE = "sourceAccountType";
  private String sourceAccountType;

  public static final String JSON_PROPERTY_SOURCE_ACCOUNT_TYPE_DETAILS = "sourceAccountTypeDetails";
  private String sourceAccountTypeDetails;

  public CapturePaymentRequestPaymentInformationCard() {
  }

  public CapturePaymentRequestPaymentInformationCard sourceAccountType(String sourceAccountType) {
    
    this.sourceAccountType = sourceAccountType;
    return this;
  }

  /**
   * Flag that specifies the type of account associated with the card.  The cardholder provides this information during the payment process.  This field is required in the following cases:   - Debit transactions on Cielo and Comercio Latino.   - Transactions with Brazilian-issued cards on CyberSource through VisaNet.   - Applicable only for CyberSource through VisaNet (CtV).  **Note** Combo cards in Brazil contain credit and debit functionality in a single card. Visa systems use a credit bank identification number (BIN) for this type of card. Using the BIN to determine whether a card is debit or credit can cause transactions with these cards to be processed incorrectly. CyberSource strongly recommends that you include this field for combo card transactions.  Possible values include the following.   - &#x60;CH&#x60;: Checking account  - &#x60;CR&#x60;: Credit card account  - &#x60;SA&#x60;: Saving account  - &#x60;LI&#x60;: Line of credit or credit portion of combo card  - &#x60;PP&#x60;: Prepaid card account or prepaid portion of combo card  - &#x60;UA&#x60;: Universal account  If useAs is set to credit/debit and there is a value in SourceAccountType, the value in the SourceAccountType field will take precedence. If useAs is set to CR/DB and there is a value in SourceAccountType, the value in the useAs field will take precedence. 
   * @return sourceAccountType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOURCE_ACCOUNT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSourceAccountType() {
    return sourceAccountType;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE_ACCOUNT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSourceAccountType(String sourceAccountType) {
    this.sourceAccountType = sourceAccountType;
  }

  public CapturePaymentRequestPaymentInformationCard sourceAccountTypeDetails(String sourceAccountTypeDetails) {
    
    this.sourceAccountTypeDetails = sourceAccountTypeDetails;
    return this;
  }

  /**
   * Type of account that is being used when the value for the override_payment_method field is line of credit (LI) or prepaid card (PP). Possible values for line of credit: - &#x60;AGRC&#x60;: Visa Agro Custeio - &#x60;AGRE&#x60;: Visa Agro Electron - &#x60;AGRI&#x60;: Visa Agro Investimento - &#x60;AGRO&#x60;: Visa Agro Possible values for prepaid card: - &#x60;VVA&#x60;: Visa Vale Alimentacao - &#x60;VVF&#x60;: Visa Vale Flex - &#x60;VVR&#x60;: Visa Vale Refeicao This field is supported only for combo card transactions in Brazil on CyberSource through VisaNet. 
   * @return sourceAccountTypeDetails
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOURCE_ACCOUNT_TYPE_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSourceAccountTypeDetails() {
    return sourceAccountTypeDetails;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE_ACCOUNT_TYPE_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSourceAccountTypeDetails(String sourceAccountTypeDetails) {
    this.sourceAccountTypeDetails = sourceAccountTypeDetails;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CapturePaymentRequestPaymentInformationCard capturePaymentRequestPaymentInformationCard = (CapturePaymentRequestPaymentInformationCard) o;
    return Objects.equals(this.sourceAccountType, capturePaymentRequestPaymentInformationCard.sourceAccountType) &&
        Objects.equals(this.sourceAccountTypeDetails, capturePaymentRequestPaymentInformationCard.sourceAccountTypeDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceAccountType, sourceAccountTypeDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CapturePaymentRequestPaymentInformationCard {\n");
    sb.append("    sourceAccountType: ").append(toIndentedString(sourceAccountType)).append("\n");
    sb.append("    sourceAccountTypeDetails: ").append(toIndentedString(sourceAccountTypeDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

