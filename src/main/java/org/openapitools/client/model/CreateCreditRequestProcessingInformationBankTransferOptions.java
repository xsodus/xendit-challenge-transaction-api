/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CreateCreditRequestProcessingInformationBankTransferOptions
 */
@JsonPropertyOrder({
  CreateCreditRequestProcessingInformationBankTransferOptions.JSON_PROPERTY_CUSTOMER_MEMO,
  CreateCreditRequestProcessingInformationBankTransferOptions.JSON_PROPERTY_SEC_CODE,
  CreateCreditRequestProcessingInformationBankTransferOptions.JSON_PROPERTY_TERMINAL_CITY,
  CreateCreditRequestProcessingInformationBankTransferOptions.JSON_PROPERTY_TERMINAL_STATE,
  CreateCreditRequestProcessingInformationBankTransferOptions.JSON_PROPERTY_EFFECTIVE_DATE,
  CreateCreditRequestProcessingInformationBankTransferOptions.JSON_PROPERTY_PARTIAL_PAYMENT_ID,
  CreateCreditRequestProcessingInformationBankTransferOptions.JSON_PROPERTY_SETTLEMENT_METHOD
})
@JsonTypeName("createCredit_request_processingInformation_bankTransferOptions")
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T19:17:21.826843+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class CreateCreditRequestProcessingInformationBankTransferOptions {
  public static final String JSON_PROPERTY_CUSTOMER_MEMO = "customerMemo";
  private String customerMemo;

  public static final String JSON_PROPERTY_SEC_CODE = "secCode";
  private String secCode;

  public static final String JSON_PROPERTY_TERMINAL_CITY = "terminalCity";
  private String terminalCity;

  public static final String JSON_PROPERTY_TERMINAL_STATE = "terminalState";
  private String terminalState;

  public static final String JSON_PROPERTY_EFFECTIVE_DATE = "effectiveDate";
  private String effectiveDate;

  public static final String JSON_PROPERTY_PARTIAL_PAYMENT_ID = "partialPaymentId";
  private String partialPaymentId;

  public static final String JSON_PROPERTY_SETTLEMENT_METHOD = "settlementMethod";
  private String settlementMethod;

  public CreateCreditRequestProcessingInformationBankTransferOptions() {
  }

  public CreateCreditRequestProcessingInformationBankTransferOptions customerMemo(String customerMemo) {
    
    this.customerMemo = customerMemo;
    return this;
  }

  /**
   * Payment related information.  This information is included on the customer&#39;s statement. 
   * @return customerMemo
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CUSTOMER_MEMO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCustomerMemo() {
    return customerMemo;
  }


  @JsonProperty(JSON_PROPERTY_CUSTOMER_MEMO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCustomerMemo(String customerMemo) {
    this.customerMemo = customerMemo;
  }

  public CreateCreditRequestProcessingInformationBankTransferOptions secCode(String secCode) {
    
    this.secCode = secCode;
    return this;
  }

  /**
   * Specifies the authorization method for the transaction.  #### TeleCheck Accepts only the following values: - &#x60;ARC&#x60;: account receivable conversion - &#x60;CCD&#x60;: corporate cash disbursement - &#x60;POP&#x60;: point of purchase conversion - &#x60;PPD&#x60;: prearranged payment and deposit entry - &#x60;TEL&#x60;: telephone-initiated entry - &#x60;WEB&#x60;: internet-initiated entry 
   * @return secCode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SEC_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSecCode() {
    return secCode;
  }


  @JsonProperty(JSON_PROPERTY_SEC_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSecCode(String secCode) {
    this.secCode = secCode;
  }

  public CreateCreditRequestProcessingInformationBankTransferOptions terminalCity(String terminalCity) {
    
    this.terminalCity = terminalCity;
    return this;
  }

  /**
   * City in which the terminal is located. If more than four alphanumeric characters are submitted, the transaction will be declined.  You cannot include any special characters. 
   * @return terminalCity
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TERMINAL_CITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTerminalCity() {
    return terminalCity;
  }


  @JsonProperty(JSON_PROPERTY_TERMINAL_CITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTerminalCity(String terminalCity) {
    this.terminalCity = terminalCity;
  }

  public CreateCreditRequestProcessingInformationBankTransferOptions terminalState(String terminalState) {
    
    this.terminalState = terminalState;
    return this;
  }

  /**
   * State in which the terminal is located. If more than two alphanumeric characters are submitted, the transaction will be declined.  You cannot include any special characters. 
   * @return terminalState
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TERMINAL_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTerminalState() {
    return terminalState;
  }


  @JsonProperty(JSON_PROPERTY_TERMINAL_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTerminalState(String terminalState) {
    this.terminalState = terminalState;
  }

  public CreateCreditRequestProcessingInformationBankTransferOptions effectiveDate(String effectiveDate) {
    
    this.effectiveDate = effectiveDate;
    return this;
  }

  /**
   * Effective date for the transaction. The effective date must be within 45 days of the current day. If you do not include this value, CyberSource sets the effective date to the next business day.  Format: &#x60;MMDDYYYY&#x60;  Supported only for the CyberSource ACH Service. 
   * @return effectiveDate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EFFECTIVE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEffectiveDate() {
    return effectiveDate;
  }


  @JsonProperty(JSON_PROPERTY_EFFECTIVE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEffectiveDate(String effectiveDate) {
    this.effectiveDate = effectiveDate;
  }

  public CreateCreditRequestProcessingInformationBankTransferOptions partialPaymentId(String partialPaymentId) {
    
    this.partialPaymentId = partialPaymentId;
    return this;
  }

  /**
   * Identifier for a partial payment or partial credit.  The value for each debit request or credit request must be unique within the scope of the order. 
   * @return partialPaymentId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PARTIAL_PAYMENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPartialPaymentId() {
    return partialPaymentId;
  }


  @JsonProperty(JSON_PROPERTY_PARTIAL_PAYMENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPartialPaymentId(String partialPaymentId) {
    this.partialPaymentId = partialPaymentId;
  }

  public CreateCreditRequestProcessingInformationBankTransferOptions settlementMethod(String settlementMethod) {
    
    this.settlementMethod = settlementMethod;
    return this;
  }

  /**
   * Method used for settlement.  Possible values: - &#x60;A&#x60;: Automated Clearing House (default for credits and for transactions using Canadian dollars) - &#x60;F&#x60;: Facsimile draft (U.S. dollars only) - &#x60;B&#x60;: Best possible (U.S. dollars only) (default if the field has not already been configured for your merchant ID) 
   * @return settlementMethod
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SETTLEMENT_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSettlementMethod() {
    return settlementMethod;
  }


  @JsonProperty(JSON_PROPERTY_SETTLEMENT_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSettlementMethod(String settlementMethod) {
    this.settlementMethod = settlementMethod;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateCreditRequestProcessingInformationBankTransferOptions createCreditRequestProcessingInformationBankTransferOptions = (CreateCreditRequestProcessingInformationBankTransferOptions) o;
    return Objects.equals(this.customerMemo, createCreditRequestProcessingInformationBankTransferOptions.customerMemo) &&
        Objects.equals(this.secCode, createCreditRequestProcessingInformationBankTransferOptions.secCode) &&
        Objects.equals(this.terminalCity, createCreditRequestProcessingInformationBankTransferOptions.terminalCity) &&
        Objects.equals(this.terminalState, createCreditRequestProcessingInformationBankTransferOptions.terminalState) &&
        Objects.equals(this.effectiveDate, createCreditRequestProcessingInformationBankTransferOptions.effectiveDate) &&
        Objects.equals(this.partialPaymentId, createCreditRequestProcessingInformationBankTransferOptions.partialPaymentId) &&
        Objects.equals(this.settlementMethod, createCreditRequestProcessingInformationBankTransferOptions.settlementMethod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customerMemo, secCode, terminalCity, terminalState, effectiveDate, partialPaymentId, settlementMethod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateCreditRequestProcessingInformationBankTransferOptions {\n");
    sb.append("    customerMemo: ").append(toIndentedString(customerMemo)).append("\n");
    sb.append("    secCode: ").append(toIndentedString(secCode)).append("\n");
    sb.append("    terminalCity: ").append(toIndentedString(terminalCity)).append("\n");
    sb.append("    terminalState: ").append(toIndentedString(terminalState)).append("\n");
    sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
    sb.append("    partialPaymentId: ").append(toIndentedString(partialPaymentId)).append("\n");
    sb.append("    settlementMethod: ").append(toIndentedString(settlementMethod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

