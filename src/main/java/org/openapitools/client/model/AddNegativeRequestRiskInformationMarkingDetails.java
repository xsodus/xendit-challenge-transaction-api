/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Details for marking the transaction as either positive or negative.
 */
@JsonPropertyOrder({
  AddNegativeRequestRiskInformationMarkingDetails.JSON_PROPERTY_NOTES,
  AddNegativeRequestRiskInformationMarkingDetails.JSON_PROPERTY_REASON,
  AddNegativeRequestRiskInformationMarkingDetails.JSON_PROPERTY_RECORD_NAME,
  AddNegativeRequestRiskInformationMarkingDetails.JSON_PROPERTY_ACTION
})
@JsonTypeName("addNegative_request_riskInformation_markingDetails")
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T19:17:21.826843+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class AddNegativeRequestRiskInformationMarkingDetails {
  public static final String JSON_PROPERTY_NOTES = "notes";
  private String notes;

  public static final String JSON_PROPERTY_REASON = "reason";
  private String reason;

  public static final String JSON_PROPERTY_RECORD_NAME = "recordName";
  private String recordName;

  public static final String JSON_PROPERTY_ACTION = "action";
  private String action;

  public AddNegativeRequestRiskInformationMarkingDetails() {
  }

  public AddNegativeRequestRiskInformationMarkingDetails notes(String notes) {
    
    this.notes = notes;
    return this;
  }

  /**
   * Notes or details that explain the reasons for adding the transaction to either the positive or negative list.
   * @return notes
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NOTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNotes() {
    return notes;
  }


  @JsonProperty(JSON_PROPERTY_NOTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNotes(String notes) {
    this.notes = notes;
  }

  public AddNegativeRequestRiskInformationMarkingDetails reason(String reason) {
    
    this.reason = reason;
    return this;
  }

  /**
   * Reason for adding the transaction to the negative list. This field can contain one of the following values: - &#x60;fraud_chargeback:&#x60; You have received a fraud-related chargeback for the transaction. - &#x60;non_fraud_chargeback:&#x60; You have received a non-fraudulent chargeback for the transaction. - &#x60;suspected:&#x60; You believe that you will probably receive a chargeback for the transaction. - &#x60;creditback:&#x60; You issued a refund to the customer to avoid a chargeback for the transaction. 
   * @return reason
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REASON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getReason() {
    return reason;
  }


  @JsonProperty(JSON_PROPERTY_REASON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReason(String reason) {
    this.reason = reason;
  }

  public AddNegativeRequestRiskInformationMarkingDetails recordName(String recordName) {
    
    this.recordName = recordName;
    return this;
  }

  /**
   * Name of the customer&#39;s record entered in the list. For the positive list, it is required if &#x60;action_ code&#x60;&#x3D;&#x60;add_positive&#x60;. If absent from the request, &#x60;ics_risk_update&#x60; creates the value for this field by concatenating the customer&#39;s first and last names. For the negative and the review lists, &#x60;record_name&#x60;, &#x60;customer_firstname&#x60;, and &#x60;customer_lastname&#x60; are optional. 
   * @return recordName
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RECORD_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRecordName() {
    return recordName;
  }


  @JsonProperty(JSON_PROPERTY_RECORD_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRecordName(String recordName) {
    this.recordName = recordName;
  }

  public AddNegativeRequestRiskInformationMarkingDetails action(String action) {
    
    this.action = action;
    return this;
  }

  /**
   * Indicates whether to add to or remove a customer&#39;s identity from the negative or positive list. This field can contain one of the following values: - add: Add information to the list. - convert: moves the data. - delete: deletes the data from the list. 
   * @return action
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAction() {
    return action;
  }


  @JsonProperty(JSON_PROPERTY_ACTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAction(String action) {
    this.action = action;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddNegativeRequestRiskInformationMarkingDetails addNegativeRequestRiskInformationMarkingDetails = (AddNegativeRequestRiskInformationMarkingDetails) o;
    return Objects.equals(this.notes, addNegativeRequestRiskInformationMarkingDetails.notes) &&
        Objects.equals(this.reason, addNegativeRequestRiskInformationMarkingDetails.reason) &&
        Objects.equals(this.recordName, addNegativeRequestRiskInformationMarkingDetails.recordName) &&
        Objects.equals(this.action, addNegativeRequestRiskInformationMarkingDetails.action);
  }

  @Override
  public int hashCode() {
    return Objects.hash(notes, reason, recordName, action);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddNegativeRequestRiskInformationMarkingDetails {\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    recordName: ").append(toIndentedString(recordName)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

