/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreatePaymentRequestOrderInformationLineItemsInnerPassenger;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CreateBundledDecisionManagerCaseRequestOrderInformationLineItemsInner
 */
@JsonPropertyOrder({
  CreateBundledDecisionManagerCaseRequestOrderInformationLineItemsInner.JSON_PROPERTY_TOTAL_AMOUNT,
  CreateBundledDecisionManagerCaseRequestOrderInformationLineItemsInner.JSON_PROPERTY_UNIT_PRICE,
  CreateBundledDecisionManagerCaseRequestOrderInformationLineItemsInner.JSON_PROPERTY_QUANTITY,
  CreateBundledDecisionManagerCaseRequestOrderInformationLineItemsInner.JSON_PROPERTY_GIFT_CARD_CURRENCY,
  CreateBundledDecisionManagerCaseRequestOrderInformationLineItemsInner.JSON_PROPERTY_PRODUCT_S_K_U,
  CreateBundledDecisionManagerCaseRequestOrderInformationLineItemsInner.JSON_PROPERTY_PRODUCT_RISK,
  CreateBundledDecisionManagerCaseRequestOrderInformationLineItemsInner.JSON_PROPERTY_PRODUCT_DESCRIPTION,
  CreateBundledDecisionManagerCaseRequestOrderInformationLineItemsInner.JSON_PROPERTY_PRODUCT_NAME,
  CreateBundledDecisionManagerCaseRequestOrderInformationLineItemsInner.JSON_PROPERTY_PRODUCT_CODE,
  CreateBundledDecisionManagerCaseRequestOrderInformationLineItemsInner.JSON_PROPERTY_GIFT,
  CreateBundledDecisionManagerCaseRequestOrderInformationLineItemsInner.JSON_PROPERTY_DISTRIBUTOR_PRODUCT_SKU,
  CreateBundledDecisionManagerCaseRequestOrderInformationLineItemsInner.JSON_PROPERTY_PASSENGER,
  CreateBundledDecisionManagerCaseRequestOrderInformationLineItemsInner.JSON_PROPERTY_SHIPPING_DESTINATION_TYPES,
  CreateBundledDecisionManagerCaseRequestOrderInformationLineItemsInner.JSON_PROPERTY_TAX_AMOUNT,
  CreateBundledDecisionManagerCaseRequestOrderInformationLineItemsInner.JSON_PROPERTY_ALLOWED_EXPORT_COUNTRIES,
  CreateBundledDecisionManagerCaseRequestOrderInformationLineItemsInner.JSON_PROPERTY_RESTRICTED_EXPORT_COUNTRIES
})
@JsonTypeName("createBundledDecisionManagerCase_request_orderInformation_lineItems_inner")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T18:32:10.370382+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class CreateBundledDecisionManagerCaseRequestOrderInformationLineItemsInner {
  public static final String JSON_PROPERTY_TOTAL_AMOUNT = "totalAmount";
  private String totalAmount;

  public static final String JSON_PROPERTY_UNIT_PRICE = "unitPrice";
  private String unitPrice;

  public static final String JSON_PROPERTY_QUANTITY = "quantity";
  private Integer quantity;

  public static final String JSON_PROPERTY_GIFT_CARD_CURRENCY = "giftCardCurrency";
  private Integer giftCardCurrency;

  public static final String JSON_PROPERTY_PRODUCT_S_K_U = "productSKU";
  private String productSKU;

  public static final String JSON_PROPERTY_PRODUCT_RISK = "productRisk";
  private String productRisk;

  public static final String JSON_PROPERTY_PRODUCT_DESCRIPTION = "productDescription";
  private String productDescription;

  public static final String JSON_PROPERTY_PRODUCT_NAME = "productName";
  private String productName;

  public static final String JSON_PROPERTY_PRODUCT_CODE = "productCode";
  private String productCode;

  public static final String JSON_PROPERTY_GIFT = "gift";
  private Boolean gift;

  public static final String JSON_PROPERTY_DISTRIBUTOR_PRODUCT_SKU = "distributorProductSku";
  private String distributorProductSku;

  public static final String JSON_PROPERTY_PASSENGER = "passenger";
  private CreatePaymentRequestOrderInformationLineItemsInnerPassenger passenger;

  public static final String JSON_PROPERTY_SHIPPING_DESTINATION_TYPES = "shippingDestinationTypes";
  private String shippingDestinationTypes;

  public static final String JSON_PROPERTY_TAX_AMOUNT = "taxAmount";
  private String taxAmount;

  public static final String JSON_PROPERTY_ALLOWED_EXPORT_COUNTRIES = "allowedExportCountries";
  private List<String> allowedExportCountries = new ArrayList<>();

  public static final String JSON_PROPERTY_RESTRICTED_EXPORT_COUNTRIES = "restrictedExportCountries";
  private List<String> restrictedExportCountries = new ArrayList<>();

  public CreateBundledDecisionManagerCaseRequestOrderInformationLineItemsInner() {
  }

  public CreateBundledDecisionManagerCaseRequestOrderInformationLineItemsInner totalAmount(String totalAmount) {
    
    this.totalAmount = totalAmount;
    return this;
  }

  /**
   * Total amount for the item. Normally calculated as the unit price times quantity.  When &#x60;orderInformation.lineItems[].productCode&#x60; is \&quot;gift_card\&quot;, this is the purchase amount total for prepaid gift cards in major units.  Example: 123.45 USD &#x3D; 123 
   * @return totalAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTotalAmount() {
    return totalAmount;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalAmount(String totalAmount) {
    this.totalAmount = totalAmount;
  }

  public CreateBundledDecisionManagerCaseRequestOrderInformationLineItemsInner unitPrice(String unitPrice) {
    
    this.unitPrice = unitPrice;
    return this;
  }

  /**
   * Per-item price of the product. This value for this field cannot be negative.  You must include either this field or the request-level field &#x60;orderInformation.amountDetails.totalAmount&#x60; in your request.  You can include a decimal point (.), but you cannot include any other special characters. The value is truncated to the correct number of decimal places.  #### DCC with a Third-Party Provider Set this field to the converted amount that was returned by the DCC provider. You must include either the 1st line item in the order and this field, or the request-level field &#x60;orderInformation.amountDetails.totalAmount&#x60; in your request.  #### Tax Calculation Required field for U.S., Canadian, international and value added taxes.  #### Zero Amount Authorizations If your processor supports zero amount authorizations, you can set this field to 0 for the authorization to check if the card is lost or stolen.  #### Maximum Field Lengths For GPN and JCN Gateway: Decimal (10) All other processors: Decimal (15) 
   * @return unitPrice
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UNIT_PRICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUnitPrice() {
    return unitPrice;
  }


  @JsonProperty(JSON_PROPERTY_UNIT_PRICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUnitPrice(String unitPrice) {
    this.unitPrice = unitPrice;
  }

  public CreateBundledDecisionManagerCaseRequestOrderInformationLineItemsInner quantity(Integer quantity) {
    
    this.quantity = quantity;
    return this;
  }

  /**
   * Number of units for this order. Must be a non-negative integer.  The default is &#x60;1&#x60;. For an authorization or capture transaction (&#x60;processingOptions.capture&#x60; is set to &#x60;true&#x60; or &#x60;false&#x60;), this field is required when &#x60;orderInformation.lineItems[].productCode&#x60; is not &#x60;default&#x60; or one of the other values related to shipping and/or handling.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes. 
   * minimum: 1
   * maximum: 999999999
   * @return quantity
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_QUANTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getQuantity() {
    return quantity;
  }


  @JsonProperty(JSON_PROPERTY_QUANTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
  }

  public CreateBundledDecisionManagerCaseRequestOrderInformationLineItemsInner giftCardCurrency(Integer giftCardCurrency) {
    
    this.giftCardCurrency = giftCardCurrency;
    return this;
  }

  /**
   * When &#x60;orderInformation.lineItems[].productCode&#x60; is \&quot;gift_card\&quot;, this is the currency used for the gift card purchase.  For the possible values, see the [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf) 
   * @return giftCardCurrency
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GIFT_CARD_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getGiftCardCurrency() {
    return giftCardCurrency;
  }


  @JsonProperty(JSON_PROPERTY_GIFT_CARD_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGiftCardCurrency(Integer giftCardCurrency) {
    this.giftCardCurrency = giftCardCurrency;
  }

  public CreateBundledDecisionManagerCaseRequestOrderInformationLineItemsInner productSKU(String productSKU) {
    
    this.productSKU = productSKU;
    return this;
  }

  /**
   * Product identifier code. Also known as the Stock Keeping Unit (SKU) code for the product.  For an authorization or capture transaction (&#x60;processingOptions.capture&#x60; is set to &#x60;true&#x60; or &#x60;false&#x60;), this field is required when &#x60;orderInformation.lineItems[].productCode&#x60; is not set to **default** or one of the other values that are related to shipping and/or handling.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. For an authorization or capture transaction (&#x60;processingOptions.capture&#x60; is set to &#x60;true&#x60; or &#x60;false&#x60;), this field is required when &#x60;orderInformation.lineItems[].productCode&#x60; is not &#x60;default&#x60; or one of the values related to shipping and/or handling. 
   * @return productSKU
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PRODUCT_S_K_U)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProductSKU() {
    return productSKU;
  }


  @JsonProperty(JSON_PROPERTY_PRODUCT_S_K_U)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProductSKU(String productSKU) {
    this.productSKU = productSKU;
  }

  public CreateBundledDecisionManagerCaseRequestOrderInformationLineItemsInner productRisk(String productRisk) {
    
    this.productRisk = productRisk;
    return this;
  }

  /**
   * Indicates the level of risk for the product. This field can contain one of the following values: - &#x60;low&#x60;: The product is associated with few chargebacks. - &#x60;normal&#x60;: The product is associated with a normal number of chargebacks. - &#x60;high&#x60;: The product is associated with many chargebacks. 
   * @return productRisk
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PRODUCT_RISK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProductRisk() {
    return productRisk;
  }


  @JsonProperty(JSON_PROPERTY_PRODUCT_RISK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProductRisk(String productRisk) {
    this.productRisk = productRisk;
  }

  public CreateBundledDecisionManagerCaseRequestOrderInformationLineItemsInner productDescription(String productDescription) {
    
    this.productDescription = productDescription;
    return this;
  }

  /**
   * Brief description of item.
   * @return productDescription
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PRODUCT_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProductDescription() {
    return productDescription;
  }


  @JsonProperty(JSON_PROPERTY_PRODUCT_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProductDescription(String productDescription) {
    this.productDescription = productDescription;
  }

  public CreateBundledDecisionManagerCaseRequestOrderInformationLineItemsInner productName(String productName) {
    
    this.productName = productName;
    return this;
  }

  /**
   * For an authorization or capture transaction (&#x60;processingOptions.capture&#x60; is &#x60;true&#x60; or &#x60;false&#x60;), this field is required when &#x60;orderInformation.lineItems[].productCode&#x60; is not &#x60;default&#x60; or one of the other values that are related to shipping and/or handling.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes. 
   * @return productName
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PRODUCT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProductName() {
    return productName;
  }


  @JsonProperty(JSON_PROPERTY_PRODUCT_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProductName(String productName) {
    this.productName = productName;
  }

  public CreateBundledDecisionManagerCaseRequestOrderInformationLineItemsInner productCode(String productCode) {
    
    this.productCode = productCode;
    return this;
  }

  /**
   * Type of product. The value for this field is used to identify the product category (electronic, handling, physical, service, or shipping). The default value is &#x60;default&#x60;.  If you are performing an authorization transaction (&#x60;processingOptions.capture&#x60; is set to &#x60;false&#x60;), and you set this field to a value other than &#x60;default&#x60; or one of the values related to shipping and/or handling, then &#x60;orderInformation.lineItems[].quantity&#x60;, &#x60;orderInformation.lineItems[].productName&#x60;, and &#x60;orderInformation.lineItems[].productSku&#x60; fields are required.  Optional field.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes.  The Product Codes for the tax service are located in the Cybersource Tax Codes guide. Contact Customer Support to request the guide. If you don&#39;t send a tax service Product Code in your tax request, product-based rules or exemptions will not be applied and the transaction will default to fully taxable in the locations where you&#39;ve indicated you need to collect tax [by way of nexus, no nexus, or seller registration number fields]. 
   * @return productCode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PRODUCT_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProductCode() {
    return productCode;
  }


  @JsonProperty(JSON_PROPERTY_PRODUCT_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProductCode(String productCode) {
    this.productCode = productCode;
  }

  public CreateBundledDecisionManagerCaseRequestOrderInformationLineItemsInner gift(Boolean gift) {
    
    this.gift = gift;
    return this;
  }

  /**
   * This field is only used in DM service.  Determines whether to assign risk to the order if the billing and shipping addresses specify different cities, states, or countries. This field can contain one of the following values: - true: Orders are assigned only slight additional risk if billing and shipping addresses are different. - false: Orders are assigned higher additional risk if billing and shipping addresses are different. 
   * @return gift
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GIFT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getGift() {
    return gift;
  }


  @JsonProperty(JSON_PROPERTY_GIFT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGift(Boolean gift) {
    this.gift = gift;
  }

  public CreateBundledDecisionManagerCaseRequestOrderInformationLineItemsInner distributorProductSku(String distributorProductSku) {
    
    this.distributorProductSku = distributorProductSku;
    return this;
  }

  /**
   * Product&#39;s identifier code. This field is inserted into the outgoing message without being parsed or formatted. This field is included as Distributor product SKU (Offer) in the list of API fields with which you can create custom rules. 
   * @return distributorProductSku
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DISTRIBUTOR_PRODUCT_SKU)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDistributorProductSku() {
    return distributorProductSku;
  }


  @JsonProperty(JSON_PROPERTY_DISTRIBUTOR_PRODUCT_SKU)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDistributorProductSku(String distributorProductSku) {
    this.distributorProductSku = distributorProductSku;
  }

  public CreateBundledDecisionManagerCaseRequestOrderInformationLineItemsInner passenger(CreatePaymentRequestOrderInformationLineItemsInnerPassenger passenger) {
    
    this.passenger = passenger;
    return this;
  }

  /**
   * Get passenger
   * @return passenger
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PASSENGER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CreatePaymentRequestOrderInformationLineItemsInnerPassenger getPassenger() {
    return passenger;
  }


  @JsonProperty(JSON_PROPERTY_PASSENGER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPassenger(CreatePaymentRequestOrderInformationLineItemsInnerPassenger passenger) {
    this.passenger = passenger;
  }

  public CreateBundledDecisionManagerCaseRequestOrderInformationLineItemsInner shippingDestinationTypes(String shippingDestinationTypes) {
    
    this.shippingDestinationTypes = shippingDestinationTypes;
    return this;
  }

  /**
   * Destination to where the item will be shipped. Example: Commercial, Residential, Store 
   * @return shippingDestinationTypes
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SHIPPING_DESTINATION_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getShippingDestinationTypes() {
    return shippingDestinationTypes;
  }


  @JsonProperty(JSON_PROPERTY_SHIPPING_DESTINATION_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShippingDestinationTypes(String shippingDestinationTypes) {
    this.shippingDestinationTypes = shippingDestinationTypes;
  }

  public CreateBundledDecisionManagerCaseRequestOrderInformationLineItemsInner taxAmount(String taxAmount) {
    
    this.taxAmount = taxAmount;
    return this;
  }

  /**
   * Total tax to apply to the product. This value cannot be negative. The tax amount and the offer amount must be in the same currency. The tax amount field is additive.  The following example uses a two-exponent currency such as USD:   1. You include each line item in your request.  ..- 1st line item has amount&#x3D;10.00, quantity&#x3D;1, and taxAmount&#x3D;0.80  ..- 2nd line item has amount&#x3D;20.00, quantity&#x3D;1, and taxAmount&#x3D;1.60  2. The total amount authorized will be 32.40, not 30.00 with 2.40 of tax included.  Optional field.  #### Airlines processing Tax portion of the order amount. This value cannot exceed 99999999999999 (fourteen 9s). Format: English characters only. Optional request field for a line item.  #### Tax Calculation Optional field for U.S., Canadian, international tax, and value added taxes.  Note if you send this field in your tax request, the value in the field will override the tax engine 
   * @return taxAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAX_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTaxAmount() {
    return taxAmount;
  }


  @JsonProperty(JSON_PROPERTY_TAX_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaxAmount(String taxAmount) {
    this.taxAmount = taxAmount;
  }

  public CreateBundledDecisionManagerCaseRequestOrderInformationLineItemsInner allowedExportCountries(List<String> allowedExportCountries) {
    
    this.allowedExportCountries = allowedExportCountries;
    return this;
  }

  public CreateBundledDecisionManagerCaseRequestOrderInformationLineItemsInner addAllowedExportCountriesItem(String allowedExportCountriesItem) {
    if (this.allowedExportCountries == null) {
      this.allowedExportCountries = new ArrayList<>();
    }
    this.allowedExportCountries.add(allowedExportCountriesItem);
    return this;
  }

  /**
   * Get allowedExportCountries
   * @return allowedExportCountries
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALLOWED_EXPORT_COUNTRIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getAllowedExportCountries() {
    return allowedExportCountries;
  }


  @JsonProperty(JSON_PROPERTY_ALLOWED_EXPORT_COUNTRIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllowedExportCountries(List<String> allowedExportCountries) {
    this.allowedExportCountries = allowedExportCountries;
  }

  public CreateBundledDecisionManagerCaseRequestOrderInformationLineItemsInner restrictedExportCountries(List<String> restrictedExportCountries) {
    
    this.restrictedExportCountries = restrictedExportCountries;
    return this;
  }

  public CreateBundledDecisionManagerCaseRequestOrderInformationLineItemsInner addRestrictedExportCountriesItem(String restrictedExportCountriesItem) {
    if (this.restrictedExportCountries == null) {
      this.restrictedExportCountries = new ArrayList<>();
    }
    this.restrictedExportCountries.add(restrictedExportCountriesItem);
    return this;
  }

  /**
   * Get restrictedExportCountries
   * @return restrictedExportCountries
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RESTRICTED_EXPORT_COUNTRIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getRestrictedExportCountries() {
    return restrictedExportCountries;
  }


  @JsonProperty(JSON_PROPERTY_RESTRICTED_EXPORT_COUNTRIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRestrictedExportCountries(List<String> restrictedExportCountries) {
    this.restrictedExportCountries = restrictedExportCountries;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateBundledDecisionManagerCaseRequestOrderInformationLineItemsInner createBundledDecisionManagerCaseRequestOrderInformationLineItemsInner = (CreateBundledDecisionManagerCaseRequestOrderInformationLineItemsInner) o;
    return Objects.equals(this.totalAmount, createBundledDecisionManagerCaseRequestOrderInformationLineItemsInner.totalAmount) &&
        Objects.equals(this.unitPrice, createBundledDecisionManagerCaseRequestOrderInformationLineItemsInner.unitPrice) &&
        Objects.equals(this.quantity, createBundledDecisionManagerCaseRequestOrderInformationLineItemsInner.quantity) &&
        Objects.equals(this.giftCardCurrency, createBundledDecisionManagerCaseRequestOrderInformationLineItemsInner.giftCardCurrency) &&
        Objects.equals(this.productSKU, createBundledDecisionManagerCaseRequestOrderInformationLineItemsInner.productSKU) &&
        Objects.equals(this.productRisk, createBundledDecisionManagerCaseRequestOrderInformationLineItemsInner.productRisk) &&
        Objects.equals(this.productDescription, createBundledDecisionManagerCaseRequestOrderInformationLineItemsInner.productDescription) &&
        Objects.equals(this.productName, createBundledDecisionManagerCaseRequestOrderInformationLineItemsInner.productName) &&
        Objects.equals(this.productCode, createBundledDecisionManagerCaseRequestOrderInformationLineItemsInner.productCode) &&
        Objects.equals(this.gift, createBundledDecisionManagerCaseRequestOrderInformationLineItemsInner.gift) &&
        Objects.equals(this.distributorProductSku, createBundledDecisionManagerCaseRequestOrderInformationLineItemsInner.distributorProductSku) &&
        Objects.equals(this.passenger, createBundledDecisionManagerCaseRequestOrderInformationLineItemsInner.passenger) &&
        Objects.equals(this.shippingDestinationTypes, createBundledDecisionManagerCaseRequestOrderInformationLineItemsInner.shippingDestinationTypes) &&
        Objects.equals(this.taxAmount, createBundledDecisionManagerCaseRequestOrderInformationLineItemsInner.taxAmount) &&
        Objects.equals(this.allowedExportCountries, createBundledDecisionManagerCaseRequestOrderInformationLineItemsInner.allowedExportCountries) &&
        Objects.equals(this.restrictedExportCountries, createBundledDecisionManagerCaseRequestOrderInformationLineItemsInner.restrictedExportCountries);
  }

  @Override
  public int hashCode() {
    return Objects.hash(totalAmount, unitPrice, quantity, giftCardCurrency, productSKU, productRisk, productDescription, productName, productCode, gift, distributorProductSku, passenger, shippingDestinationTypes, taxAmount, allowedExportCountries, restrictedExportCountries);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateBundledDecisionManagerCaseRequestOrderInformationLineItemsInner {\n");
    sb.append("    totalAmount: ").append(toIndentedString(totalAmount)).append("\n");
    sb.append("    unitPrice: ").append(toIndentedString(unitPrice)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    giftCardCurrency: ").append(toIndentedString(giftCardCurrency)).append("\n");
    sb.append("    productSKU: ").append(toIndentedString(productSKU)).append("\n");
    sb.append("    productRisk: ").append(toIndentedString(productRisk)).append("\n");
    sb.append("    productDescription: ").append(toIndentedString(productDescription)).append("\n");
    sb.append("    productName: ").append(toIndentedString(productName)).append("\n");
    sb.append("    productCode: ").append(toIndentedString(productCode)).append("\n");
    sb.append("    gift: ").append(toIndentedString(gift)).append("\n");
    sb.append("    distributorProductSku: ").append(toIndentedString(distributorProductSku)).append("\n");
    sb.append("    passenger: ").append(toIndentedString(passenger)).append("\n");
    sb.append("    shippingDestinationTypes: ").append(toIndentedString(shippingDestinationTypes)).append("\n");
    sb.append("    taxAmount: ").append(toIndentedString(taxAmount)).append("\n");
    sb.append("    allowedExportCountries: ").append(toIndentedString(allowedExportCountries)).append("\n");
    sb.append("    restrictedExportCountries: ").append(toIndentedString(restrictedExportCountries)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

