/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CardProcessingConfigCommonProcessorsValueCurrenciesValue
 */
@JsonPropertyOrder({
  CardProcessingConfigCommonProcessorsValueCurrenciesValue.JSON_PROPERTY_ENABLED,
  CardProcessingConfigCommonProcessorsValueCurrenciesValue.JSON_PROPERTY_ENABLED_CARD_PRESENT,
  CardProcessingConfigCommonProcessorsValueCurrenciesValue.JSON_PROPERTY_ENABLED_CARD_NOT_PRESENT,
  CardProcessingConfigCommonProcessorsValueCurrenciesValue.JSON_PROPERTY_MERCHANT_ID,
  CardProcessingConfigCommonProcessorsValueCurrenciesValue.JSON_PROPERTY_TERMINAL_ID,
  CardProcessingConfigCommonProcessorsValueCurrenciesValue.JSON_PROPERTY_TERMINAL_IDS,
  CardProcessingConfigCommonProcessorsValueCurrenciesValue.JSON_PROPERTY_SERVICE_ENABLEMENT_NUMBER
})
@JsonTypeName("CardProcessingConfig_common_processors_value_currencies_value")
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T19:17:21.826843+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class CardProcessingConfigCommonProcessorsValueCurrenciesValue {
  public static final String JSON_PROPERTY_ENABLED = "enabled";
  private Boolean enabled;

  public static final String JSON_PROPERTY_ENABLED_CARD_PRESENT = "enabledCardPresent";
  private Boolean enabledCardPresent;

  public static final String JSON_PROPERTY_ENABLED_CARD_NOT_PRESENT = "enabledCardNotPresent";
  private Boolean enabledCardNotPresent;

  public static final String JSON_PROPERTY_MERCHANT_ID = "merchantId";
  private Object merchantId;

  public static final String JSON_PROPERTY_TERMINAL_ID = "terminalId";
  private Object terminalId;

  public static final String JSON_PROPERTY_TERMINAL_IDS = "terminalIds";
  private List<String> terminalIds = new ArrayList<>();

  public static final String JSON_PROPERTY_SERVICE_ENABLEMENT_NUMBER = "serviceEnablementNumber";
  private Object serviceEnablementNumber;

  public CardProcessingConfigCommonProcessorsValueCurrenciesValue() {
  }

  public CardProcessingConfigCommonProcessorsValueCurrenciesValue enabled(Boolean enabled) {
    
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnabled() {
    return enabled;
  }


  @JsonProperty(JSON_PROPERTY_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public CardProcessingConfigCommonProcessorsValueCurrenciesValue enabledCardPresent(Boolean enabledCardPresent) {
    
    this.enabledCardPresent = enabledCardPresent;
    return this;
  }

  /**
   * Indicates whether the card-present transaction is activated for the selected currency. If both enabledCardPresent and enabledCardNotPresent are set to null, then enabledCardPresent will have the value of enabled. 
   * @return enabledCardPresent
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLED_CARD_PRESENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnabledCardPresent() {
    return enabledCardPresent;
  }


  @JsonProperty(JSON_PROPERTY_ENABLED_CARD_PRESENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnabledCardPresent(Boolean enabledCardPresent) {
    this.enabledCardPresent = enabledCardPresent;
  }

  public CardProcessingConfigCommonProcessorsValueCurrenciesValue enabledCardNotPresent(Boolean enabledCardNotPresent) {
    
    this.enabledCardNotPresent = enabledCardNotPresent;
    return this;
  }

  /**
   * Indicates whether the card-present transaction is activated for the selected currency. If both enabledCardPresent and enabledCardNotPresent are set to null, then enabledCardNotPresent will have the value of enabled. 
   * @return enabledCardNotPresent
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLED_CARD_NOT_PRESENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnabledCardNotPresent() {
    return enabledCardNotPresent;
  }


  @JsonProperty(JSON_PROPERTY_ENABLED_CARD_NOT_PRESENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnabledCardNotPresent(Boolean enabledCardNotPresent) {
    this.enabledCardNotPresent = enabledCardNotPresent;
  }

  public CardProcessingConfigCommonProcessorsValueCurrenciesValue merchantId(Object merchantId) {
    
    this.merchantId = merchantId;
    return this;
  }

  /**
   * Merchant ID assigned by an acquirer or a processor. Should not be overriden by any other party.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Min. Length&lt;/th&gt;&lt;th&gt;Max. Length&lt;/th&gt;&lt;th&gt;Regex&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays&lt;/td&gt;&lt;td&gt;cp, cnp, hybrid&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;11&lt;/td&gt;&lt;td&gt;^[0-9a-zA-Z]+$&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
   * @return merchantId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MERCHANT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getMerchantId() {
    return merchantId;
  }


  @JsonProperty(JSON_PROPERTY_MERCHANT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMerchantId(Object merchantId) {
    this.merchantId = merchantId;
  }

  public CardProcessingConfigCommonProcessorsValueCurrenciesValue terminalId(Object terminalId) {
    
    this.terminalId = terminalId;
    return this;
  }

  /**
   * The &#39;Terminal Id&#39; aka TID, is an identifier used for with your payments processor. Depending on the processor and payment acceptance type this may also be the default Terminal ID used for Card Present and Virtual Terminal transactions.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Min. Length&lt;/th&gt;&lt;th&gt;Max. Length&lt;/th&gt;&lt;th&gt;Regex&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays&lt;/td&gt;&lt;td&gt;cp, cnp, hybrid&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;^[0-9]+$&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
   * @return terminalId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TERMINAL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getTerminalId() {
    return terminalId;
  }


  @JsonProperty(JSON_PROPERTY_TERMINAL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTerminalId(Object terminalId) {
    this.terminalId = terminalId;
  }

  public CardProcessingConfigCommonProcessorsValueCurrenciesValue terminalIds(List<String> terminalIds) {
    
    this.terminalIds = terminalIds;
    return this;
  }

  public CardProcessingConfigCommonProcessorsValueCurrenciesValue addTerminalIdsItem(String terminalIdsItem) {
    if (this.terminalIds == null) {
      this.terminalIds = new ArrayList<>();
    }
    this.terminalIds.add(terminalIdsItem);
    return this;
  }

  /**
   * Applicable for Prisma (prisma) processor.
   * @return terminalIds
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TERMINAL_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getTerminalIds() {
    return terminalIds;
  }


  @JsonProperty(JSON_PROPERTY_TERMINAL_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTerminalIds(List<String> terminalIds) {
    this.terminalIds = terminalIds;
  }

  public CardProcessingConfigCommonProcessorsValueCurrenciesValue serviceEnablementNumber(Object serviceEnablementNumber) {
    
    this.serviceEnablementNumber = serviceEnablementNumber;
    return this;
  }

  /**
   * Service Establishment Number (a.k.a. SE Number) is a unique ten-digit number assigned by American Express to a merchant that accepts American Express cards. 10 digit number provided by acquirer currency. This may be unique for each currency, however it depends on the way the processor is set up for the merchant.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Min. Length&lt;/th&gt;&lt;th&gt;Max. Length&lt;/th&gt;&lt;th&gt;Regex&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cp, cnp, hybrid&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;10&lt;/td&gt;&lt;td&gt;^[0-9]+$&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
   * @return serviceEnablementNumber
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SERVICE_ENABLEMENT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getServiceEnablementNumber() {
    return serviceEnablementNumber;
  }


  @JsonProperty(JSON_PROPERTY_SERVICE_ENABLEMENT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setServiceEnablementNumber(Object serviceEnablementNumber) {
    this.serviceEnablementNumber = serviceEnablementNumber;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardProcessingConfigCommonProcessorsValueCurrenciesValue cardProcessingConfigCommonProcessorsValueCurrenciesValue = (CardProcessingConfigCommonProcessorsValueCurrenciesValue) o;
    return Objects.equals(this.enabled, cardProcessingConfigCommonProcessorsValueCurrenciesValue.enabled) &&
        Objects.equals(this.enabledCardPresent, cardProcessingConfigCommonProcessorsValueCurrenciesValue.enabledCardPresent) &&
        Objects.equals(this.enabledCardNotPresent, cardProcessingConfigCommonProcessorsValueCurrenciesValue.enabledCardNotPresent) &&
        Objects.equals(this.merchantId, cardProcessingConfigCommonProcessorsValueCurrenciesValue.merchantId) &&
        Objects.equals(this.terminalId, cardProcessingConfigCommonProcessorsValueCurrenciesValue.terminalId) &&
        Objects.equals(this.terminalIds, cardProcessingConfigCommonProcessorsValueCurrenciesValue.terminalIds) &&
        Objects.equals(this.serviceEnablementNumber, cardProcessingConfigCommonProcessorsValueCurrenciesValue.serviceEnablementNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, enabledCardPresent, enabledCardNotPresent, merchantId, terminalId, terminalIds, serviceEnablementNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardProcessingConfigCommonProcessorsValueCurrenciesValue {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    enabledCardPresent: ").append(toIndentedString(enabledCardPresent)).append("\n");
    sb.append("    enabledCardNotPresent: ").append(toIndentedString(enabledCardNotPresent)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    terminalId: ").append(toIndentedString(terminalId)).append("\n");
    sb.append("    terminalIds: ").append(toIndentedString(terminalIds)).append("\n");
    sb.append("    serviceEnablementNumber: ").append(toIndentedString(serviceEnablementNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

