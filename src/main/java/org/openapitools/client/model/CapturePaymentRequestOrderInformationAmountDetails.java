/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreatePaymentRequestOrderInformationAmountDetailsAmexAdditionalAmountsInner;
import org.openapitools.client.model.CreatePaymentRequestOrderInformationAmountDetailsTaxDetailsInner;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CapturePaymentRequestOrderInformationAmountDetails
 */
@JsonPropertyOrder({
  CapturePaymentRequestOrderInformationAmountDetails.JSON_PROPERTY_TOTAL_AMOUNT,
  CapturePaymentRequestOrderInformationAmountDetails.JSON_PROPERTY_CURRENCY,
  CapturePaymentRequestOrderInformationAmountDetails.JSON_PROPERTY_DISCOUNT_AMOUNT,
  CapturePaymentRequestOrderInformationAmountDetails.JSON_PROPERTY_DUTY_AMOUNT,
  CapturePaymentRequestOrderInformationAmountDetails.JSON_PROPERTY_GRATUITY_AMOUNT,
  CapturePaymentRequestOrderInformationAmountDetails.JSON_PROPERTY_TAX_AMOUNT,
  CapturePaymentRequestOrderInformationAmountDetails.JSON_PROPERTY_NATIONAL_TAX_INCLUDED,
  CapturePaymentRequestOrderInformationAmountDetails.JSON_PROPERTY_TAX_APPLIED_AFTER_DISCOUNT,
  CapturePaymentRequestOrderInformationAmountDetails.JSON_PROPERTY_TAX_APPLIED_LEVEL,
  CapturePaymentRequestOrderInformationAmountDetails.JSON_PROPERTY_TAX_TYPE_CODE,
  CapturePaymentRequestOrderInformationAmountDetails.JSON_PROPERTY_FREIGHT_AMOUNT,
  CapturePaymentRequestOrderInformationAmountDetails.JSON_PROPERTY_FOREIGN_AMOUNT,
  CapturePaymentRequestOrderInformationAmountDetails.JSON_PROPERTY_FOREIGN_CURRENCY,
  CapturePaymentRequestOrderInformationAmountDetails.JSON_PROPERTY_EXCHANGE_RATE,
  CapturePaymentRequestOrderInformationAmountDetails.JSON_PROPERTY_EXCHANGE_RATE_TIME_STAMP,
  CapturePaymentRequestOrderInformationAmountDetails.JSON_PROPERTY_AMEX_ADDITIONAL_AMOUNTS,
  CapturePaymentRequestOrderInformationAmountDetails.JSON_PROPERTY_TAX_DETAILS,
  CapturePaymentRequestOrderInformationAmountDetails.JSON_PROPERTY_SERVICE_FEE_AMOUNT,
  CapturePaymentRequestOrderInformationAmountDetails.JSON_PROPERTY_ORIGINAL_CURRENCY,
  CapturePaymentRequestOrderInformationAmountDetails.JSON_PROPERTY_CASHBACK_AMOUNT
})
@JsonTypeName("capturePayment_request_orderInformation_amountDetails")
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T19:17:21.826843+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class CapturePaymentRequestOrderInformationAmountDetails {
  public static final String JSON_PROPERTY_TOTAL_AMOUNT = "totalAmount";
  private String totalAmount;

  public static final String JSON_PROPERTY_CURRENCY = "currency";
  private String currency;

  public static final String JSON_PROPERTY_DISCOUNT_AMOUNT = "discountAmount";
  private String discountAmount;

  public static final String JSON_PROPERTY_DUTY_AMOUNT = "dutyAmount";
  private String dutyAmount;

  public static final String JSON_PROPERTY_GRATUITY_AMOUNT = "gratuityAmount";
  private String gratuityAmount;

  public static final String JSON_PROPERTY_TAX_AMOUNT = "taxAmount";
  private String taxAmount;

  public static final String JSON_PROPERTY_NATIONAL_TAX_INCLUDED = "nationalTaxIncluded";
  private String nationalTaxIncluded;

  public static final String JSON_PROPERTY_TAX_APPLIED_AFTER_DISCOUNT = "taxAppliedAfterDiscount";
  private String taxAppliedAfterDiscount;

  public static final String JSON_PROPERTY_TAX_APPLIED_LEVEL = "taxAppliedLevel";
  private String taxAppliedLevel;

  public static final String JSON_PROPERTY_TAX_TYPE_CODE = "taxTypeCode";
  private String taxTypeCode;

  public static final String JSON_PROPERTY_FREIGHT_AMOUNT = "freightAmount";
  private String freightAmount;

  public static final String JSON_PROPERTY_FOREIGN_AMOUNT = "foreignAmount";
  private String foreignAmount;

  public static final String JSON_PROPERTY_FOREIGN_CURRENCY = "foreignCurrency";
  private String foreignCurrency;

  public static final String JSON_PROPERTY_EXCHANGE_RATE = "exchangeRate";
  private String exchangeRate;

  public static final String JSON_PROPERTY_EXCHANGE_RATE_TIME_STAMP = "exchangeRateTimeStamp";
  private String exchangeRateTimeStamp;

  public static final String JSON_PROPERTY_AMEX_ADDITIONAL_AMOUNTS = "amexAdditionalAmounts";
  private List<CreatePaymentRequestOrderInformationAmountDetailsAmexAdditionalAmountsInner> amexAdditionalAmounts = new ArrayList<>();

  public static final String JSON_PROPERTY_TAX_DETAILS = "taxDetails";
  private List<CreatePaymentRequestOrderInformationAmountDetailsTaxDetailsInner> taxDetails = new ArrayList<>();

  public static final String JSON_PROPERTY_SERVICE_FEE_AMOUNT = "serviceFeeAmount";
  private String serviceFeeAmount;

  public static final String JSON_PROPERTY_ORIGINAL_CURRENCY = "originalCurrency";
  private String originalCurrency;

  public static final String JSON_PROPERTY_CASHBACK_AMOUNT = "cashbackAmount";
  private String cashbackAmount;

  public CapturePaymentRequestOrderInformationAmountDetails() {
  }

  public CapturePaymentRequestOrderInformationAmountDetails totalAmount(String totalAmount) {
    
    this.totalAmount = totalAmount;
    return this;
  }

  /**
   * Grand total for the order. This value cannot be negative. You can include a decimal point (.), but no other special characters. CyberSource truncates the amount to the correct number of decimal places.  **Note** For CTV, FDCCompass, Paymentech processors, the maximum length for this field is 12.  **Important** Some processors have specific requirements and limitations, such as maximum amounts and maximum field lengths.  If your processor supports zero amount authorizations, you can set this field to 0 for the authorization to check if the card is lost or stolen.   #### Card Present Required to include either this field or &#x60;orderInformation.lineItems[].unitPrice&#x60; for the order.  #### Invoicing Required for creating a new invoice.  #### PIN Debit Amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount.  Required field for PIN Debit purchase and PIN Debit credit requests. Optional field for PIN Debit reversal requests.  #### GPX This field is optional for reversing an authorization or credit; however, for all other processors, these fields are required.  #### DCC with a Third-Party Provider Set this field to the converted amount that was returned by the DCC provider. You must include either this field or the 1st line item in the order and the specific line-order amount in your request.   #### DCC for First Data Not used. 
   * @return totalAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTotalAmount() {
    return totalAmount;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalAmount(String totalAmount) {
    this.totalAmount = totalAmount;
  }

  public CapturePaymentRequestOrderInformationAmountDetails currency(String currency) {
    
    this.currency = currency;
    return this;
  }

  /**
   * Currency used for the order. Use the three-character [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)  #### Used by **Authorization** Required field.  **Authorization Reversal** For an authorization reversal (&#x60;reversalInformation&#x60;) or a capture (&#x60;processingOptions.capture&#x60; is set to &#x60;true&#x60;), you must use the same currency that you used in your payment authorization request.  #### PIN Debit Currency for the amount you requested for the PIN debit purchase. This value is returned for partial authorizations. The issuing bank can approve a partial amount if the balance on the debit card is less than the requested transaction amount. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf). Returned by PIN debit purchase.  For PIN debit reversal requests, you must use the same currency that was used for the PIN debit purchase or PIN debit credit that you are reversing. For the possible values, see the [ISO Standard Currency Codes](https://developer.cybersource.com/library/documentation/sbc/quickref/currencies.pdf).  Required field for PIN Debit purchase and PIN Debit credit requests. Optional field for PIN Debit reversal requests.  #### GPX This field is optional for reversing an authorization or credit.  #### DCC for First Data Your local currency.  #### Tax Calculation Required for international tax and value added tax only. Optional for U.S. and Canadian taxes. Your local currency. 
   * @return currency
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCurrency() {
    return currency;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrency(String currency) {
    this.currency = currency;
  }

  public CapturePaymentRequestOrderInformationAmountDetails discountAmount(String discountAmount) {
    
    this.discountAmount = discountAmount;
    return this;
  }

  /**
   * Total discount amount applied to the order. 
   * @return discountAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DISCOUNT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDiscountAmount() {
    return discountAmount;
  }


  @JsonProperty(JSON_PROPERTY_DISCOUNT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDiscountAmount(String discountAmount) {
    this.discountAmount = discountAmount;
  }

  public CapturePaymentRequestOrderInformationAmountDetails dutyAmount(String dutyAmount) {
    
    this.dutyAmount = dutyAmount;
    return this;
  }

  /**
   * Total charges for any import or export duties included in the order. 
   * @return dutyAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DUTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDutyAmount() {
    return dutyAmount;
  }


  @JsonProperty(JSON_PROPERTY_DUTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDutyAmount(String dutyAmount) {
    this.dutyAmount = dutyAmount;
  }

  public CapturePaymentRequestOrderInformationAmountDetails gratuityAmount(String gratuityAmount) {
    
    this.gratuityAmount = gratuityAmount;
    return this;
  }

  /**
   * Gratuity or tip amount for restaurants. Allowed only when industryDatatype&#x3D;restaurant. When your customer uses a debit card or prepaid card, and you receive a partial authorization, the payment networks recommend that you do not submit a capture amount that is higher than the authorized amount. When the capture amount exceeds the partial amount that was approved, the issuer has chargeback rights for the excess amount.  Used by **Capture** Optional field.  #### CyberSource through VisaNet Restaurant data is supported only on CyberSource through VisaNet when card is present. 
   * @return gratuityAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GRATUITY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getGratuityAmount() {
    return gratuityAmount;
  }


  @JsonProperty(JSON_PROPERTY_GRATUITY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGratuityAmount(String gratuityAmount) {
    this.gratuityAmount = gratuityAmount;
  }

  public CapturePaymentRequestOrderInformationAmountDetails taxAmount(String taxAmount) {
    
    this.taxAmount = taxAmount;
    return this;
  }

  /**
   * Total tax amount for all the items in the order. 
   * @return taxAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAX_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTaxAmount() {
    return taxAmount;
  }


  @JsonProperty(JSON_PROPERTY_TAX_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaxAmount(String taxAmount) {
    this.taxAmount = taxAmount;
  }

  public CapturePaymentRequestOrderInformationAmountDetails nationalTaxIncluded(String nationalTaxIncluded) {
    
    this.nationalTaxIncluded = nationalTaxIncluded;
    return this;
  }

  /**
   * Flag that indicates whether a national tax is included in the order total.  Possible values:   - **0**: national tax not included  - **1**: national tax included 
   * @return nationalTaxIncluded
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NATIONAL_TAX_INCLUDED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNationalTaxIncluded() {
    return nationalTaxIncluded;
  }


  @JsonProperty(JSON_PROPERTY_NATIONAL_TAX_INCLUDED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNationalTaxIncluded(String nationalTaxIncluded) {
    this.nationalTaxIncluded = nationalTaxIncluded;
  }

  public CapturePaymentRequestOrderInformationAmountDetails taxAppliedAfterDiscount(String taxAppliedAfterDiscount) {
    
    this.taxAppliedAfterDiscount = taxAppliedAfterDiscount;
    return this;
  }

  /**
   * Flag that indicates how the merchant manages discounts.  Possible values:   - **0**: no invoice level discount included  - **1**: tax calculated on the postdiscount invoice total  - **2**: tax calculated on the prediscount invoice total 
   * @return taxAppliedAfterDiscount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAX_APPLIED_AFTER_DISCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTaxAppliedAfterDiscount() {
    return taxAppliedAfterDiscount;
  }


  @JsonProperty(JSON_PROPERTY_TAX_APPLIED_AFTER_DISCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaxAppliedAfterDiscount(String taxAppliedAfterDiscount) {
    this.taxAppliedAfterDiscount = taxAppliedAfterDiscount;
  }

  public CapturePaymentRequestOrderInformationAmountDetails taxAppliedLevel(String taxAppliedLevel) {
    
    this.taxAppliedLevel = taxAppliedLevel;
    return this;
  }

  /**
   * Flag that indicates how you calculate tax.  Possible values:   - **0**: net prices with tax calculated at line item level  - **1**: net prices with tax calculated at invoice level  - **2**: gross prices with tax provided at line item level  - **3**: gross prices with tax provided at invoice level  - **4**: no tax applies on the invoice for the transaction 
   * @return taxAppliedLevel
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAX_APPLIED_LEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTaxAppliedLevel() {
    return taxAppliedLevel;
  }


  @JsonProperty(JSON_PROPERTY_TAX_APPLIED_LEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaxAppliedLevel(String taxAppliedLevel) {
    this.taxAppliedLevel = taxAppliedLevel;
  }

  public CapturePaymentRequestOrderInformationAmountDetails taxTypeCode(String taxTypeCode) {
    
    this.taxTypeCode = taxTypeCode;
    return this;
  }

  /**
   * For tax amounts that can be categorized as one tax type.  This field contains the tax type code that corresponds to the entry in the _lineItems.taxAmount_ field.  Possible values:   - **056**: sales tax (U.S only)  - **TX~**: all taxes (Canada only)   Note ~ &#x3D; space. 
   * @return taxTypeCode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAX_TYPE_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTaxTypeCode() {
    return taxTypeCode;
  }


  @JsonProperty(JSON_PROPERTY_TAX_TYPE_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaxTypeCode(String taxTypeCode) {
    this.taxTypeCode = taxTypeCode;
  }

  public CapturePaymentRequestOrderInformationAmountDetails freightAmount(String freightAmount) {
    
    this.freightAmount = freightAmount;
    return this;
  }

  /**
   * Total freight or shipping and handling charges for the order. When you include this field in your request, you must also include the **totalAmount** field. 
   * @return freightAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FREIGHT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFreightAmount() {
    return freightAmount;
  }


  @JsonProperty(JSON_PROPERTY_FREIGHT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFreightAmount(String freightAmount) {
    this.freightAmount = freightAmount;
  }

  public CapturePaymentRequestOrderInformationAmountDetails foreignAmount(String foreignAmount) {
    
    this.foreignAmount = foreignAmount;
    return this;
  }

  /**
   * Set this field to the converted amount that was returned by the DCC provider. 
   * @return foreignAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FOREIGN_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getForeignAmount() {
    return foreignAmount;
  }


  @JsonProperty(JSON_PROPERTY_FOREIGN_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setForeignAmount(String foreignAmount) {
    this.foreignAmount = foreignAmount;
  }

  public CapturePaymentRequestOrderInformationAmountDetails foreignCurrency(String foreignCurrency) {
    
    this.foreignCurrency = foreignCurrency;
    return this;
  }

  /**
   * Set this field to the converted amount that was returned by the DCC provider. 
   * @return foreignCurrency
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FOREIGN_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getForeignCurrency() {
    return foreignCurrency;
  }


  @JsonProperty(JSON_PROPERTY_FOREIGN_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setForeignCurrency(String foreignCurrency) {
    this.foreignCurrency = foreignCurrency;
  }

  public CapturePaymentRequestOrderInformationAmountDetails exchangeRate(String exchangeRate) {
    
    this.exchangeRate = exchangeRate;
    return this;
  }

  /**
   * Exchange rate returned by the DCC service. Includes a decimal point and a maximum of 4 decimal places. 
   * @return exchangeRate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXCHANGE_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExchangeRate() {
    return exchangeRate;
  }


  @JsonProperty(JSON_PROPERTY_EXCHANGE_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExchangeRate(String exchangeRate) {
    this.exchangeRate = exchangeRate;
  }

  public CapturePaymentRequestOrderInformationAmountDetails exchangeRateTimeStamp(String exchangeRateTimeStamp) {
    
    this.exchangeRateTimeStamp = exchangeRateTimeStamp;
    return this;
  }

  /**
   * Time stamp for the exchange rate. This value is returned by the DCC service.  Format: &#x60;YYYYMMDD~HH:MM&#x60;  where ~ denotes a space. 
   * @return exchangeRateTimeStamp
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXCHANGE_RATE_TIME_STAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExchangeRateTimeStamp() {
    return exchangeRateTimeStamp;
  }


  @JsonProperty(JSON_PROPERTY_EXCHANGE_RATE_TIME_STAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExchangeRateTimeStamp(String exchangeRateTimeStamp) {
    this.exchangeRateTimeStamp = exchangeRateTimeStamp;
  }

  public CapturePaymentRequestOrderInformationAmountDetails amexAdditionalAmounts(List<CreatePaymentRequestOrderInformationAmountDetailsAmexAdditionalAmountsInner> amexAdditionalAmounts) {
    
    this.amexAdditionalAmounts = amexAdditionalAmounts;
    return this;
  }

  public CapturePaymentRequestOrderInformationAmountDetails addAmexAdditionalAmountsItem(CreatePaymentRequestOrderInformationAmountDetailsAmexAdditionalAmountsInner amexAdditionalAmountsItem) {
    if (this.amexAdditionalAmounts == null) {
      this.amexAdditionalAmounts = new ArrayList<>();
    }
    this.amexAdditionalAmounts.add(amexAdditionalAmountsItem);
    return this;
  }

  /**
   * Get amexAdditionalAmounts
   * @return amexAdditionalAmounts
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AMEX_ADDITIONAL_AMOUNTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<CreatePaymentRequestOrderInformationAmountDetailsAmexAdditionalAmountsInner> getAmexAdditionalAmounts() {
    return amexAdditionalAmounts;
  }


  @JsonProperty(JSON_PROPERTY_AMEX_ADDITIONAL_AMOUNTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAmexAdditionalAmounts(List<CreatePaymentRequestOrderInformationAmountDetailsAmexAdditionalAmountsInner> amexAdditionalAmounts) {
    this.amexAdditionalAmounts = amexAdditionalAmounts;
  }

  public CapturePaymentRequestOrderInformationAmountDetails taxDetails(List<CreatePaymentRequestOrderInformationAmountDetailsTaxDetailsInner> taxDetails) {
    
    this.taxDetails = taxDetails;
    return this;
  }

  public CapturePaymentRequestOrderInformationAmountDetails addTaxDetailsItem(CreatePaymentRequestOrderInformationAmountDetailsTaxDetailsInner taxDetailsItem) {
    if (this.taxDetails == null) {
      this.taxDetails = new ArrayList<>();
    }
    this.taxDetails.add(taxDetailsItem);
    return this;
  }

  /**
   * Get taxDetails
   * @return taxDetails
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAX_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<CreatePaymentRequestOrderInformationAmountDetailsTaxDetailsInner> getTaxDetails() {
    return taxDetails;
  }


  @JsonProperty(JSON_PROPERTY_TAX_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaxDetails(List<CreatePaymentRequestOrderInformationAmountDetailsTaxDetailsInner> taxDetails) {
    this.taxDetails = taxDetails;
  }

  public CapturePaymentRequestOrderInformationAmountDetails serviceFeeAmount(String serviceFeeAmount) {
    
    this.serviceFeeAmount = serviceFeeAmount;
    return this;
  }

  /**
   * Service fee. Required for service fee transactions. 
   * @return serviceFeeAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SERVICE_FEE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getServiceFeeAmount() {
    return serviceFeeAmount;
  }


  @JsonProperty(JSON_PROPERTY_SERVICE_FEE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setServiceFeeAmount(String serviceFeeAmount) {
    this.serviceFeeAmount = serviceFeeAmount;
  }

  public CapturePaymentRequestOrderInformationAmountDetails originalCurrency(String originalCurrency) {
    
    this.originalCurrency = originalCurrency;
    return this;
  }

  /**
   * Your local pricing currency code.  For the possible values, see the [ISO Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf) 
   * @return originalCurrency
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ORIGINAL_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOriginalCurrency() {
    return originalCurrency;
  }


  @JsonProperty(JSON_PROPERTY_ORIGINAL_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOriginalCurrency(String originalCurrency) {
    this.originalCurrency = originalCurrency;
  }

  public CapturePaymentRequestOrderInformationAmountDetails cashbackAmount(String cashbackAmount) {
    
    this.cashbackAmount = cashbackAmount;
    return this;
  }

  /**
   * Cashback amount in the acquirer&#39;s currency. If a cashback amount is included in the request, it must be included in the &#x60;orderInformation.amountDetails.totalAmount&#x60; value.  This field is supported only on CyberSource through VisaNet.  #### Used by **Authorization** Optional. **Authorization Reversal** Optional.  #### PIN debit Optional field for PIN debit purchase, PIN debit credit or PIN debit reversal. 
   * @return cashbackAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CASHBACK_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCashbackAmount() {
    return cashbackAmount;
  }


  @JsonProperty(JSON_PROPERTY_CASHBACK_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCashbackAmount(String cashbackAmount) {
    this.cashbackAmount = cashbackAmount;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CapturePaymentRequestOrderInformationAmountDetails capturePaymentRequestOrderInformationAmountDetails = (CapturePaymentRequestOrderInformationAmountDetails) o;
    return Objects.equals(this.totalAmount, capturePaymentRequestOrderInformationAmountDetails.totalAmount) &&
        Objects.equals(this.currency, capturePaymentRequestOrderInformationAmountDetails.currency) &&
        Objects.equals(this.discountAmount, capturePaymentRequestOrderInformationAmountDetails.discountAmount) &&
        Objects.equals(this.dutyAmount, capturePaymentRequestOrderInformationAmountDetails.dutyAmount) &&
        Objects.equals(this.gratuityAmount, capturePaymentRequestOrderInformationAmountDetails.gratuityAmount) &&
        Objects.equals(this.taxAmount, capturePaymentRequestOrderInformationAmountDetails.taxAmount) &&
        Objects.equals(this.nationalTaxIncluded, capturePaymentRequestOrderInformationAmountDetails.nationalTaxIncluded) &&
        Objects.equals(this.taxAppliedAfterDiscount, capturePaymentRequestOrderInformationAmountDetails.taxAppliedAfterDiscount) &&
        Objects.equals(this.taxAppliedLevel, capturePaymentRequestOrderInformationAmountDetails.taxAppliedLevel) &&
        Objects.equals(this.taxTypeCode, capturePaymentRequestOrderInformationAmountDetails.taxTypeCode) &&
        Objects.equals(this.freightAmount, capturePaymentRequestOrderInformationAmountDetails.freightAmount) &&
        Objects.equals(this.foreignAmount, capturePaymentRequestOrderInformationAmountDetails.foreignAmount) &&
        Objects.equals(this.foreignCurrency, capturePaymentRequestOrderInformationAmountDetails.foreignCurrency) &&
        Objects.equals(this.exchangeRate, capturePaymentRequestOrderInformationAmountDetails.exchangeRate) &&
        Objects.equals(this.exchangeRateTimeStamp, capturePaymentRequestOrderInformationAmountDetails.exchangeRateTimeStamp) &&
        Objects.equals(this.amexAdditionalAmounts, capturePaymentRequestOrderInformationAmountDetails.amexAdditionalAmounts) &&
        Objects.equals(this.taxDetails, capturePaymentRequestOrderInformationAmountDetails.taxDetails) &&
        Objects.equals(this.serviceFeeAmount, capturePaymentRequestOrderInformationAmountDetails.serviceFeeAmount) &&
        Objects.equals(this.originalCurrency, capturePaymentRequestOrderInformationAmountDetails.originalCurrency) &&
        Objects.equals(this.cashbackAmount, capturePaymentRequestOrderInformationAmountDetails.cashbackAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(totalAmount, currency, discountAmount, dutyAmount, gratuityAmount, taxAmount, nationalTaxIncluded, taxAppliedAfterDiscount, taxAppliedLevel, taxTypeCode, freightAmount, foreignAmount, foreignCurrency, exchangeRate, exchangeRateTimeStamp, amexAdditionalAmounts, taxDetails, serviceFeeAmount, originalCurrency, cashbackAmount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CapturePaymentRequestOrderInformationAmountDetails {\n");
    sb.append("    totalAmount: ").append(toIndentedString(totalAmount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    discountAmount: ").append(toIndentedString(discountAmount)).append("\n");
    sb.append("    dutyAmount: ").append(toIndentedString(dutyAmount)).append("\n");
    sb.append("    gratuityAmount: ").append(toIndentedString(gratuityAmount)).append("\n");
    sb.append("    taxAmount: ").append(toIndentedString(taxAmount)).append("\n");
    sb.append("    nationalTaxIncluded: ").append(toIndentedString(nationalTaxIncluded)).append("\n");
    sb.append("    taxAppliedAfterDiscount: ").append(toIndentedString(taxAppliedAfterDiscount)).append("\n");
    sb.append("    taxAppliedLevel: ").append(toIndentedString(taxAppliedLevel)).append("\n");
    sb.append("    taxTypeCode: ").append(toIndentedString(taxTypeCode)).append("\n");
    sb.append("    freightAmount: ").append(toIndentedString(freightAmount)).append("\n");
    sb.append("    foreignAmount: ").append(toIndentedString(foreignAmount)).append("\n");
    sb.append("    foreignCurrency: ").append(toIndentedString(foreignCurrency)).append("\n");
    sb.append("    exchangeRate: ").append(toIndentedString(exchangeRate)).append("\n");
    sb.append("    exchangeRateTimeStamp: ").append(toIndentedString(exchangeRateTimeStamp)).append("\n");
    sb.append("    amexAdditionalAmounts: ").append(toIndentedString(amexAdditionalAmounts)).append("\n");
    sb.append("    taxDetails: ").append(toIndentedString(taxDetails)).append("\n");
    sb.append("    serviceFeeAmount: ").append(toIndentedString(serviceFeeAmount)).append("\n");
    sb.append("    originalCurrency: ").append(toIndentedString(originalCurrency)).append("\n");
    sb.append("    cashbackAmount: ").append(toIndentedString(cashbackAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

