/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.client.model.CreatePaymentRequestPaymentInformationBankAccount;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CreatePaymentRequestPaymentInformationBank
 */
@JsonPropertyOrder({
  CreatePaymentRequestPaymentInformationBank.JSON_PROPERTY_ACCOUNT,
  CreatePaymentRequestPaymentInformationBank.JSON_PROPERTY_ROUTING_NUMBER,
  CreatePaymentRequestPaymentInformationBank.JSON_PROPERTY_IBAN,
  CreatePaymentRequestPaymentInformationBank.JSON_PROPERTY_SWIFT_CODE,
  CreatePaymentRequestPaymentInformationBank.JSON_PROPERTY_CODE
})
@JsonTypeName("createPayment_request_paymentInformation_bank")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T18:32:10.370382+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class CreatePaymentRequestPaymentInformationBank {
  public static final String JSON_PROPERTY_ACCOUNT = "account";
  private CreatePaymentRequestPaymentInformationBankAccount account;

  public static final String JSON_PROPERTY_ROUTING_NUMBER = "routingNumber";
  private String routingNumber;

  public static final String JSON_PROPERTY_IBAN = "iban";
  private String iban;

  public static final String JSON_PROPERTY_SWIFT_CODE = "swiftCode";
  private String swiftCode;

  public static final String JSON_PROPERTY_CODE = "code";
  private String code;

  public CreatePaymentRequestPaymentInformationBank() {
  }

  public CreatePaymentRequestPaymentInformationBank account(CreatePaymentRequestPaymentInformationBankAccount account) {
    
    this.account = account;
    return this;
  }

  /**
   * Get account
   * @return account
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CreatePaymentRequestPaymentInformationBankAccount getAccount() {
    return account;
  }


  @JsonProperty(JSON_PROPERTY_ACCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAccount(CreatePaymentRequestPaymentInformationBankAccount account) {
    this.account = account;
  }

  public CreatePaymentRequestPaymentInformationBank routingNumber(String routingNumber) {
    
    this.routingNumber = routingNumber;
    return this;
  }

  /**
   * Bank routing number. This is also called the _transit number_. 
   * @return routingNumber
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ROUTING_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRoutingNumber() {
    return routingNumber;
  }


  @JsonProperty(JSON_PROPERTY_ROUTING_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRoutingNumber(String routingNumber) {
    this.routingNumber = routingNumber;
  }

  public CreatePaymentRequestPaymentInformationBank iban(String iban) {
    
    this.iban = iban;
    return this;
  }

  /**
   * International Bank Account Number (IBAN) for the bank account. For some countries you can provide this number instead of the traditional bank account information. You can use this field only when scoring a direct debit transaction. 
   * @return iban
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IBAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIban() {
    return iban;
  }


  @JsonProperty(JSON_PROPERTY_IBAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIban(String iban) {
    this.iban = iban;
  }

  public CreatePaymentRequestPaymentInformationBank swiftCode(String swiftCode) {
    
    this.swiftCode = swiftCode;
    return this;
  }

  /**
   * Bank&#39;s SWIFT code. You can use this field only when scoring a direct debit transaction. Required only for crossborder transactions. 
   * @return swiftCode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SWIFT_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSwiftCode() {
    return swiftCode;
  }


  @JsonProperty(JSON_PROPERTY_SWIFT_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSwiftCode(String swiftCode) {
    this.swiftCode = swiftCode;
  }

  public CreatePaymentRequestPaymentInformationBank code(String code) {
    
    this.code = code;
    return this;
  }

  /**
   * Bank code of the consumer&#39;s account 
   * @return code
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCode() {
    return code;
  }


  @JsonProperty(JSON_PROPERTY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCode(String code) {
    this.code = code;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreatePaymentRequestPaymentInformationBank createPaymentRequestPaymentInformationBank = (CreatePaymentRequestPaymentInformationBank) o;
    return Objects.equals(this.account, createPaymentRequestPaymentInformationBank.account) &&
        Objects.equals(this.routingNumber, createPaymentRequestPaymentInformationBank.routingNumber) &&
        Objects.equals(this.iban, createPaymentRequestPaymentInformationBank.iban) &&
        Objects.equals(this.swiftCode, createPaymentRequestPaymentInformationBank.swiftCode) &&
        Objects.equals(this.code, createPaymentRequestPaymentInformationBank.code);
  }

  @Override
  public int hashCode() {
    return Objects.hash(account, routingNumber, iban, swiftCode, code);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreatePaymentRequestPaymentInformationBank {\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    routingNumber: ").append(toIndentedString(routingNumber)).append("\n");
    sb.append("    iban: ").append(toIndentedString(iban)).append("\n");
    sb.append("    swiftCode: ").append(toIndentedString(swiftCode)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

