/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.LocalDate;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * PostRegistrationRequestRegistrationInformation
 */
@JsonPropertyOrder({
  PostRegistrationRequestRegistrationInformation.JSON_PROPERTY_BOARDING_REGISTRATION_ID,
  PostRegistrationRequestRegistrationInformation.JSON_PROPERTY_SUBMIT_TIME_UTC,
  PostRegistrationRequestRegistrationInformation.JSON_PROPERTY_STATUS,
  PostRegistrationRequestRegistrationInformation.JSON_PROPERTY_BOARDING_PACKAGE_ID,
  PostRegistrationRequestRegistrationInformation.JSON_PROPERTY_BOARDING_FLOW,
  PostRegistrationRequestRegistrationInformation.JSON_PROPERTY_MODE,
  PostRegistrationRequestRegistrationInformation.JSON_PROPERTY_SALES_REP_ID
})
@JsonTypeName("postRegistration_request_registrationInformation")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T18:32:10.370382+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class PostRegistrationRequestRegistrationInformation {
  public static final String JSON_PROPERTY_BOARDING_REGISTRATION_ID = "boardingRegistrationId";
  private String boardingRegistrationId;

  public static final String JSON_PROPERTY_SUBMIT_TIME_UTC = "submitTimeUtc";
  private LocalDate submitTimeUtc;

  /**
   * The status of Registration request Possible Values:   - &#39;PROCESSING&#39;: This status is for Registrations that are still in Progress, you can get the latest status by calling the GET endpoint using the Registration Id   - &#39;SUCCESS&#39;: This status is for Registrations that were successfull on every step of the on boarding process.   - &#39;FAILURE&#39;: This status is for Registrations that fail before the Organization was created; please refer to the details section in the reponse for more information.   - &#39;PARTIAL&#39;: This status is for Registrations that created the Organization successfully but fail in at least on step while configuring it; please refer to the details section in the response for more information. 
   */
  public enum StatusEnum {
    PROCESSING("PROCESSING"),
    
    SUCCESS("SUCCESS"),
    
    FAILURE("FAILURE"),
    
    PARTIAL("PARTIAL");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATUS = "status";
  private StatusEnum status;

  public static final String JSON_PROPERTY_BOARDING_PACKAGE_ID = "boardingPackageId";
  private String boardingPackageId;

  /**
   * Determines the boarding flow for this registration. Possible Values:   - &#39;ENTERPRISE&#39;   - &#39;SMB&#39;   - &#39;ADDPRODUCT&#39; 
   */
  public enum BoardingFlowEnum {
    ENTERPRISE("ENTERPRISE"),
    
    SMB("SMB"),
    
    ADDPRODUCT("ADDPRODUCT");

    private String value;

    BoardingFlowEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static BoardingFlowEnum fromValue(String value) {
      for (BoardingFlowEnum b : BoardingFlowEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_BOARDING_FLOW = "boardingFlow";
  private BoardingFlowEnum boardingFlow;

  /**
   * In case mode is not provided the API will use COMPLETE as default Possible Values:   - &#39;COMPLETE&#39;   - &#39;PARTIAL&#39; 
   */
  public enum ModeEnum {
    COMPLETE("COMPLETE"),
    
    PARTIAL("PARTIAL");

    private String value;

    ModeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ModeEnum fromValue(String value) {
      for (ModeEnum b : ModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_MODE = "mode";
  private ModeEnum mode;

  public static final String JSON_PROPERTY_SALES_REP_ID = "salesRepId";
  private String salesRepId;

  public PostRegistrationRequestRegistrationInformation() {
  }
  /**
   * Constructor with only readonly parameters
   */
  @JsonCreator
  public PostRegistrationRequestRegistrationInformation(
    @JsonProperty(JSON_PROPERTY_BOARDING_REGISTRATION_ID) String boardingRegistrationId, 
    @JsonProperty(JSON_PROPERTY_SUBMIT_TIME_UTC) LocalDate submitTimeUtc, 
    @JsonProperty(JSON_PROPERTY_STATUS) StatusEnum status
  ) {
    this();
    this.boardingRegistrationId = boardingRegistrationId;
    this.submitTimeUtc = submitTimeUtc;
    this.status = status;
  }

  /**
   * Get boardingRegistrationId
   * @return boardingRegistrationId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BOARDING_REGISTRATION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBoardingRegistrationId() {
    return boardingRegistrationId;
  }



  /**
   * Time of request in UTC. &#x60;Format: YYYY-MM-DDThh:mm:ssZ&#x60;  Example 2016-08-11T22:47:57Z equals August 11, 2016, at 22:47:57 (10:47:57 p.m.). The T separates the date and the time. The Z indicates UTC. 
   * @return submitTimeUtc
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUBMIT_TIME_UTC)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LocalDate getSubmitTimeUtc() {
    return submitTimeUtc;
  }



  /**
   * The status of Registration request Possible Values:   - &#39;PROCESSING&#39;: This status is for Registrations that are still in Progress, you can get the latest status by calling the GET endpoint using the Registration Id   - &#39;SUCCESS&#39;: This status is for Registrations that were successfull on every step of the on boarding process.   - &#39;FAILURE&#39;: This status is for Registrations that fail before the Organization was created; please refer to the details section in the reponse for more information.   - &#39;PARTIAL&#39;: This status is for Registrations that created the Organization successfully but fail in at least on step while configuring it; please refer to the details section in the response for more information. 
   * @return status
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public StatusEnum getStatus() {
    return status;
  }



  public PostRegistrationRequestRegistrationInformation boardingPackageId(String boardingPackageId) {
    
    this.boardingPackageId = boardingPackageId;
    return this;
  }

  /**
   * Get boardingPackageId
   * @return boardingPackageId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BOARDING_PACKAGE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBoardingPackageId() {
    return boardingPackageId;
  }


  @JsonProperty(JSON_PROPERTY_BOARDING_PACKAGE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBoardingPackageId(String boardingPackageId) {
    this.boardingPackageId = boardingPackageId;
  }

  public PostRegistrationRequestRegistrationInformation boardingFlow(BoardingFlowEnum boardingFlow) {
    
    this.boardingFlow = boardingFlow;
    return this;
  }

  /**
   * Determines the boarding flow for this registration. Possible Values:   - &#39;ENTERPRISE&#39;   - &#39;SMB&#39;   - &#39;ADDPRODUCT&#39; 
   * @return boardingFlow
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BOARDING_FLOW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BoardingFlowEnum getBoardingFlow() {
    return boardingFlow;
  }


  @JsonProperty(JSON_PROPERTY_BOARDING_FLOW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBoardingFlow(BoardingFlowEnum boardingFlow) {
    this.boardingFlow = boardingFlow;
  }

  public PostRegistrationRequestRegistrationInformation mode(ModeEnum mode) {
    
    this.mode = mode;
    return this;
  }

  /**
   * In case mode is not provided the API will use COMPLETE as default Possible Values:   - &#39;COMPLETE&#39;   - &#39;PARTIAL&#39; 
   * @return mode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ModeEnum getMode() {
    return mode;
  }


  @JsonProperty(JSON_PROPERTY_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMode(ModeEnum mode) {
    this.mode = mode;
  }

  public PostRegistrationRequestRegistrationInformation salesRepId(String salesRepId) {
    
    this.salesRepId = salesRepId;
    return this;
  }

  /**
   * Get salesRepId
   * @return salesRepId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SALES_REP_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSalesRepId() {
    return salesRepId;
  }


  @JsonProperty(JSON_PROPERTY_SALES_REP_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSalesRepId(String salesRepId) {
    this.salesRepId = salesRepId;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostRegistrationRequestRegistrationInformation postRegistrationRequestRegistrationInformation = (PostRegistrationRequestRegistrationInformation) o;
    return Objects.equals(this.boardingRegistrationId, postRegistrationRequestRegistrationInformation.boardingRegistrationId) &&
        Objects.equals(this.submitTimeUtc, postRegistrationRequestRegistrationInformation.submitTimeUtc) &&
        Objects.equals(this.status, postRegistrationRequestRegistrationInformation.status) &&
        Objects.equals(this.boardingPackageId, postRegistrationRequestRegistrationInformation.boardingPackageId) &&
        Objects.equals(this.boardingFlow, postRegistrationRequestRegistrationInformation.boardingFlow) &&
        Objects.equals(this.mode, postRegistrationRequestRegistrationInformation.mode) &&
        Objects.equals(this.salesRepId, postRegistrationRequestRegistrationInformation.salesRepId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(boardingRegistrationId, submitTimeUtc, status, boardingPackageId, boardingFlow, mode, salesRepId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostRegistrationRequestRegistrationInformation {\n");
    sb.append("    boardingRegistrationId: ").append(toIndentedString(boardingRegistrationId)).append("\n");
    sb.append("    submitTimeUtc: ").append(toIndentedString(submitTimeUtc)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    boardingPackageId: ").append(toIndentedString(boardingPackageId)).append("\n");
    sb.append("    boardingFlow: ").append(toIndentedString(boardingFlow)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    salesRepId: ").append(toIndentedString(salesRepId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

