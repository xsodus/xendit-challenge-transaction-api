/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CapturePaymentRequestProcessingInformationAuthorizationOptions
 */
@JsonPropertyOrder({
  CapturePaymentRequestProcessingInformationAuthorizationOptions.JSON_PROPERTY_AUTH_TYPE,
  CapturePaymentRequestProcessingInformationAuthorizationOptions.JSON_PROPERTY_VERBAL_AUTH_CODE,
  CapturePaymentRequestProcessingInformationAuthorizationOptions.JSON_PROPERTY_VERBAL_AUTH_TRANSACTION_ID
})
@JsonTypeName("capturePayment_request_processingInformation_authorizationOptions")
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T19:17:21.826843+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class CapturePaymentRequestProcessingInformationAuthorizationOptions {
  public static final String JSON_PROPERTY_AUTH_TYPE = "authType";
  private String authType;

  public static final String JSON_PROPERTY_VERBAL_AUTH_CODE = "verbalAuthCode";
  private String verbalAuthCode;

  public static final String JSON_PROPERTY_VERBAL_AUTH_TRANSACTION_ID = "verbalAuthTransactionId";
  private String verbalAuthTransactionId;

  public CapturePaymentRequestProcessingInformationAuthorizationOptions() {
  }

  public CapturePaymentRequestProcessingInformationAuthorizationOptions authType(String authType) {
    
    this.authType = authType;
    return this;
  }

  /**
   * Authorization type. Possible values:   - &#x60;AUTOCAPTURE&#x60;: automatic capture.  - &#x60;STANDARDCAPTURE&#x60;: standard capture.  - &#x60;VERBAL&#x60;: forced capture. Include it in the payment request for a forced capture. Include it in the capture request for a verbal payment.  #### Asia, Middle East, and Africa Gateway; Cielo; Comercio Latino; and CyberSource Latin American Processing Set this field to &#x60;AUTOCAPTURE&#x60; and include it in a bundled request to indicate that you are requesting an automatic capture. If your account is configured to enable automatic captures, set this field to &#x60;STANDARDCAPTURE&#x60; and include it in a standard authorization or bundled request to indicate that you are overriding an automatic capture.  #### Forced Capture Set this field to &#x60;VERBAL&#x60; and include it in the authorization request to indicate that you are performing a forced capture; therefore, you receive the authorization code outside the CyberSource system.  #### Verbal Authorization Set this field to &#x60;VERBAL&#x60; and include it in the capture request to indicate that the request is for a verbal authorization. 
   * @return authType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTH_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAuthType() {
    return authType;
  }


  @JsonProperty(JSON_PROPERTY_AUTH_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAuthType(String authType) {
    this.authType = authType;
  }

  public CapturePaymentRequestProcessingInformationAuthorizationOptions verbalAuthCode(String verbalAuthCode) {
    
    this.verbalAuthCode = verbalAuthCode;
    return this;
  }

  /**
   * Authorization code.  #### Forced Capture Use this field to send the authorization code you received from a payment that you authorized outside the CyberSource system.  #### PIN debit Authorization code that is returned by the processor.  Returned by PIN debit purchase.  #### Verbal Authorization Use this field in CAPTURE API to send the verbally received authorization code. 
   * @return verbalAuthCode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VERBAL_AUTH_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getVerbalAuthCode() {
    return verbalAuthCode;
  }


  @JsonProperty(JSON_PROPERTY_VERBAL_AUTH_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVerbalAuthCode(String verbalAuthCode) {
    this.verbalAuthCode = verbalAuthCode;
  }

  public CapturePaymentRequestProcessingInformationAuthorizationOptions verbalAuthTransactionId(String verbalAuthTransactionId) {
    
    this.verbalAuthTransactionId = verbalAuthTransactionId;
    return this;
  }

  /**
   * Transaction ID (TID).  #### FDMS South This field is required for verbal authorizations and forced captures with the American Express card type to comply with the CAPN requirements: - Forced capture: Obtain the value for this field from the authorization response. - Verbal authorization: You cannot obtain a value for this field so CyberSource uses the default value of &#x60;000000000000000&#x60; (15 zeros). 
   * @return verbalAuthTransactionId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VERBAL_AUTH_TRANSACTION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getVerbalAuthTransactionId() {
    return verbalAuthTransactionId;
  }


  @JsonProperty(JSON_PROPERTY_VERBAL_AUTH_TRANSACTION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVerbalAuthTransactionId(String verbalAuthTransactionId) {
    this.verbalAuthTransactionId = verbalAuthTransactionId;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CapturePaymentRequestProcessingInformationAuthorizationOptions capturePaymentRequestProcessingInformationAuthorizationOptions = (CapturePaymentRequestProcessingInformationAuthorizationOptions) o;
    return Objects.equals(this.authType, capturePaymentRequestProcessingInformationAuthorizationOptions.authType) &&
        Objects.equals(this.verbalAuthCode, capturePaymentRequestProcessingInformationAuthorizationOptions.verbalAuthCode) &&
        Objects.equals(this.verbalAuthTransactionId, capturePaymentRequestProcessingInformationAuthorizationOptions.verbalAuthTransactionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authType, verbalAuthCode, verbalAuthTransactionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CapturePaymentRequestProcessingInformationAuthorizationOptions {\n");
    sb.append("    authType: ").append(toIndentedString(authType)).append("\n");
    sb.append("    verbalAuthCode: ").append(toIndentedString(verbalAuthCode)).append("\n");
    sb.append("    verbalAuthTransactionId: ").append(toIndentedString(verbalAuthTransactionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

