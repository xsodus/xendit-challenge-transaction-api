/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CreatePaymentRequestTokenInformationTokenProvisioningInformation
 */
@JsonPropertyOrder({
  CreatePaymentRequestTokenInformationTokenProvisioningInformation.JSON_PROPERTY_CONSUMER_CONSENT_OBTAINED,
  CreatePaymentRequestTokenInformationTokenProvisioningInformation.JSON_PROPERTY_MULTI_FACTOR_AUTHENTICATED
})
@JsonTypeName("createPayment_request_tokenInformation_tokenProvisioningInformation")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T18:32:10.370382+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class CreatePaymentRequestTokenInformationTokenProvisioningInformation {
  public static final String JSON_PROPERTY_CONSUMER_CONSENT_OBTAINED = "consumerConsentObtained";
  private Boolean consumerConsentObtained;

  public static final String JSON_PROPERTY_MULTI_FACTOR_AUTHENTICATED = "multiFactorAuthenticated";
  private Boolean multiFactorAuthenticated;

  public CreatePaymentRequestTokenInformationTokenProvisioningInformation() {
  }

  public CreatePaymentRequestTokenInformationTokenProvisioningInformation consumerConsentObtained(Boolean consumerConsentObtained) {
    
    this.consumerConsentObtained = consumerConsentObtained;
    return this;
  }

  /**
   * Flag that indicates whether the user consented to the tokenization of their credentials. Required for card network tokenization in certain markets, such as India. Possible Values: - &#x60;true&#x60;: Consumer has consented to tokenization of their credentials. - &#x60;false&#x60;: Consumer has not consented to tokenization of their credentials. 
   * @return consumerConsentObtained
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONSUMER_CONSENT_OBTAINED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getConsumerConsentObtained() {
    return consumerConsentObtained;
  }


  @JsonProperty(JSON_PROPERTY_CONSUMER_CONSENT_OBTAINED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConsumerConsentObtained(Boolean consumerConsentObtained) {
    this.consumerConsentObtained = consumerConsentObtained;
  }

  public CreatePaymentRequestTokenInformationTokenProvisioningInformation multiFactorAuthenticated(Boolean multiFactorAuthenticated) {
    
    this.multiFactorAuthenticated = multiFactorAuthenticated;
    return this;
  }

  /**
   * Flag that indicates whether AFA (Additional Factor of Authentication) for the PAN was completed. Required for card network tokenization in certain markets, such as India. Possible Values: - &#x60;true&#x60;: Consumer has been authenticated by the issuer. - &#x60;false&#x60;: Consumer has not been authenticated by the issuer. 
   * @return multiFactorAuthenticated
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MULTI_FACTOR_AUTHENTICATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getMultiFactorAuthenticated() {
    return multiFactorAuthenticated;
  }


  @JsonProperty(JSON_PROPERTY_MULTI_FACTOR_AUTHENTICATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMultiFactorAuthenticated(Boolean multiFactorAuthenticated) {
    this.multiFactorAuthenticated = multiFactorAuthenticated;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreatePaymentRequestTokenInformationTokenProvisioningInformation createPaymentRequestTokenInformationTokenProvisioningInformation = (CreatePaymentRequestTokenInformationTokenProvisioningInformation) o;
    return Objects.equals(this.consumerConsentObtained, createPaymentRequestTokenInformationTokenProvisioningInformation.consumerConsentObtained) &&
        Objects.equals(this.multiFactorAuthenticated, createPaymentRequestTokenInformationTokenProvisioningInformation.multiFactorAuthenticated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(consumerConsentObtained, multiFactorAuthenticated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreatePaymentRequestTokenInformationTokenProvisioningInformation {\n");
    sb.append("    consumerConsentObtained: ").append(toIndentedString(consumerConsentObtained)).append("\n");
    sb.append("    multiFactorAuthenticated: ").append(toIndentedString(multiFactorAuthenticated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

