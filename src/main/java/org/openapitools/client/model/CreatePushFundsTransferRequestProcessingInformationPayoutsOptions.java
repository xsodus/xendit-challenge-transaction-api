/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CreatePushFundsTransferRequestProcessingInformationPayoutsOptions
 */
@JsonPropertyOrder({
  CreatePushFundsTransferRequestProcessingInformationPayoutsOptions.JSON_PROPERTY_SOURCE_CURRENCY,
  CreatePushFundsTransferRequestProcessingInformationPayoutsOptions.JSON_PROPERTY_DESTINATION_CURRENCY
})
@JsonTypeName("createPushFundsTransfer_request_processingInformation_payoutsOptions")
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T19:17:21.826843+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class CreatePushFundsTransferRequestProcessingInformationPayoutsOptions {
  public static final String JSON_PROPERTY_SOURCE_CURRENCY = "sourceCurrency";
  private JsonNullable<String> sourceCurrency = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_DESTINATION_CURRENCY = "destinationCurrency";
  private JsonNullable<String> destinationCurrency = JsonNullable.<String>undefined();

  public CreatePushFundsTransferRequestProcessingInformationPayoutsOptions() {
  }

  public CreatePushFundsTransferRequestProcessingInformationPayoutsOptions sourceCurrency(String sourceCurrency) {
    this.sourceCurrency = JsonNullable.<String>of(sourceCurrency);
    
    return this;
  }

  /**
   * Use a 3-character alpha currency code for source currency of the funds transfer.  Yellow Pepper Supported for cross border funds transfers.  ISO standard currencies: http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf 
   * @return sourceCurrency
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public String getSourceCurrency() {
        return sourceCurrency.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SOURCE_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getSourceCurrency_JsonNullable() {
    return sourceCurrency;
  }
  
  @JsonProperty(JSON_PROPERTY_SOURCE_CURRENCY)
  public void setSourceCurrency_JsonNullable(JsonNullable<String> sourceCurrency) {
    this.sourceCurrency = sourceCurrency;
  }

  public void setSourceCurrency(String sourceCurrency) {
    this.sourceCurrency = JsonNullable.<String>of(sourceCurrency);
  }

  public CreatePushFundsTransferRequestProcessingInformationPayoutsOptions destinationCurrency(String destinationCurrency) {
    this.destinationCurrency = JsonNullable.<String>of(destinationCurrency);
    
    return this;
  }

  /**
   * Use a 3-character alpha currency code for destination currency of the funds transfer.  Yellow Pepper Supported for cross border funds transfers.  ISO standard currencies: http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf 
   * @return destinationCurrency
   */
  @javax.annotation.Nullable
  @JsonIgnore

  public String getDestinationCurrency() {
        return destinationCurrency.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DESTINATION_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getDestinationCurrency_JsonNullable() {
    return destinationCurrency;
  }
  
  @JsonProperty(JSON_PROPERTY_DESTINATION_CURRENCY)
  public void setDestinationCurrency_JsonNullable(JsonNullable<String> destinationCurrency) {
    this.destinationCurrency = destinationCurrency;
  }

  public void setDestinationCurrency(String destinationCurrency) {
    this.destinationCurrency = JsonNullable.<String>of(destinationCurrency);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreatePushFundsTransferRequestProcessingInformationPayoutsOptions createPushFundsTransferRequestProcessingInformationPayoutsOptions = (CreatePushFundsTransferRequestProcessingInformationPayoutsOptions) o;
    return equalsNullable(this.sourceCurrency, createPushFundsTransferRequestProcessingInformationPayoutsOptions.sourceCurrency) &&
        equalsNullable(this.destinationCurrency, createPushFundsTransferRequestProcessingInformationPayoutsOptions.destinationCurrency);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(sourceCurrency), hashCodeNullable(destinationCurrency));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreatePushFundsTransferRequestProcessingInformationPayoutsOptions {\n");
    sb.append("    sourceCurrency: ").append(toIndentedString(sourceCurrency)).append("\n");
    sb.append("    destinationCurrency: ").append(toIndentedString(destinationCurrency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

