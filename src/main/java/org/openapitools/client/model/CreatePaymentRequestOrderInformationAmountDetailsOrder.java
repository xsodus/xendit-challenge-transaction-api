/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CreatePaymentRequestOrderInformationAmountDetailsOrder
 */
@JsonPropertyOrder({
  CreatePaymentRequestOrderInformationAmountDetailsOrder.JSON_PROPERTY_TOTAL_AMOUNT,
  CreatePaymentRequestOrderInformationAmountDetailsOrder.JSON_PROPERTY_CURRENCY,
  CreatePaymentRequestOrderInformationAmountDetailsOrder.JSON_PROPERTY_SUB_TOTAL_AMOUNT,
  CreatePaymentRequestOrderInformationAmountDetailsOrder.JSON_PROPERTY_HANDLING_AMOUNT,
  CreatePaymentRequestOrderInformationAmountDetailsOrder.JSON_PROPERTY_SHIPPING_AMOUNT,
  CreatePaymentRequestOrderInformationAmountDetailsOrder.JSON_PROPERTY_SHIPPING_DISCOUNT_AMOUNT,
  CreatePaymentRequestOrderInformationAmountDetailsOrder.JSON_PROPERTY_TAX_AMOUNT,
  CreatePaymentRequestOrderInformationAmountDetailsOrder.JSON_PROPERTY_INSURANCE_AMOUNT,
  CreatePaymentRequestOrderInformationAmountDetailsOrder.JSON_PROPERTY_GIFT_WRAP_AMOUNT
})
@JsonTypeName("createPayment_request_orderInformation_amountDetails_order")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T18:32:10.370382+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class CreatePaymentRequestOrderInformationAmountDetailsOrder {
  public static final String JSON_PROPERTY_TOTAL_AMOUNT = "totalAmount";
  private String totalAmount;

  public static final String JSON_PROPERTY_CURRENCY = "currency";
  private String currency;

  public static final String JSON_PROPERTY_SUB_TOTAL_AMOUNT = "subTotalAmount";
  private String subTotalAmount;

  public static final String JSON_PROPERTY_HANDLING_AMOUNT = "handlingAmount";
  private String handlingAmount;

  public static final String JSON_PROPERTY_SHIPPING_AMOUNT = "shippingAmount";
  private String shippingAmount;

  public static final String JSON_PROPERTY_SHIPPING_DISCOUNT_AMOUNT = "shippingDiscountAmount";
  private String shippingDiscountAmount;

  public static final String JSON_PROPERTY_TAX_AMOUNT = "taxAmount";
  private String taxAmount;

  public static final String JSON_PROPERTY_INSURANCE_AMOUNT = "insuranceAmount";
  private String insuranceAmount;

  public static final String JSON_PROPERTY_GIFT_WRAP_AMOUNT = "giftWrapAmount";
  private String giftWrapAmount;

  public CreatePaymentRequestOrderInformationAmountDetailsOrder() {
  }

  public CreatePaymentRequestOrderInformationAmountDetailsOrder totalAmount(String totalAmount) {
    
    this.totalAmount = totalAmount;
    return this;
  }

  /**
   * Grand total for the order. This value cannot be negative. You can include a decimal point (.), but you cannot include any other special characters. CyberSource truncates the amount to the correct number of decimal places 
   * @return totalAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTotalAmount() {
    return totalAmount;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalAmount(String totalAmount) {
    this.totalAmount = totalAmount;
  }

  public CreatePaymentRequestOrderInformationAmountDetailsOrder currency(String currency) {
    
    this.currency = currency;
    return this;
  }

  /**
   * Currency used for the order 
   * @return currency
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCurrency() {
    return currency;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrency(String currency) {
    this.currency = currency;
  }

  public CreatePaymentRequestOrderInformationAmountDetailsOrder subTotalAmount(String subTotalAmount) {
    
    this.subTotalAmount = subTotalAmount;
    return this;
  }

  /**
   * Shipping discount amount for the transaction. If this amount has changed since the initial sessions request, you must include the new value in the order request. You must also include all additional amount fields that apply to the order and ensure the total amount equals the purchaseTotals_grandTotalAmount value. 
   * @return subTotalAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUB_TOTAL_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSubTotalAmount() {
    return subTotalAmount;
  }


  @JsonProperty(JSON_PROPERTY_SUB_TOTAL_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubTotalAmount(String subTotalAmount) {
    this.subTotalAmount = subTotalAmount;
  }

  public CreatePaymentRequestOrderInformationAmountDetailsOrder handlingAmount(String handlingAmount) {
    
    this.handlingAmount = handlingAmount;
    return this;
  }

  /**
   * Aggregate handling charges for the transaction. If this amount has changed since the initial sessions request, you must include the new value in the order request. You must also include all additional amount fields that apply to the order and ensure the total amount equals the purchaseTotals_grandTotalAmount value. 
   * @return handlingAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HANDLING_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHandlingAmount() {
    return handlingAmount;
  }


  @JsonProperty(JSON_PROPERTY_HANDLING_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHandlingAmount(String handlingAmount) {
    this.handlingAmount = handlingAmount;
  }

  public CreatePaymentRequestOrderInformationAmountDetailsOrder shippingAmount(String shippingAmount) {
    
    this.shippingAmount = shippingAmount;
    return this;
  }

  /**
   * Aggregate shipping charges for the transaction If this amount has changed since the initial sessions request, you must include the new value in the order request. You must also include all additional amount fields that apply to the order and ensure the total amount equals the purchaseTotals_grandTotalAmount value. 
   * @return shippingAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SHIPPING_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getShippingAmount() {
    return shippingAmount;
  }


  @JsonProperty(JSON_PROPERTY_SHIPPING_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShippingAmount(String shippingAmount) {
    this.shippingAmount = shippingAmount;
  }

  public CreatePaymentRequestOrderInformationAmountDetailsOrder shippingDiscountAmount(String shippingDiscountAmount) {
    
    this.shippingDiscountAmount = shippingDiscountAmount;
    return this;
  }

  /**
   * Shipping discount amount for the transaction. If this amount has changed since the initial sessions request, you must include the new value in the order request. You must also include all additional amount fields that apply to the order and ensure the total amount equals the purchaseTotals_grandTotalAmount value. 
   * @return shippingDiscountAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SHIPPING_DISCOUNT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getShippingDiscountAmount() {
    return shippingDiscountAmount;
  }


  @JsonProperty(JSON_PROPERTY_SHIPPING_DISCOUNT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShippingDiscountAmount(String shippingDiscountAmount) {
    this.shippingDiscountAmount = shippingDiscountAmount;
  }

  public CreatePaymentRequestOrderInformationAmountDetailsOrder taxAmount(String taxAmount) {
    
    this.taxAmount = taxAmount;
    return this;
  }

  /**
   * Total tax amount. When the purchaseTotals_ taxAmount and ap_subtotalAmount fields are included in the request, do not include the tax amount as part of the subtotal amount calculation. 
   * @return taxAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAX_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTaxAmount() {
    return taxAmount;
  }


  @JsonProperty(JSON_PROPERTY_TAX_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaxAmount(String taxAmount) {
    this.taxAmount = taxAmount;
  }

  public CreatePaymentRequestOrderInformationAmountDetailsOrder insuranceAmount(String insuranceAmount) {
    
    this.insuranceAmount = insuranceAmount;
    return this;
  }

  /**
   * Amount being charged for the insurance fee. Only supported when the payment_method is set to paypal. 
   * @return insuranceAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INSURANCE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getInsuranceAmount() {
    return insuranceAmount;
  }


  @JsonProperty(JSON_PROPERTY_INSURANCE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInsuranceAmount(String insuranceAmount) {
    this.insuranceAmount = insuranceAmount;
  }

  public CreatePaymentRequestOrderInformationAmountDetailsOrder giftWrapAmount(String giftWrapAmount) {
    
    this.giftWrapAmount = giftWrapAmount;
    return this;
  }

  /**
   * Amount being charged as gift wrap fee.            
   * @return giftWrapAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GIFT_WRAP_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getGiftWrapAmount() {
    return giftWrapAmount;
  }


  @JsonProperty(JSON_PROPERTY_GIFT_WRAP_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGiftWrapAmount(String giftWrapAmount) {
    this.giftWrapAmount = giftWrapAmount;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreatePaymentRequestOrderInformationAmountDetailsOrder createPaymentRequestOrderInformationAmountDetailsOrder = (CreatePaymentRequestOrderInformationAmountDetailsOrder) o;
    return Objects.equals(this.totalAmount, createPaymentRequestOrderInformationAmountDetailsOrder.totalAmount) &&
        Objects.equals(this.currency, createPaymentRequestOrderInformationAmountDetailsOrder.currency) &&
        Objects.equals(this.subTotalAmount, createPaymentRequestOrderInformationAmountDetailsOrder.subTotalAmount) &&
        Objects.equals(this.handlingAmount, createPaymentRequestOrderInformationAmountDetailsOrder.handlingAmount) &&
        Objects.equals(this.shippingAmount, createPaymentRequestOrderInformationAmountDetailsOrder.shippingAmount) &&
        Objects.equals(this.shippingDiscountAmount, createPaymentRequestOrderInformationAmountDetailsOrder.shippingDiscountAmount) &&
        Objects.equals(this.taxAmount, createPaymentRequestOrderInformationAmountDetailsOrder.taxAmount) &&
        Objects.equals(this.insuranceAmount, createPaymentRequestOrderInformationAmountDetailsOrder.insuranceAmount) &&
        Objects.equals(this.giftWrapAmount, createPaymentRequestOrderInformationAmountDetailsOrder.giftWrapAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(totalAmount, currency, subTotalAmount, handlingAmount, shippingAmount, shippingDiscountAmount, taxAmount, insuranceAmount, giftWrapAmount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreatePaymentRequestOrderInformationAmountDetailsOrder {\n");
    sb.append("    totalAmount: ").append(toIndentedString(totalAmount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    subTotalAmount: ").append(toIndentedString(subTotalAmount)).append("\n");
    sb.append("    handlingAmount: ").append(toIndentedString(handlingAmount)).append("\n");
    sb.append("    shippingAmount: ").append(toIndentedString(shippingAmount)).append("\n");
    sb.append("    shippingDiscountAmount: ").append(toIndentedString(shippingDiscountAmount)).append("\n");
    sb.append("    taxAmount: ").append(toIndentedString(taxAmount)).append("\n");
    sb.append("    insuranceAmount: ").append(toIndentedString(insuranceAmount)).append("\n");
    sb.append("    giftWrapAmount: ").append(toIndentedString(giftWrapAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

