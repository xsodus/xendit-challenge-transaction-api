/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.CardProcessingConfigCommonMerchantDescriptorInformation;
import org.openapitools.client.model.CardProcessingConfigCommonProcessorsValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CardProcessingConfigCommon
 */
@JsonPropertyOrder({
  CardProcessingConfigCommon.JSON_PROPERTY_PROCESSORS,
  CardProcessingConfigCommon.JSON_PROPERTY_AMEX_VENDOR_CODE,
  CardProcessingConfigCommon.JSON_PROPERTY_DEFAULT_AUTH_TYPE_CODE,
  CardProcessingConfigCommon.JSON_PROPERTY_MASTER_CARD_ASSIGNED_ID,
  CardProcessingConfigCommon.JSON_PROPERTY_ENABLE_PARTIAL_AUTH,
  CardProcessingConfigCommon.JSON_PROPERTY_MERCHANT_CATEGORY_CODE,
  CardProcessingConfigCommon.JSON_PROPERTY_SIC_CODE,
  CardProcessingConfigCommon.JSON_PROPERTY_FOOD_AND_CONSUMER_SERVICE_ID,
  CardProcessingConfigCommon.JSON_PROPERTY_ENABLE_SPLIT_SHIPMENT,
  CardProcessingConfigCommon.JSON_PROPERTY_ENABLE_INTERCHANGE_OPTIMIZATION,
  CardProcessingConfigCommon.JSON_PROPERTY_VISA_DELEGATED_AUTHENTICATION_ID,
  CardProcessingConfigCommon.JSON_PROPERTY_CREDIT_CARD_REFUND_LIMIT_PERCENT,
  CardProcessingConfigCommon.JSON_PROPERTY_BUSINESS_CENTER_CREDIT_CARD_REFUND_LIMIT_PERCENT,
  CardProcessingConfigCommon.JSON_PROPERTY_ALLOW_CAPTURES_GREATER_THAN_AUTHORIZATIONS,
  CardProcessingConfigCommon.JSON_PROPERTY_ENABLE_DUPLICATE_MERCHANT_REFERENCE_NUMBER_BLOCKING,
  CardProcessingConfigCommon.JSON_PROPERTY_DOMESTIC_MERCHANT_ID,
  CardProcessingConfigCommon.JSON_PROPERTY_PROCESS_LEVEL3_DATA,
  CardProcessingConfigCommon.JSON_PROPERTY_SUB_MERCHANT_ID,
  CardProcessingConfigCommon.JSON_PROPERTY_SUB_MERCHANT_BUSINESS_NAME,
  CardProcessingConfigCommon.JSON_PROPERTY_PREFER_COBADGED_SECONDARY_BRAND,
  CardProcessingConfigCommon.JSON_PROPERTY_MERCHANT_DESCRIPTOR_INFORMATION,
  CardProcessingConfigCommon.JSON_PROPERTY_GOVERNMENT_CONTROLLED,
  CardProcessingConfigCommon.JSON_PROPERTY_DROP_BILLING_INFO
})
@JsonTypeName("CardProcessingConfig_common")
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T19:17:21.826843+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class CardProcessingConfigCommon {
  public static final String JSON_PROPERTY_PROCESSORS = "processors";
  private Map<String, CardProcessingConfigCommonProcessorsValue> processors = new HashMap<>();

  public static final String JSON_PROPERTY_AMEX_VENDOR_CODE = "amexVendorCode";
  private String amexVendorCode;

  /**
   * Authorization Finality indicator. Please note that the input can be in small case or capitals but response is in small case as of now. It will be made capitals everywhere in the next version. Applicable for Elavon Americas (elavonamericas), TSYS (tsys), Barclays (barclays2), Streamline (streamline2), Six (six), Barclays HISO (barclayshiso), GPN (gpn), FDI Global (fdiglobal), GPX (gpx), Paymentech Tampa (paymentechtampa), FDC Nashville (smartfdc), VPC and Chase Paymentech Salem (chasepaymentechsalem) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;FINAL&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Barclays HISO&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;FINAL&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
   */
  public enum DefaultAuthTypeCodeEnum {
    PRE("PRE"),
    
    FINAL("FINAL"),
    
    UNDEFINED("UNDEFINED");

    private String value;

    DefaultAuthTypeCodeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DefaultAuthTypeCodeEnum fromValue(String value) {
      for (DefaultAuthTypeCodeEnum b : DefaultAuthTypeCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_DEFAULT_AUTH_TYPE_CODE = "defaultAuthTypeCode";
  private DefaultAuthTypeCodeEnum defaultAuthTypeCode;

  public static final String JSON_PROPERTY_MASTER_CARD_ASSIGNED_ID = "masterCardAssignedId";
  private String masterCardAssignedId;

  public static final String JSON_PROPERTY_ENABLE_PARTIAL_AUTH = "enablePartialAuth";
  private Boolean enablePartialAuth;

  public static final String JSON_PROPERTY_MERCHANT_CATEGORY_CODE = "merchantCategoryCode";
  private String merchantCategoryCode;

  public static final String JSON_PROPERTY_SIC_CODE = "sicCode";
  private String sicCode;

  public static final String JSON_PROPERTY_FOOD_AND_CONSUMER_SERVICE_ID = "foodAndConsumerServiceId";
  private String foodAndConsumerServiceId;

  public static final String JSON_PROPERTY_ENABLE_SPLIT_SHIPMENT = "enableSplitShipment";
  private Boolean enableSplitShipment;

  public static final String JSON_PROPERTY_ENABLE_INTERCHANGE_OPTIMIZATION = "enableInterchangeOptimization";
  private Boolean enableInterchangeOptimization;

  public static final String JSON_PROPERTY_VISA_DELEGATED_AUTHENTICATION_ID = "visaDelegatedAuthenticationId";
  private String visaDelegatedAuthenticationId;

  public static final String JSON_PROPERTY_CREDIT_CARD_REFUND_LIMIT_PERCENT = "creditCardRefundLimitPercent";
  private String creditCardRefundLimitPercent;

  public static final String JSON_PROPERTY_BUSINESS_CENTER_CREDIT_CARD_REFUND_LIMIT_PERCENT = "businessCenterCreditCardRefundLimitPercent";
  private String businessCenterCreditCardRefundLimitPercent;

  public static final String JSON_PROPERTY_ALLOW_CAPTURES_GREATER_THAN_AUTHORIZATIONS = "allowCapturesGreaterThanAuthorizations";
  private Boolean allowCapturesGreaterThanAuthorizations;

  public static final String JSON_PROPERTY_ENABLE_DUPLICATE_MERCHANT_REFERENCE_NUMBER_BLOCKING = "enableDuplicateMerchantReferenceNumberBlocking";
  private Boolean enableDuplicateMerchantReferenceNumberBlocking;

  public static final String JSON_PROPERTY_DOMESTIC_MERCHANT_ID = "domesticMerchantId";
  private Boolean domesticMerchantId;

  public static final String JSON_PROPERTY_PROCESS_LEVEL3_DATA = "processLevel3Data";
  private String processLevel3Data;

  public static final String JSON_PROPERTY_SUB_MERCHANT_ID = "subMerchantId";
  private String subMerchantId;

  public static final String JSON_PROPERTY_SUB_MERCHANT_BUSINESS_NAME = "subMerchantBusinessName";
  private String subMerchantBusinessName;

  public static final String JSON_PROPERTY_PREFER_COBADGED_SECONDARY_BRAND = "preferCobadgedSecondaryBrand";
  private Boolean preferCobadgedSecondaryBrand;

  public static final String JSON_PROPERTY_MERCHANT_DESCRIPTOR_INFORMATION = "merchantDescriptorInformation";
  private CardProcessingConfigCommonMerchantDescriptorInformation merchantDescriptorInformation;

  public static final String JSON_PROPERTY_GOVERNMENT_CONTROLLED = "governmentControlled";
  private Boolean governmentControlled;

  public static final String JSON_PROPERTY_DROP_BILLING_INFO = "dropBillingInfo";
  private Boolean dropBillingInfo;

  public CardProcessingConfigCommon() {
  }

  public CardProcessingConfigCommon processors(Map<String, CardProcessingConfigCommonProcessorsValue> processors) {
    
    this.processors = processors;
    return this;
  }

  public CardProcessingConfigCommon putProcessorsItem(String key, CardProcessingConfigCommonProcessorsValue processorsItem) {
    if (this.processors == null) {
      this.processors = new HashMap<>();
    }
    this.processors.put(key, processorsItem);
    return this;
  }

  /**
   * e.g. * amexdirect * barclays2 * CUP * EFTPOS * fdiglobal * gpngsapv3 * gpx * smartfdc * tsys * vero * VPC  For VPC, CUP and EFTPOS processors, replace the processor name from VPC or CUP or EFTPOS to the actual processor name in the sample request. e.g. replace VPC with &amp;lt;your vpc processor&amp;gt; 
   * @return processors
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROCESSORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, CardProcessingConfigCommonProcessorsValue> getProcessors() {
    return processors;
  }


  @JsonProperty(JSON_PROPERTY_PROCESSORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProcessors(Map<String, CardProcessingConfigCommonProcessorsValue> processors) {
    this.processors = processors;
  }

  public CardProcessingConfigCommon amexVendorCode(String amexVendorCode) {
    
    this.amexVendorCode = amexVendorCode;
    return this;
  }

  /**
   * Vendor code assigned by American Express. Applicable for TSYS (tsys) processor.
   * @return amexVendorCode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AMEX_VENDOR_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAmexVendorCode() {
    return amexVendorCode;
  }


  @JsonProperty(JSON_PROPERTY_AMEX_VENDOR_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAmexVendorCode(String amexVendorCode) {
    this.amexVendorCode = amexVendorCode;
  }

  public CardProcessingConfigCommon defaultAuthTypeCode(DefaultAuthTypeCodeEnum defaultAuthTypeCode) {
    
    this.defaultAuthTypeCode = defaultAuthTypeCode;
    return this;
  }

  /**
   * Authorization Finality indicator. Please note that the input can be in small case or capitals but response is in small case as of now. It will be made capitals everywhere in the next version. Applicable for Elavon Americas (elavonamericas), TSYS (tsys), Barclays (barclays2), Streamline (streamline2), Six (six), Barclays HISO (barclayshiso), GPN (gpn), FDI Global (fdiglobal), GPX (gpx), Paymentech Tampa (paymentechtampa), FDC Nashville (smartfdc), VPC and Chase Paymentech Salem (chasepaymentechsalem) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;FINAL&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;Barclays HISO&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;FINAL&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
   * @return defaultAuthTypeCode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEFAULT_AUTH_TYPE_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DefaultAuthTypeCodeEnum getDefaultAuthTypeCode() {
    return defaultAuthTypeCode;
  }


  @JsonProperty(JSON_PROPERTY_DEFAULT_AUTH_TYPE_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDefaultAuthTypeCode(DefaultAuthTypeCodeEnum defaultAuthTypeCode) {
    this.defaultAuthTypeCode = defaultAuthTypeCode;
  }

  public CardProcessingConfigCommon masterCardAssignedId(String masterCardAssignedId) {
    
    this.masterCardAssignedId = masterCardAssignedId;
    return this;
  }

  /**
   * MAID aka MasterCard assigned ID, MasterCard equivalent of Merchant Verification Value by Visa. Applicable for VPC, GPX (gpx) and FDI Global (fdiglobal) processors.
   * @return masterCardAssignedId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MASTER_CARD_ASSIGNED_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMasterCardAssignedId() {
    return masterCardAssignedId;
  }


  @JsonProperty(JSON_PROPERTY_MASTER_CARD_ASSIGNED_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMasterCardAssignedId(String masterCardAssignedId) {
    this.masterCardAssignedId = masterCardAssignedId;
  }

  public CardProcessingConfigCommon enablePartialAuth(Boolean enablePartialAuth) {
    
    this.enablePartialAuth = enablePartialAuth;
    return this;
  }

  /**
   * Allow merchants to accept partial authorization approvals. Applicable for Elavon Americas (elavonamericas), VPC, GPX (gpx), FDI Global (fdiglobal), FDC Nashville (smartfdc), GPN (gpn), TSYS (tsys), American Express Direct (amexdirect), Paymentech Tampa (paymentechtampa) and Chase Paymentech Salem (chasepaymentechsalem) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Default Value&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
   * @return enablePartialAuth
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_PARTIAL_AUTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnablePartialAuth() {
    return enablePartialAuth;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_PARTIAL_AUTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnablePartialAuth(Boolean enablePartialAuth) {
    this.enablePartialAuth = enablePartialAuth;
  }

  public CardProcessingConfigCommon merchantCategoryCode(String merchantCategoryCode) {
    
    this.merchantCategoryCode = merchantCategoryCode;
    return this;
  }

  /**
   * Indicates type of business product or service of the merchant. Applicable for Chase Paymentech Salem (chasepaymentechsalem), FDI Global (fdiglobal), RUPAY, Elavon Americas (elavonamericas), American Express Direct (amexdirect), CMCIC (cmcic), GPX (gpx), VPC, TSYS (tsys), EFTPOS, CUP, Paymentech Tampa (paymentechtampa), CB2A, Barclays (barclays2), Prisma (prisma) and GPN (gpn) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Min. Length&lt;/th&gt;&lt;th&gt;Max. Length&lt;/th&gt;&lt;th&gt;Regex&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays&lt;/td&gt;&lt;td&gt;cnp&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;^[0-9]+$&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;Yes&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;^[0-9]+$&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
   * @return merchantCategoryCode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MERCHANT_CATEGORY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMerchantCategoryCode() {
    return merchantCategoryCode;
  }


  @JsonProperty(JSON_PROPERTY_MERCHANT_CATEGORY_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMerchantCategoryCode(String merchantCategoryCode) {
    this.merchantCategoryCode = merchantCategoryCode;
  }

  public CardProcessingConfigCommon sicCode(String sicCode) {
    
    this.sicCode = sicCode;
    return this;
  }

  /**
   * The Standard Industrial Classification (SIC) are four-digit codes that categorize the industries that companies belong to based on their business activities. Standard Industrial Classification codes were mostly replaced by the six-digit North American Industry Classification System (NAICS). Applicable for VPC and GPX (gpx) processors.
   * @return sicCode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SIC_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSicCode() {
    return sicCode;
  }


  @JsonProperty(JSON_PROPERTY_SIC_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSicCode(String sicCode) {
    this.sicCode = sicCode;
  }

  public CardProcessingConfigCommon foodAndConsumerServiceId(String foodAndConsumerServiceId) {
    
    this.foodAndConsumerServiceId = foodAndConsumerServiceId;
    return this;
  }

  /**
   * Food and Consumer Service ID. Identifies the merchant as being certified and approved to accept Food Stamps. Applicable for GPX (gpx) processor.
   * @return foodAndConsumerServiceId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FOOD_AND_CONSUMER_SERVICE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFoodAndConsumerServiceId() {
    return foodAndConsumerServiceId;
  }


  @JsonProperty(JSON_PROPERTY_FOOD_AND_CONSUMER_SERVICE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFoodAndConsumerServiceId(String foodAndConsumerServiceId) {
    this.foodAndConsumerServiceId = foodAndConsumerServiceId;
  }

  public CardProcessingConfigCommon enableSplitShipment(Boolean enableSplitShipment) {
    
    this.enableSplitShipment = enableSplitShipment;
    return this;
  }

  /**
   * Enables you to split an order into multiple shipments with multiple captures. This feature is provided by CyberSource and supports three different scenarios:  * multiple authorizations * multiple captures * multiple authorizations with multiple captures  Applicable for VPC processors. 
   * @return enableSplitShipment
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_SPLIT_SHIPMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnableSplitShipment() {
    return enableSplitShipment;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_SPLIT_SHIPMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableSplitShipment(Boolean enableSplitShipment) {
    this.enableSplitShipment = enableSplitShipment;
  }

  public CardProcessingConfigCommon enableInterchangeOptimization(Boolean enableInterchangeOptimization) {
    
    this.enableInterchangeOptimization = enableInterchangeOptimization;
    return this;
  }

  /**
   * Reduces your interchange fees by using automatic authorization refresh and automatic partial authorization reversal. Applicable for VPC processors.
   * @return enableInterchangeOptimization
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_INTERCHANGE_OPTIMIZATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnableInterchangeOptimization() {
    return enableInterchangeOptimization;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_INTERCHANGE_OPTIMIZATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableInterchangeOptimization(Boolean enableInterchangeOptimization) {
    this.enableInterchangeOptimization = enableInterchangeOptimization;
  }

  public CardProcessingConfigCommon visaDelegatedAuthenticationId(String visaDelegatedAuthenticationId) {
    
    this.visaDelegatedAuthenticationId = visaDelegatedAuthenticationId;
    return this;
  }

  /**
   * Identifier provided to merchants who opt for Visa&#39;s delegated authorization program. Applicable for VPC processors.
   * @return visaDelegatedAuthenticationId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VISA_DELEGATED_AUTHENTICATION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getVisaDelegatedAuthenticationId() {
    return visaDelegatedAuthenticationId;
  }


  @JsonProperty(JSON_PROPERTY_VISA_DELEGATED_AUTHENTICATION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVisaDelegatedAuthenticationId(String visaDelegatedAuthenticationId) {
    this.visaDelegatedAuthenticationId = visaDelegatedAuthenticationId;
  }

  public CardProcessingConfigCommon creditCardRefundLimitPercent(String creditCardRefundLimitPercent) {
    
    this.creditCardRefundLimitPercent = creditCardRefundLimitPercent;
    return this;
  }

  /**
   * Blocks over-refunds when the aggregated refund amount is higher than the percentage set for this field. Applicable for GPX (gpx), VPC and Chase Paymentech Salem (chasepaymentechsalem) processors.
   * @return creditCardRefundLimitPercent
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREDIT_CARD_REFUND_LIMIT_PERCENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCreditCardRefundLimitPercent() {
    return creditCardRefundLimitPercent;
  }


  @JsonProperty(JSON_PROPERTY_CREDIT_CARD_REFUND_LIMIT_PERCENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreditCardRefundLimitPercent(String creditCardRefundLimitPercent) {
    this.creditCardRefundLimitPercent = creditCardRefundLimitPercent;
  }

  public CardProcessingConfigCommon businessCenterCreditCardRefundLimitPercent(String businessCenterCreditCardRefundLimitPercent) {
    
    this.businessCenterCreditCardRefundLimitPercent = businessCenterCreditCardRefundLimitPercent;
    return this;
  }

  /**
   * Limits refunds to the percentage set in this field. Applicable for GPX (gpx) and VPC processors.
   * @return businessCenterCreditCardRefundLimitPercent
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BUSINESS_CENTER_CREDIT_CARD_REFUND_LIMIT_PERCENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBusinessCenterCreditCardRefundLimitPercent() {
    return businessCenterCreditCardRefundLimitPercent;
  }


  @JsonProperty(JSON_PROPERTY_BUSINESS_CENTER_CREDIT_CARD_REFUND_LIMIT_PERCENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBusinessCenterCreditCardRefundLimitPercent(String businessCenterCreditCardRefundLimitPercent) {
    this.businessCenterCreditCardRefundLimitPercent = businessCenterCreditCardRefundLimitPercent;
  }

  public CardProcessingConfigCommon allowCapturesGreaterThanAuthorizations(Boolean allowCapturesGreaterThanAuthorizations) {
    
    this.allowCapturesGreaterThanAuthorizations = allowCapturesGreaterThanAuthorizations;
    return this;
  }

  /**
   * Enables this merchant account to capture amounts greater than the authorization amount. Applicable for GPX (gpx), VPC, Paymentech Tampa (paymentechtampa) and Chase Paymentech Salem (chasepaymentechsalem) processors.
   * @return allowCapturesGreaterThanAuthorizations
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALLOW_CAPTURES_GREATER_THAN_AUTHORIZATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAllowCapturesGreaterThanAuthorizations() {
    return allowCapturesGreaterThanAuthorizations;
  }


  @JsonProperty(JSON_PROPERTY_ALLOW_CAPTURES_GREATER_THAN_AUTHORIZATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllowCapturesGreaterThanAuthorizations(Boolean allowCapturesGreaterThanAuthorizations) {
    this.allowCapturesGreaterThanAuthorizations = allowCapturesGreaterThanAuthorizations;
  }

  public CardProcessingConfigCommon enableDuplicateMerchantReferenceNumberBlocking(Boolean enableDuplicateMerchantReferenceNumberBlocking) {
    
    this.enableDuplicateMerchantReferenceNumberBlocking = enableDuplicateMerchantReferenceNumberBlocking;
    return this;
  }

  /**
   * Helps prevent duplicate transactions. Applicable for VPC, GPX (gpx) and Chase Paymentech Salem (chasepaymentechsalem) processors.
   * @return enableDuplicateMerchantReferenceNumberBlocking
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_DUPLICATE_MERCHANT_REFERENCE_NUMBER_BLOCKING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnableDuplicateMerchantReferenceNumberBlocking() {
    return enableDuplicateMerchantReferenceNumberBlocking;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_DUPLICATE_MERCHANT_REFERENCE_NUMBER_BLOCKING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableDuplicateMerchantReferenceNumberBlocking(Boolean enableDuplicateMerchantReferenceNumberBlocking) {
    this.enableDuplicateMerchantReferenceNumberBlocking = enableDuplicateMerchantReferenceNumberBlocking;
  }

  public CardProcessingConfigCommon domesticMerchantId(Boolean domesticMerchantId) {
    
    this.domesticMerchantId = domesticMerchantId;
    return this;
  }

  /**
   * This is a local merchant ID used by merchants in addition to the conventional merchant ID. This value is sent to the issuer. Applicable for VPC and Prisma (prisma) processors.
   * @return domesticMerchantId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DOMESTIC_MERCHANT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getDomesticMerchantId() {
    return domesticMerchantId;
  }


  @JsonProperty(JSON_PROPERTY_DOMESTIC_MERCHANT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDomesticMerchantId(Boolean domesticMerchantId) {
    this.domesticMerchantId = domesticMerchantId;
  }

  public CardProcessingConfigCommon processLevel3Data(String processLevel3Data) {
    
    this.processLevel3Data = processLevel3Data;
    return this;
  }

  /**
   * Indicates whether merchant processes Level 3 transactions. Applicable for TSYS (tsys), Barclays (barclays2), Paymentech Tampa (paymentechtampa), FDI Global (fdiglobal), Elavon Americas (elavonamericas) and Chase Paymentech Salem (chasepaymentechsalem) processors.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;Barclays&lt;/td&gt;&lt;td&gt;cnp&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
   * @return processLevel3Data
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROCESS_LEVEL3_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getProcessLevel3Data() {
    return processLevel3Data;
  }


  @JsonProperty(JSON_PROPERTY_PROCESS_LEVEL3_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProcessLevel3Data(String processLevel3Data) {
    this.processLevel3Data = processLevel3Data;
  }

  public CardProcessingConfigCommon subMerchantId(String subMerchantId) {
    
    this.subMerchantId = subMerchantId;
    return this;
  }

  /**
   * The ID assigned to the sub-merchant. Applicable for American Express Direct (amexdirect) processor.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Min. Length&lt;/th&gt;&lt;th&gt;Max. Length&lt;/th&gt;&lt;th&gt;Regex&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;20&lt;/td&gt;&lt;td&gt;^[0-9a-zA-Z&amp;#92;-&amp;#92;_&amp;#92;,\\s.]+$&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
   * @return subMerchantId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUB_MERCHANT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSubMerchantId() {
    return subMerchantId;
  }


  @JsonProperty(JSON_PROPERTY_SUB_MERCHANT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubMerchantId(String subMerchantId) {
    this.subMerchantId = subMerchantId;
  }

  public CardProcessingConfigCommon subMerchantBusinessName(String subMerchantBusinessName) {
    
    this.subMerchantBusinessName = subMerchantBusinessName;
    return this;
  }

  /**
   * Sub-merchant&#39;s business name. Applicable for American Express Direct (amexdirect) processor.  Validation details (for selected processors)...  &lt;table&gt; &lt;thead&gt;&lt;tr&gt;&lt;th&gt;Processor&lt;/th&gt;&lt;th&gt;Acceptance Type&lt;/th&gt;&lt;th&gt;Required&lt;/th&gt;&lt;th&gt;Min. Length&lt;/th&gt;&lt;th&gt;Max. Length&lt;/th&gt;&lt;th&gt;Regex&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt; &lt;tr&gt;&lt;td&gt;American Express Direct&lt;/td&gt;&lt;td&gt;cnp, cp, hybrid&lt;/td&gt;&lt;td&gt;No&lt;/td&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;37&lt;/td&gt;&lt;td&gt;^[0-9a-zA-Z&amp;#92;-&amp;#92;_&amp;#92;,\\s.]+$&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; 
   * @return subMerchantBusinessName
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUB_MERCHANT_BUSINESS_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSubMerchantBusinessName() {
    return subMerchantBusinessName;
  }


  @JsonProperty(JSON_PROPERTY_SUB_MERCHANT_BUSINESS_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubMerchantBusinessName(String subMerchantBusinessName) {
    this.subMerchantBusinessName = subMerchantBusinessName;
  }

  public CardProcessingConfigCommon preferCobadgedSecondaryBrand(Boolean preferCobadgedSecondaryBrand) {
    
    this.preferCobadgedSecondaryBrand = preferCobadgedSecondaryBrand;
    return this;
  }

  /**
   * It denotes merchant&#39;s preference on secondary brand for routing in case of co-branded cards. Applicable for EFTPOS processors.
   * @return preferCobadgedSecondaryBrand
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PREFER_COBADGED_SECONDARY_BRAND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getPreferCobadgedSecondaryBrand() {
    return preferCobadgedSecondaryBrand;
  }


  @JsonProperty(JSON_PROPERTY_PREFER_COBADGED_SECONDARY_BRAND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPreferCobadgedSecondaryBrand(Boolean preferCobadgedSecondaryBrand) {
    this.preferCobadgedSecondaryBrand = preferCobadgedSecondaryBrand;
  }

  public CardProcessingConfigCommon merchantDescriptorInformation(CardProcessingConfigCommonMerchantDescriptorInformation merchantDescriptorInformation) {
    
    this.merchantDescriptorInformation = merchantDescriptorInformation;
    return this;
  }

  /**
   * Get merchantDescriptorInformation
   * @return merchantDescriptorInformation
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MERCHANT_DESCRIPTOR_INFORMATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CardProcessingConfigCommonMerchantDescriptorInformation getMerchantDescriptorInformation() {
    return merchantDescriptorInformation;
  }


  @JsonProperty(JSON_PROPERTY_MERCHANT_DESCRIPTOR_INFORMATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMerchantDescriptorInformation(CardProcessingConfigCommonMerchantDescriptorInformation merchantDescriptorInformation) {
    this.merchantDescriptorInformation = merchantDescriptorInformation;
  }

  public CardProcessingConfigCommon governmentControlled(Boolean governmentControlled) {
    
    this.governmentControlled = governmentControlled;
    return this;
  }

  /**
   * Indicates whether the merchant is government controlled. Applicable for VPC processors.
   * @return governmentControlled
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GOVERNMENT_CONTROLLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getGovernmentControlled() {
    return governmentControlled;
  }


  @JsonProperty(JSON_PROPERTY_GOVERNMENT_CONTROLLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGovernmentControlled(Boolean governmentControlled) {
    this.governmentControlled = governmentControlled;
  }

  public CardProcessingConfigCommon dropBillingInfo(Boolean dropBillingInfo) {
    
    this.dropBillingInfo = dropBillingInfo;
    return this;
  }

  /**
   * This field is used to indicate whether the merchant wants to drop the billing information from the request. If this field is set to true, then the billing information will be dropped from the request. If this field is set to false, then the billing information will be sent in the request.
   * @return dropBillingInfo
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DROP_BILLING_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getDropBillingInfo() {
    return dropBillingInfo;
  }


  @JsonProperty(JSON_PROPERTY_DROP_BILLING_INFO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDropBillingInfo(Boolean dropBillingInfo) {
    this.dropBillingInfo = dropBillingInfo;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardProcessingConfigCommon cardProcessingConfigCommon = (CardProcessingConfigCommon) o;
    return Objects.equals(this.processors, cardProcessingConfigCommon.processors) &&
        Objects.equals(this.amexVendorCode, cardProcessingConfigCommon.amexVendorCode) &&
        Objects.equals(this.defaultAuthTypeCode, cardProcessingConfigCommon.defaultAuthTypeCode) &&
        Objects.equals(this.masterCardAssignedId, cardProcessingConfigCommon.masterCardAssignedId) &&
        Objects.equals(this.enablePartialAuth, cardProcessingConfigCommon.enablePartialAuth) &&
        Objects.equals(this.merchantCategoryCode, cardProcessingConfigCommon.merchantCategoryCode) &&
        Objects.equals(this.sicCode, cardProcessingConfigCommon.sicCode) &&
        Objects.equals(this.foodAndConsumerServiceId, cardProcessingConfigCommon.foodAndConsumerServiceId) &&
        Objects.equals(this.enableSplitShipment, cardProcessingConfigCommon.enableSplitShipment) &&
        Objects.equals(this.enableInterchangeOptimization, cardProcessingConfigCommon.enableInterchangeOptimization) &&
        Objects.equals(this.visaDelegatedAuthenticationId, cardProcessingConfigCommon.visaDelegatedAuthenticationId) &&
        Objects.equals(this.creditCardRefundLimitPercent, cardProcessingConfigCommon.creditCardRefundLimitPercent) &&
        Objects.equals(this.businessCenterCreditCardRefundLimitPercent, cardProcessingConfigCommon.businessCenterCreditCardRefundLimitPercent) &&
        Objects.equals(this.allowCapturesGreaterThanAuthorizations, cardProcessingConfigCommon.allowCapturesGreaterThanAuthorizations) &&
        Objects.equals(this.enableDuplicateMerchantReferenceNumberBlocking, cardProcessingConfigCommon.enableDuplicateMerchantReferenceNumberBlocking) &&
        Objects.equals(this.domesticMerchantId, cardProcessingConfigCommon.domesticMerchantId) &&
        Objects.equals(this.processLevel3Data, cardProcessingConfigCommon.processLevel3Data) &&
        Objects.equals(this.subMerchantId, cardProcessingConfigCommon.subMerchantId) &&
        Objects.equals(this.subMerchantBusinessName, cardProcessingConfigCommon.subMerchantBusinessName) &&
        Objects.equals(this.preferCobadgedSecondaryBrand, cardProcessingConfigCommon.preferCobadgedSecondaryBrand) &&
        Objects.equals(this.merchantDescriptorInformation, cardProcessingConfigCommon.merchantDescriptorInformation) &&
        Objects.equals(this.governmentControlled, cardProcessingConfigCommon.governmentControlled) &&
        Objects.equals(this.dropBillingInfo, cardProcessingConfigCommon.dropBillingInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(processors, amexVendorCode, defaultAuthTypeCode, masterCardAssignedId, enablePartialAuth, merchantCategoryCode, sicCode, foodAndConsumerServiceId, enableSplitShipment, enableInterchangeOptimization, visaDelegatedAuthenticationId, creditCardRefundLimitPercent, businessCenterCreditCardRefundLimitPercent, allowCapturesGreaterThanAuthorizations, enableDuplicateMerchantReferenceNumberBlocking, domesticMerchantId, processLevel3Data, subMerchantId, subMerchantBusinessName, preferCobadgedSecondaryBrand, merchantDescriptorInformation, governmentControlled, dropBillingInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardProcessingConfigCommon {\n");
    sb.append("    processors: ").append(toIndentedString(processors)).append("\n");
    sb.append("    amexVendorCode: ").append(toIndentedString(amexVendorCode)).append("\n");
    sb.append("    defaultAuthTypeCode: ").append(toIndentedString(defaultAuthTypeCode)).append("\n");
    sb.append("    masterCardAssignedId: ").append(toIndentedString(masterCardAssignedId)).append("\n");
    sb.append("    enablePartialAuth: ").append(toIndentedString(enablePartialAuth)).append("\n");
    sb.append("    merchantCategoryCode: ").append(toIndentedString(merchantCategoryCode)).append("\n");
    sb.append("    sicCode: ").append(toIndentedString(sicCode)).append("\n");
    sb.append("    foodAndConsumerServiceId: ").append(toIndentedString(foodAndConsumerServiceId)).append("\n");
    sb.append("    enableSplitShipment: ").append(toIndentedString(enableSplitShipment)).append("\n");
    sb.append("    enableInterchangeOptimization: ").append(toIndentedString(enableInterchangeOptimization)).append("\n");
    sb.append("    visaDelegatedAuthenticationId: ").append(toIndentedString(visaDelegatedAuthenticationId)).append("\n");
    sb.append("    creditCardRefundLimitPercent: ").append(toIndentedString(creditCardRefundLimitPercent)).append("\n");
    sb.append("    businessCenterCreditCardRefundLimitPercent: ").append(toIndentedString(businessCenterCreditCardRefundLimitPercent)).append("\n");
    sb.append("    allowCapturesGreaterThanAuthorizations: ").append(toIndentedString(allowCapturesGreaterThanAuthorizations)).append("\n");
    sb.append("    enableDuplicateMerchantReferenceNumberBlocking: ").append(toIndentedString(enableDuplicateMerchantReferenceNumberBlocking)).append("\n");
    sb.append("    domesticMerchantId: ").append(toIndentedString(domesticMerchantId)).append("\n");
    sb.append("    processLevel3Data: ").append(toIndentedString(processLevel3Data)).append("\n");
    sb.append("    subMerchantId: ").append(toIndentedString(subMerchantId)).append("\n");
    sb.append("    subMerchantBusinessName: ").append(toIndentedString(subMerchantBusinessName)).append("\n");
    sb.append("    preferCobadgedSecondaryBrand: ").append(toIndentedString(preferCobadgedSecondaryBrand)).append("\n");
    sb.append("    merchantDescriptorInformation: ").append(toIndentedString(merchantDescriptorInformation)).append("\n");
    sb.append("    governmentControlled: ").append(toIndentedString(governmentControlled)).append("\n");
    sb.append("    dropBillingInfo: ").append(toIndentedString(dropBillingInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

