/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * The Order Acceptance address fields may be used by the tax service to determine the taxability of the order or applicable taxing jurisdictions. You should consult your tax, legal and/or accounting advisors to determine if you should include an Order Acceptance address in your tax service request for some or all of your transactions based on your business.
 */
@JsonPropertyOrder({
  CalculateTaxRequestOrderInformationLineItemsInnerOrderAcceptance.JSON_PROPERTY_LOCALITY,
  CalculateTaxRequestOrderInformationLineItemsInnerOrderAcceptance.JSON_PROPERTY_ADMINISTRATIVE_AREA,
  CalculateTaxRequestOrderInformationLineItemsInnerOrderAcceptance.JSON_PROPERTY_POSTAL_CODE,
  CalculateTaxRequestOrderInformationLineItemsInnerOrderAcceptance.JSON_PROPERTY_COUNTRY
})
@JsonTypeName("calculateTax_request_orderInformation_lineItems_inner_orderAcceptance")
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T19:17:21.826843+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class CalculateTaxRequestOrderInformationLineItemsInnerOrderAcceptance {
  public static final String JSON_PROPERTY_LOCALITY = "locality";
  private String locality;

  public static final String JSON_PROPERTY_ADMINISTRATIVE_AREA = "administrativeArea";
  private String administrativeArea;

  public static final String JSON_PROPERTY_POSTAL_CODE = "postalCode";
  private String postalCode;

  public static final String JSON_PROPERTY_COUNTRY = "country";
  private String country;

  public CalculateTaxRequestOrderInformationLineItemsInnerOrderAcceptance() {
  }

  public CalculateTaxRequestOrderInformationLineItemsInnerOrderAcceptance locality(String locality) {
    
    this.locality = locality;
    return this;
  }

  /**
   * Order acceptance city. This field is not used unless the &#x60;orderInformation.orderAcceptance.administrativeArea&#x60; and &#x60;orderInformation.orderAcceptance.country&#x60; fields are present.  **NOTE** If this field appears in a &#x60;lineItems&#x60; object, then the value of this field in the &#x60;lineItems&#x60; object overrides the value of the corresponding field at the request-level or order-level object.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. 
   * @return locality
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOCALITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLocality() {
    return locality;
  }


  @JsonProperty(JSON_PROPERTY_LOCALITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLocality(String locality) {
    this.locality = locality;
  }

  public CalculateTaxRequestOrderInformationLineItemsInnerOrderAcceptance administrativeArea(String administrativeArea) {
    
    this.administrativeArea = administrativeArea;
    return this;
  }

  /**
   * Order acceptance state. This field is not used unless the &#x60;orderInformation.orderAcceptance.locality&#x60; and &#x60;orderInformation.orderAcceptance.country&#x60; fields are present. Use the [State, Province, and Territory Codes for the United States and Canada](https://developer.cybersource.com/library/documentation/sbc/quickref/states_and_provinces.pdf).  **NOTE** If this field appears in a &#x60;lineItems&#x60; object, then the value of this field in the &#x60;lineItems&#x60; object overrides the value of the corresponding field at the request-level or order-level object.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. 
   * @return administrativeArea
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ADMINISTRATIVE_AREA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAdministrativeArea() {
    return administrativeArea;
  }


  @JsonProperty(JSON_PROPERTY_ADMINISTRATIVE_AREA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAdministrativeArea(String administrativeArea) {
    this.administrativeArea = administrativeArea;
  }

  public CalculateTaxRequestOrderInformationLineItemsInnerOrderAcceptance postalCode(String postalCode) {
    
    this.postalCode = postalCode;
    return this;
  }

  /**
   * Order acceptance postal code. This field is not used unless the &#x60;orderInformation.orderAcceptance.locality&#x60;, &#x60;orderInformation.orderAcceptance.administrativeArea&#x60;, and &#x60;orderInformation.orderAcceptance.country&#x60; fields are present. Must be sent at the line or offer level to be surfaced in the Tax Detail Report.  **NOTE** If this field appears in a &#x60;lineItems&#x60; object, then the value of this field in the &#x60;lineItems&#x60; object overrides the value of the corresponding field at the request-level or order-level object.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. 
   * @return postalCode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_POSTAL_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPostalCode() {
    return postalCode;
  }


  @JsonProperty(JSON_PROPERTY_POSTAL_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }

  public CalculateTaxRequestOrderInformationLineItemsInnerOrderAcceptance country(String country) {
    
    this.country = country;
    return this;
  }

  /**
   * Order acceptance country. This field is not used unless the &#x60;orderInformation.orderAcceptance.administrativeArea&#x60; and &#x60;orderInformation.orderAcceptance.locality&#x60; fields are present. Use the [ISO Standard Country Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/countries_alpha_list.pdf)  **NOTE** If this field appears in a &#x60;lineItems&#x60; object, then the value of this field in the &#x60;lineItems&#x60; object overrides the value of the corresponding field at the request-level or order-level object.  #### Tax Calculation Optional field for U.S. and Canadian taxes. Not applicable to international and value added taxes. 
   * @return country
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCountry() {
    return country;
  }


  @JsonProperty(JSON_PROPERTY_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCountry(String country) {
    this.country = country;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CalculateTaxRequestOrderInformationLineItemsInnerOrderAcceptance calculateTaxRequestOrderInformationLineItemsInnerOrderAcceptance = (CalculateTaxRequestOrderInformationLineItemsInnerOrderAcceptance) o;
    return Objects.equals(this.locality, calculateTaxRequestOrderInformationLineItemsInnerOrderAcceptance.locality) &&
        Objects.equals(this.administrativeArea, calculateTaxRequestOrderInformationLineItemsInnerOrderAcceptance.administrativeArea) &&
        Objects.equals(this.postalCode, calculateTaxRequestOrderInformationLineItemsInnerOrderAcceptance.postalCode) &&
        Objects.equals(this.country, calculateTaxRequestOrderInformationLineItemsInnerOrderAcceptance.country);
  }

  @Override
  public int hashCode() {
    return Objects.hash(locality, administrativeArea, postalCode, country);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CalculateTaxRequestOrderInformationLineItemsInnerOrderAcceptance {\n");
    sb.append("    locality: ").append(toIndentedString(locality)).append("\n");
    sb.append("    administrativeArea: ").append(toIndentedString(administrativeArea)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

