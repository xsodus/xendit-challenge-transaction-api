/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * The images to be used as background on Klarna&#39;s payment page (the image best matching the resolution will be used). This is a pass-through field. Check Klarna&#39;s documentation for more information about the correct format. This value can also be set in the merchant configuration. 
 */
@JsonPropertyOrder({
  CreatePaymentRequestHostedPaymentInformationUserAgent.JSON_PROPERTY_URL,
  CreatePaymentRequestHostedPaymentInformationUserAgent.JSON_PROPERTY_WIDTH
})
@JsonTypeName("createPayment_request_hostedPaymentInformation_userAgent")
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T19:17:21.826843+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class CreatePaymentRequestHostedPaymentInformationUserAgent {
  public static final String JSON_PROPERTY_URL = "url";
  private String url;

  public static final String JSON_PROPERTY_WIDTH = "width";
  private Integer width;

  public CreatePaymentRequestHostedPaymentInformationUserAgent() {
  }

  public CreatePaymentRequestHostedPaymentInformationUserAgent url(String url) {
    
    this.url = url;
    return this;
  }

  /**
   * Url for the image
   * @return url
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUrl() {
    return url;
  }


  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUrl(String url) {
    this.url = url;
  }

  public CreatePaymentRequestHostedPaymentInformationUserAgent width(Integer width) {
    
    this.width = width;
    return this;
  }

  /**
   * Width of the image
   * @return width
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getWidth() {
    return width;
  }


  @JsonProperty(JSON_PROPERTY_WIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWidth(Integer width) {
    this.width = width;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreatePaymentRequestHostedPaymentInformationUserAgent createPaymentRequestHostedPaymentInformationUserAgent = (CreatePaymentRequestHostedPaymentInformationUserAgent) o;
    return Objects.equals(this.url, createPaymentRequestHostedPaymentInformationUserAgent.url) &&
        Objects.equals(this.width, createPaymentRequestHostedPaymentInformationUserAgent.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(url, width);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreatePaymentRequestHostedPaymentInformationUserAgent {\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

