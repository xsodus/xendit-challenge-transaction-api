/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.client.model.PtsV2PaymentsPost201ResponsePointOfSaleInformationEmv;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * PtsV2PaymentsPost201ResponsePointOfSaleInformation
 */
@JsonPropertyOrder({
  PtsV2PaymentsPost201ResponsePointOfSaleInformation.JSON_PROPERTY_EMV,
  PtsV2PaymentsPost201ResponsePointOfSaleInformation.JSON_PROPERTY_AMEX_CAPN_DATA,
  PtsV2PaymentsPost201ResponsePointOfSaleInformation.JSON_PROPERTY_TERMINAL_ID
})
@JsonTypeName("ptsV2PaymentsPost201Response_pointOfSaleInformation")
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T19:17:21.826843+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class PtsV2PaymentsPost201ResponsePointOfSaleInformation {
  public static final String JSON_PROPERTY_EMV = "emv";
  private PtsV2PaymentsPost201ResponsePointOfSaleInformationEmv emv;

  public static final String JSON_PROPERTY_AMEX_CAPN_DATA = "amexCapnData";
  private String amexCapnData;

  public static final String JSON_PROPERTY_TERMINAL_ID = "terminalId";
  private String terminalId;

  public PtsV2PaymentsPost201ResponsePointOfSaleInformation() {
  }

  public PtsV2PaymentsPost201ResponsePointOfSaleInformation emv(PtsV2PaymentsPost201ResponsePointOfSaleInformationEmv emv) {
    
    this.emv = emv;
    return this;
  }

  /**
   * Get emv
   * @return emv
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EMV)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PtsV2PaymentsPost201ResponsePointOfSaleInformationEmv getEmv() {
    return emv;
  }


  @JsonProperty(JSON_PROPERTY_EMV)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEmv(PtsV2PaymentsPost201ResponsePointOfSaleInformationEmv emv) {
    this.emv = emv;
  }

  public PtsV2PaymentsPost201ResponsePointOfSaleInformation amexCapnData(String amexCapnData) {
    
    this.amexCapnData = amexCapnData;
    return this;
  }

  /**
   * Point-of-sale details for the transaction. This value is returned only for **American Express Direct**. CyberSource generates this value, which consists of a series of codes that identify terminal capability, security data, and specific conditions present at the time the transaction occurred. To comply with the CAPN requirements, this value must be included in all subsequent follow-on requests, such as captures and follow-on credits.  When you perform authorizations, captures, and credits through CyberSource, CyberSource passes this value from the authorization service to the subsequent services for you. However, when you perform authorizations through CyberSource and perform subsequent services through other financial institutions, you must ensure that your requests for captures and credits include this value. 
   * @return amexCapnData
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AMEX_CAPN_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAmexCapnData() {
    return amexCapnData;
  }


  @JsonProperty(JSON_PROPERTY_AMEX_CAPN_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAmexCapnData(String amexCapnData) {
    this.amexCapnData = amexCapnData;
  }

  public PtsV2PaymentsPost201ResponsePointOfSaleInformation terminalId(String terminalId) {
    
    this.terminalId = terminalId;
    return this;
  }

  /**
   * Identifier for the terminal at your retail location. You can define this value yourself, but consult the processor for requirements.  #### CyberSource through VisaNet A list of all possible values is stored in your CyberSource account. If terminal ID validation is enabled for your CyberSource account, the value you send for this field is validated against the list each time you include the field in a request. To enable or disable terminal ID validation, contact CyberSource Customer Support.  When you do not include this field in a request, CyberSource uses the default value that is defined in your CyberSource account.  #### FDC Nashville Global To have your account configured to support this field, contact CyberSource Customer Support. This value must be a value that FDC Nashville Global issued to you.  #### For Payouts This field is applicable for CyberSource through VisaNet.  #### GPX Identifier for the terminal at your retail location. A list of all possible values is stored in your account. If terminal ID validation is enabled for your account, the value you send for this field is validated against the list each time you include the field in a request. To enable or disable terminal ID validation, contact customer support.  When you do not include this field in a request, the default value that is defined in your account is used.  Optional for authorizations.  #### Used by **Authorization** Optional for the following processors. When you do not include this field in a request, the default value that is defined in your account is used.   - American Express Direct   - Credit Mutuel-CIC   - FDC Nashville Global   - SIX - Chase Paymentech Solutions: Optional field. If you include this field in your request, you must also include &#x60;pointOfSaleInformation.catLevel&#x60;. - FDMS Nashville: The default value that is defined in your account is used. - GPX - OmniPay Direct: Optional field.  For the following processors, this field is not used. - GPN - JCN Gateway - RBS WorldPay Atlanta - TSYS Acquiring Solutions - Worldpay VAP  #### Card Present reply Terminal identifier assigned by the acquirer. This value must be printed on the receipt. 
   * @return terminalId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TERMINAL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTerminalId() {
    return terminalId;
  }


  @JsonProperty(JSON_PROPERTY_TERMINAL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTerminalId(String terminalId) {
    this.terminalId = terminalId;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PtsV2PaymentsPost201ResponsePointOfSaleInformation ptsV2PaymentsPost201ResponsePointOfSaleInformation = (PtsV2PaymentsPost201ResponsePointOfSaleInformation) o;
    return Objects.equals(this.emv, ptsV2PaymentsPost201ResponsePointOfSaleInformation.emv) &&
        Objects.equals(this.amexCapnData, ptsV2PaymentsPost201ResponsePointOfSaleInformation.amexCapnData) &&
        Objects.equals(this.terminalId, ptsV2PaymentsPost201ResponsePointOfSaleInformation.terminalId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(emv, amexCapnData, terminalId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PtsV2PaymentsPost201ResponsePointOfSaleInformation {\n");
    sb.append("    emv: ").append(toIndentedString(emv)).append("\n");
    sb.append("    amexCapnData: ").append(toIndentedString(amexCapnData)).append("\n");
    sb.append("    terminalId: ").append(toIndentedString(terminalId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

