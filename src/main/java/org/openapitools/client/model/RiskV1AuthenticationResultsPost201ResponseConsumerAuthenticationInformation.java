/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation
 */
@JsonPropertyOrder({
  RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.JSON_PROPERTY_ACS_RENDERING_TYPE,
  RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.JSON_PROPERTY_ACS_REFERENCE_NUMBER,
  RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.JSON_PROPERTY_ACS_TRANSACTION_ID,
  RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.JSON_PROPERTY_ACS_OPERATOR_I_D,
  RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.JSON_PROPERTY_AUTHENTICATION_RESULT,
  RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.JSON_PROPERTY_AUTHENTICATION_TYPE,
  RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.JSON_PROPERTY_AUTHENTICATION_STATUS_MSG,
  RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.JSON_PROPERTY_AUTHENTICATION_TRANSACTION_ID,
  RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.JSON_PROPERTY_AUTHENTICATION_TRANSACTION_CONTEXT_ID,
  RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.JSON_PROPERTY_TRANSACTION_TOKEN,
  RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.JSON_PROPERTY_AUTHORIZATION_PAYLOAD,
  RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.JSON_PROPERTY_CAVV,
  RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.JSON_PROPERTY_CAVV_ALGORITHM,
  RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.JSON_PROPERTY_CHALLENGE_CANCEL_CODE,
  RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.JSON_PROPERTY_DIRECTORY_SERVER_ERROR_CODE,
  RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.JSON_PROPERTY_DIRECTORY_SERVER_ERROR_DESCRIPTION,
  RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.JSON_PROPERTY_EFFECTIVE_AUTHENTICATION_TYPE,
  RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.JSON_PROPERTY_INDICATOR,
  RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.JSON_PROPERTY_INTERACTION_COUNTER,
  RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.JSON_PROPERTY_ECI,
  RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.JSON_PROPERTY_ECI_RAW,
  RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.JSON_PROPERTY_PARES_STATUS,
  RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.JSON_PROPERTY_SDK_TRANSACTION_ID,
  RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.JSON_PROPERTY_SPECIFICATION_VERSION,
  RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.JSON_PROPERTY_THREE_D_S_SERVER_TRANSACTION_ID,
  RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.JSON_PROPERTY_UCAF_AUTHENTICATION_DATA,
  RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.JSON_PROPERTY_UCAF_COLLECTION_INDICATOR,
  RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.JSON_PROPERTY_WHITE_LIST_STATUS,
  RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.JSON_PROPERTY_WHITE_LIST_STATUS_SOURCE,
  RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.JSON_PROPERTY_XID,
  RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.JSON_PROPERTY_DIRECTORY_SERVER_TRANSACTION_ID
})
@JsonTypeName("riskV1AuthenticationResultsPost201Response_consumerAuthenticationInformation")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T18:32:10.370382+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation {
  public static final String JSON_PROPERTY_ACS_RENDERING_TYPE = "acsRenderingType";
  private String acsRenderingType;

  public static final String JSON_PROPERTY_ACS_REFERENCE_NUMBER = "acsReferenceNumber";
  private String acsReferenceNumber;

  public static final String JSON_PROPERTY_ACS_TRANSACTION_ID = "acsTransactionId";
  private String acsTransactionId;

  public static final String JSON_PROPERTY_ACS_OPERATOR_I_D = "acsOperatorID";
  private String acsOperatorID;

  public static final String JSON_PROPERTY_AUTHENTICATION_RESULT = "authenticationResult";
  private String authenticationResult;

  public static final String JSON_PROPERTY_AUTHENTICATION_TYPE = "authenticationType";
  private String authenticationType;

  public static final String JSON_PROPERTY_AUTHENTICATION_STATUS_MSG = "authenticationStatusMsg";
  private String authenticationStatusMsg;

  public static final String JSON_PROPERTY_AUTHENTICATION_TRANSACTION_ID = "authenticationTransactionId";
  private String authenticationTransactionId;

  public static final String JSON_PROPERTY_AUTHENTICATION_TRANSACTION_CONTEXT_ID = "authenticationTransactionContextId";
  private String authenticationTransactionContextId;

  public static final String JSON_PROPERTY_TRANSACTION_TOKEN = "transactionToken";
  private String transactionToken;

  public static final String JSON_PROPERTY_AUTHORIZATION_PAYLOAD = "authorizationPayload";
  private String authorizationPayload;

  public static final String JSON_PROPERTY_CAVV = "cavv";
  private String cavv;

  public static final String JSON_PROPERTY_CAVV_ALGORITHM = "cavvAlgorithm";
  private String cavvAlgorithm;

  public static final String JSON_PROPERTY_CHALLENGE_CANCEL_CODE = "challengeCancelCode";
  private String challengeCancelCode;

  public static final String JSON_PROPERTY_DIRECTORY_SERVER_ERROR_CODE = "directoryServerErrorCode";
  private String directoryServerErrorCode;

  public static final String JSON_PROPERTY_DIRECTORY_SERVER_ERROR_DESCRIPTION = "directoryServerErrorDescription";
  private String directoryServerErrorDescription;

  public static final String JSON_PROPERTY_EFFECTIVE_AUTHENTICATION_TYPE = "effectiveAuthenticationType";
  private String effectiveAuthenticationType;

  public static final String JSON_PROPERTY_INDICATOR = "indicator";
  private String indicator;

  public static final String JSON_PROPERTY_INTERACTION_COUNTER = "interactionCounter";
  private String interactionCounter;

  public static final String JSON_PROPERTY_ECI = "eci";
  private String eci;

  public static final String JSON_PROPERTY_ECI_RAW = "eciRaw";
  private String eciRaw;

  public static final String JSON_PROPERTY_PARES_STATUS = "paresStatus";
  private String paresStatus;

  public static final String JSON_PROPERTY_SDK_TRANSACTION_ID = "sdkTransactionId";
  private String sdkTransactionId;

  public static final String JSON_PROPERTY_SPECIFICATION_VERSION = "specificationVersion";
  private String specificationVersion;

  public static final String JSON_PROPERTY_THREE_D_S_SERVER_TRANSACTION_ID = "threeDSServerTransactionId";
  private String threeDSServerTransactionId;

  public static final String JSON_PROPERTY_UCAF_AUTHENTICATION_DATA = "ucafAuthenticationData";
  private String ucafAuthenticationData;

  public static final String JSON_PROPERTY_UCAF_COLLECTION_INDICATOR = "ucafCollectionIndicator";
  private String ucafCollectionIndicator;

  public static final String JSON_PROPERTY_WHITE_LIST_STATUS = "whiteListStatus";
  private String whiteListStatus;

  public static final String JSON_PROPERTY_WHITE_LIST_STATUS_SOURCE = "whiteListStatusSource";
  private String whiteListStatusSource;

  public static final String JSON_PROPERTY_XID = "xid";
  private String xid;

  public static final String JSON_PROPERTY_DIRECTORY_SERVER_TRANSACTION_ID = "directoryServerTransactionId";
  private String directoryServerTransactionId;

  public RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation() {
  }

  public RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation acsRenderingType(String acsRenderingType) {
    
    this.acsRenderingType = acsRenderingType;
    return this;
  }

  /**
   * Identifies the UI Type the ACS will use to complete the challenge. **NOTE**: Only available for App transactions using the Cardinal Mobile SDK. 
   * @return acsRenderingType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACS_RENDERING_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAcsRenderingType() {
    return acsRenderingType;
  }


  @JsonProperty(JSON_PROPERTY_ACS_RENDERING_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAcsRenderingType(String acsRenderingType) {
    this.acsRenderingType = acsRenderingType;
  }

  public RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation acsReferenceNumber(String acsReferenceNumber) {
    
    this.acsReferenceNumber = acsReferenceNumber;
    return this;
  }

  /**
   * Unique identifier assigned by the EMVCo Secretariat upon Testing and Approval.
   * @return acsReferenceNumber
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACS_REFERENCE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAcsReferenceNumber() {
    return acsReferenceNumber;
  }


  @JsonProperty(JSON_PROPERTY_ACS_REFERENCE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAcsReferenceNumber(String acsReferenceNumber) {
    this.acsReferenceNumber = acsReferenceNumber;
  }

  public RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation acsTransactionId(String acsTransactionId) {
    
    this.acsTransactionId = acsTransactionId;
    return this;
  }

  /**
   * Unique transaction identifier assigned by the ACS to identify a single transaction. 
   * @return acsTransactionId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACS_TRANSACTION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAcsTransactionId() {
    return acsTransactionId;
  }


  @JsonProperty(JSON_PROPERTY_ACS_TRANSACTION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAcsTransactionId(String acsTransactionId) {
    this.acsTransactionId = acsTransactionId;
  }

  public RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation acsOperatorID(String acsOperatorID) {
    
    this.acsOperatorID = acsOperatorID;
    return this;
  }

  /**
   * Directory Server assigned ACS identifier.
   * @return acsOperatorID
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACS_OPERATOR_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAcsOperatorID() {
    return acsOperatorID;
  }


  @JsonProperty(JSON_PROPERTY_ACS_OPERATOR_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAcsOperatorID(String acsOperatorID) {
    this.acsOperatorID = acsOperatorID;
  }

  public RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation authenticationResult(String authenticationResult) {
    
    this.authenticationResult = authenticationResult;
    return this;
  }

  /**
   * Raw authentication data that comes from the cardissuing bank. Primary authentication field that indicates if authentication was successful and if liability shift occurred. You should examine first the result of this field. This field contains one of these values: - &#x60;-1&#x60;: Invalid PARes. - &#x60;0&#x60;: Successful validation. - &#x60;1&#x60;: Cardholder is not participating, but the attempt to authenticate was recorded. - &#x60;6&#x60;: Issuer unable to perform authentication. - &#x60;9&#x60;: Cardholder did not complete authentication. 
   * @return authenticationResult
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTHENTICATION_RESULT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAuthenticationResult() {
    return authenticationResult;
  }


  @JsonProperty(JSON_PROPERTY_AUTHENTICATION_RESULT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAuthenticationResult(String authenticationResult) {
    this.authenticationResult = authenticationResult;
  }

  public RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation authenticationType(String authenticationType) {
    
    this.authenticationType = authenticationType;
    return this;
  }

  /**
   * Indicates the type of authentication that will be used to challenge the card holder.  Possible Values:  01 - Static  02 - Dynamic  03 - OOB (Out of Band)  04 - Decoupled  20 - OTP hosted at merchant end. (Rupay S2S flow) **NOTE**:  EMV 3-D Secure version 2.1.0 supports values 01-03.  Version 2.2.0 supports values 01-04.  Decoupled authentication is not supported at this time. 
   * @return authenticationType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTHENTICATION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAuthenticationType() {
    return authenticationType;
  }


  @JsonProperty(JSON_PROPERTY_AUTHENTICATION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAuthenticationType(String authenticationType) {
    this.authenticationType = authenticationType;
  }

  public RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation authenticationStatusMsg(String authenticationStatusMsg) {
    
    this.authenticationStatusMsg = authenticationStatusMsg;
    return this;
  }

  /**
   * Message that explains the authenticationResult reply field. 
   * @return authenticationStatusMsg
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTHENTICATION_STATUS_MSG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAuthenticationStatusMsg() {
    return authenticationStatusMsg;
  }


  @JsonProperty(JSON_PROPERTY_AUTHENTICATION_STATUS_MSG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAuthenticationStatusMsg(String authenticationStatusMsg) {
    this.authenticationStatusMsg = authenticationStatusMsg;
  }

  public RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation authenticationTransactionId(String authenticationTransactionId) {
    
    this.authenticationTransactionId = authenticationTransactionId;
    return this;
  }

  /**
   * Payer authentication transaction identifier is used to link the check enrollment and validate authentication messages. For Rupay, this field should be passed as request only for Resend OTP use case. 
   * @return authenticationTransactionId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTHENTICATION_TRANSACTION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAuthenticationTransactionId() {
    return authenticationTransactionId;
  }


  @JsonProperty(JSON_PROPERTY_AUTHENTICATION_TRANSACTION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAuthenticationTransactionId(String authenticationTransactionId) {
    this.authenticationTransactionId = authenticationTransactionId;
  }

  public RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation authenticationTransactionContextId(String authenticationTransactionContextId) {
    
    this.authenticationTransactionContextId = authenticationTransactionContextId;
    return this;
  }

  /**
   * Payer authentication transaction identifier passed to link the validation and authorization calls. 
   * @return authenticationTransactionContextId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTHENTICATION_TRANSACTION_CONTEXT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAuthenticationTransactionContextId() {
    return authenticationTransactionContextId;
  }


  @JsonProperty(JSON_PROPERTY_AUTHENTICATION_TRANSACTION_CONTEXT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAuthenticationTransactionContextId(String authenticationTransactionContextId) {
    this.authenticationTransactionContextId = authenticationTransactionContextId;
  }

  public RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation transactionToken(String transactionToken) {
    
    this.transactionToken = transactionToken;
    return this;
  }

  /**
   * Web based token used to authenticate consumer with Rupay authentication provider. 
   * @return transactionToken
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRANSACTION_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTransactionToken() {
    return transactionToken;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTION_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransactionToken(String transactionToken) {
    this.transactionToken = transactionToken;
  }

  public RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation authorizationPayload(String authorizationPayload) {
    
    this.authorizationPayload = authorizationPayload;
    return this;
  }

  /**
   * The Base64 encoded JSON Payload of CB specific Authorization Values returned in the challenge Flow 
   * @return authorizationPayload
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTHORIZATION_PAYLOAD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAuthorizationPayload() {
    return authorizationPayload;
  }


  @JsonProperty(JSON_PROPERTY_AUTHORIZATION_PAYLOAD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAuthorizationPayload(String authorizationPayload) {
    this.authorizationPayload = authorizationPayload;
  }

  public RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation cavv(String cavv) {
    
    this.cavv = cavv;
    return this;
  }

  /**
   * Unique identifier generated by the card-issuing bank for Visa, American Express, JCB, Diners Club, and Discover transactions after the customer is authenticated. The value is in base64. When you request the card authorization service, CyberSource automatically converts the value, not the field name, to the format required by your payment processor. 
   * @return cavv
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CAVV)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCavv() {
    return cavv;
  }


  @JsonProperty(JSON_PROPERTY_CAVV)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCavv(String cavv) {
    this.cavv = cavv;
  }

  public RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation cavvAlgorithm(String cavvAlgorithm) {
    
    this.cavvAlgorithm = cavvAlgorithm;
    return this;
  }

  /**
   * Field that is returned only when the CAVV is generated, which occurs when paresStatus contains the values Y (successful authentication) or A (attempted authentication). If you use the ATOS processor, send the value of this field in the &#x60;cavv_algorithm&#x60; request field of the authorization service. This field contains one of these values: - &#x60;2&#x60;: Visa, American Express, JCB, Diners Club, and Discover - &#x60;3&#x60;: Mastercard 
   * @return cavvAlgorithm
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CAVV_ALGORITHM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCavvAlgorithm() {
    return cavvAlgorithm;
  }


  @JsonProperty(JSON_PROPERTY_CAVV_ALGORITHM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCavvAlgorithm(String cavvAlgorithm) {
    this.cavvAlgorithm = cavvAlgorithm;
  }

  public RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation challengeCancelCode(String challengeCancelCode) {
    
    this.challengeCancelCode = challengeCancelCode;
    return this;
  }

  /**
   * An indicator as to why the transaction was canceled. Possible Values:  - &#x60;01&#x60;: Cardholder selected Cancel. - &#x60;02&#x60;: Reserved for future EMVCo use (values invalid until defined by EMVCo). - &#x60;03&#x60;: Transaction Timed Out—Decoupled Authentication - &#x60;04&#x60;: Transaction timed out at ACS—other timeouts - &#x60;05&#x60;: Transaction Timed out at ACS - First CReq not received by ACS - &#x60;06&#x60;: Transaction Error - &#x60;07&#x60;: Unknown - &#x60;08&#x60;: Transaction Timed Out at SDK 
   * @return challengeCancelCode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CHALLENGE_CANCEL_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getChallengeCancelCode() {
    return challengeCancelCode;
  }


  @JsonProperty(JSON_PROPERTY_CHALLENGE_CANCEL_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChallengeCancelCode(String challengeCancelCode) {
    this.challengeCancelCode = challengeCancelCode;
  }

  public RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation directoryServerErrorCode(String directoryServerErrorCode) {
    
    this.directoryServerErrorCode = directoryServerErrorCode;
    return this;
  }

  /**
   * The directory server error code indicating a problem with this transaction. Note - Max Length of this field is typically 3 characters. 
   * @return directoryServerErrorCode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DIRECTORY_SERVER_ERROR_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDirectoryServerErrorCode() {
    return directoryServerErrorCode;
  }


  @JsonProperty(JSON_PROPERTY_DIRECTORY_SERVER_ERROR_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDirectoryServerErrorCode(String directoryServerErrorCode) {
    this.directoryServerErrorCode = directoryServerErrorCode;
  }

  public RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation directoryServerErrorDescription(String directoryServerErrorDescription) {
    
    this.directoryServerErrorDescription = directoryServerErrorDescription;
    return this;
  }

  /**
   * Directory server text and additional detail about the error for this transaction. 
   * @return directoryServerErrorDescription
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DIRECTORY_SERVER_ERROR_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDirectoryServerErrorDescription() {
    return directoryServerErrorDescription;
  }


  @JsonProperty(JSON_PROPERTY_DIRECTORY_SERVER_ERROR_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDirectoryServerErrorDescription(String directoryServerErrorDescription) {
    this.directoryServerErrorDescription = directoryServerErrorDescription;
  }

  public RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation effectiveAuthenticationType(String effectiveAuthenticationType) {
    
    this.effectiveAuthenticationType = effectiveAuthenticationType;
    return this;
  }

  /**
   * This field describes the type of 3DS transaction flow that took place.  It can be one of three possible flows; CH - Challenge FR - Frictionless FD - Frictionless with delegation, (challenge not generated by the issuer but by the scheme on behalf of the issuer). 
   * @return effectiveAuthenticationType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EFFECTIVE_AUTHENTICATION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEffectiveAuthenticationType() {
    return effectiveAuthenticationType;
  }


  @JsonProperty(JSON_PROPERTY_EFFECTIVE_AUTHENTICATION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEffectiveAuthenticationType(String effectiveAuthenticationType) {
    this.effectiveAuthenticationType = effectiveAuthenticationType;
  }

  public RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation indicator(String indicator) {
    
    this.indicator = indicator;
    return this;
  }

  /**
   * Indicator used to differentiate Internet transactions from other types. The authentication failed if this field is not returned. For Visa, if your payment processor is Streamline, Barclays, AIBMS, or FDC Germany, you receive the value vbv_failure instead of internet when eci is 07. The value of this field is passed automatically to the authorization service if you request the services together. This field contains one of these values: - &#x60;aesk&#x60;: American Express SafeKey authentication verified successfully. - &#x60;aesk_attempted&#x60;: Card not enrolled in American Express SafeKey, but the attempt to authenticate was recorded. - &#x60;dipb&#x60;: Discover ProtectBuy authentication verified successfully. - &#x60;dipb_attempted&#x60;: Card not enrolled in Discover ProtectBuy, but the attempt to authenticate was recorded. - &#x60;internet&#x60;: Authentication was not verified successfully. - &#x60;js&#x60;: J/Secure authentication verified successfully. - &#x60;js_attempted&#x60;: Card not enrolled in J/Secure, but the attempt to authenticate was recorded. - &#x60;moto&#x60;: Mail or telephone order. - &#x60;pb_attempted&#x60;: Card not enrolled in Diners Club ProtectBuy, but the attempt to authenticate was recorded. - &#x60;recurring&#x60;: Recurring transaction. - &#x60;spa&#x60;: Mastercard Identity Check authentication verified successfully. - &#x60;spa_failure&#x60;: Mastercard Identity Check failed authentication. - &#x60;vbv&#x60;: Visa Secure authentication verified successfully. - &#x60;vbv_attempted&#x60;: Card not enrolled in Visa Secure, but the attempt to authenticate was recorded. - &#x60;vbv_failure&#x60;: Visa Secure authentication unavailable. 
   * @return indicator
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIndicator() {
    return indicator;
  }


  @JsonProperty(JSON_PROPERTY_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIndicator(String indicator) {
    this.indicator = indicator;
  }

  public RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation interactionCounter(String interactionCounter) {
    
    this.interactionCounter = interactionCounter;
    return this;
  }

  /**
   * Indicates the number of authentication cycles attempted by the cardholder and is tracked by the Issuing Banks ACS.Example: if customer gets the challenge window and enter in their one time password and hit submit then that interaction counter should just be 1. When customer gets the challenge window and the bank asks if they want to have the one time password  sent to their phone or their email and they have to choose before going to the next screen to enter in their one time password then this interaction count would be 2. One for the selection of how they want the one time password delivered and another with them actually entering in the one time password and hitting the submit button. 
   * @return interactionCounter
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INTERACTION_COUNTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getInteractionCounter() {
    return interactionCounter;
  }


  @JsonProperty(JSON_PROPERTY_INTERACTION_COUNTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInteractionCounter(String interactionCounter) {
    this.interactionCounter = interactionCounter;
  }

  public RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation eci(String eci) {
    
    this.eci = eci;
    return this;
  }

  /**
   * Note This field applies only to non-U.S-issued cards.  For enroll, Numeric electronic commerce indicator (ECI) returned only for Visa, American Express, JCB, Diners Club, and Discover transactions when the card is not enrolled. For more information, see \&quot;Interpreting the Reply,\&quot; page 22.  If you are not using the CyberSource payment services, you must send this value to your payment processor in the subsequent request for card authorization. This field contains one of these values: - &#x60;06&#x60;: The card can be enrolled. Liability shift. - &#x60;07&#x60;: The card cannot be enrolled. No liability shift.  For validate, Numeric electronic commerce indicator (ECI) returned only for Visa, American Express, JCB, Diners Club, and Discover transactions. The field is absent when authentication fails. You must send this value to your payment processor in the subsequent request for card authorization. This field contains one of these values: - &#x60;05&#x60;: Successful authentication - &#x60;06&#x60;: Authentication attempted - &#x60;07&#x60;: Failed authentication (No response from the merchant because of a problem.) 
   * @return eci
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ECI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEci() {
    return eci;
  }


  @JsonProperty(JSON_PROPERTY_ECI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEci(String eci) {
    this.eci = eci;
  }

  public RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation eciRaw(String eciRaw) {
    
    this.eciRaw = eciRaw;
    return this;
  }

  /**
   * ECI value that can be returned for Visa, Mastercard, American Express, JCB, Diners Club, and Discover. The field is absent when authentication fails. If your payment processor is Streamline, you must pass the value of this field instead of the value of &#x60;eci&#x60; or &#x60;ucafCollectionIndicator&#x60;.  This field can contain one of these values: - &#x60;01&#x60;: Authentication attempted (Mastercard) - &#x60;02&#x60;: Successful authentication (Mastercard) - &#x60;05&#x60;: Successful authentication (Visa, American Express, JCB, Diners Club, and Discover) - &#x60;06&#x60;: Authentication attempted (Visa, American Express, JCB, Diners Club, and Discover) 
   * @return eciRaw
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ECI_RAW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEciRaw() {
    return eciRaw;
  }


  @JsonProperty(JSON_PROPERTY_ECI_RAW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEciRaw(String eciRaw) {
    this.eciRaw = eciRaw;
  }

  public RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation paresStatus(String paresStatus) {
    
    this.paresStatus = paresStatus;
    return this;
  }

  /**
   * Raw result of the authentication check. If you are configured for Asia, Middle East, and Africa Gateway Processing, you need to send the value of this field in your authorization request. This field can contain one of these values: - &#x60;A&#x60;: Proof of authentication attempt was generated. - &#x60;N&#x60;: Customer failed or canceled authentication. Transaction denied. - &#x60;U&#x60;: Authentication not completed regardless of the reason. - &#x60;Y&#x60;: Customer was successfully authenticated. 
   * @return paresStatus
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PARES_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getParesStatus() {
    return paresStatus;
  }


  @JsonProperty(JSON_PROPERTY_PARES_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setParesStatus(String paresStatus) {
    this.paresStatus = paresStatus;
  }

  public RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation sdkTransactionId(String sdkTransactionId) {
    
    this.sdkTransactionId = sdkTransactionId;
    return this;
  }

  /**
   * SDK unique transaction identifier that is generated on each new transaction. 
   * @return sdkTransactionId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SDK_TRANSACTION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSdkTransactionId() {
    return sdkTransactionId;
  }


  @JsonProperty(JSON_PROPERTY_SDK_TRANSACTION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSdkTransactionId(String sdkTransactionId) {
    this.sdkTransactionId = sdkTransactionId;
  }

  public RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation specificationVersion(String specificationVersion) {
    
    this.specificationVersion = specificationVersion;
    return this;
  }

  /**
   * This field contains the 3D Secure version that was used to process the transaction. For example: 2.2.0 
   * @return specificationVersion
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SPECIFICATION_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSpecificationVersion() {
    return specificationVersion;
  }


  @JsonProperty(JSON_PROPERTY_SPECIFICATION_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSpecificationVersion(String specificationVersion) {
    this.specificationVersion = specificationVersion;
  }

  public RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation threeDSServerTransactionId(String threeDSServerTransactionId) {
    
    this.threeDSServerTransactionId = threeDSServerTransactionId;
    return this;
  }

  /**
   * Unique transaction identifier assigned by the 3DS Server to identify a single transaction. 
   * @return threeDSServerTransactionId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_THREE_D_S_SERVER_TRANSACTION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getThreeDSServerTransactionId() {
    return threeDSServerTransactionId;
  }


  @JsonProperty(JSON_PROPERTY_THREE_D_S_SERVER_TRANSACTION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setThreeDSServerTransactionId(String threeDSServerTransactionId) {
    this.threeDSServerTransactionId = threeDSServerTransactionId;
  }

  public RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation ucafAuthenticationData(String ucafAuthenticationData) {
    
    this.ucafAuthenticationData = ucafAuthenticationData;
    return this;
  }

  /**
   * AAV is a unique identifier generated by the card-issuing bank for Mastercard Identity Check transactions after the customer is authenticated. The value is in base64. Include the data in the card authorization request. 
   * @return ucafAuthenticationData
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UCAF_AUTHENTICATION_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUcafAuthenticationData() {
    return ucafAuthenticationData;
  }


  @JsonProperty(JSON_PROPERTY_UCAF_AUTHENTICATION_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUcafAuthenticationData(String ucafAuthenticationData) {
    this.ucafAuthenticationData = ucafAuthenticationData;
  }

  public RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation ucafCollectionIndicator(String ucafCollectionIndicator) {
    
    this.ucafCollectionIndicator = ucafCollectionIndicator;
    return this;
  }

  /**
   * For enroll, Returned only for Mastercard transactions. Indicates that authentication is not required because the customer is not enrolled. Add the value of this field to the authorization field ucaf_collection_indicator. This field can contain these values: 0, 1.  For validate, Numeric electronic commerce indicator (ECI) returned only for Mastercard Identity Check transactions. The field is absent when authentication fails. You must send this value to your payment processor in the request for card authorization. This field contain one of these values: - &#x60;0&#x60;: Authentication data not collected, and customer authentication was not completed. - &#x60;1&#x60;: Authentication data not collected because customer authentication was not completed. - &#x60;2&#x60;: Authentication data collected because customer completed authentication. 
   * @return ucafCollectionIndicator
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UCAF_COLLECTION_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUcafCollectionIndicator() {
    return ucafCollectionIndicator;
  }


  @JsonProperty(JSON_PROPERTY_UCAF_COLLECTION_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUcafCollectionIndicator(String ucafCollectionIndicator) {
    this.ucafCollectionIndicator = ucafCollectionIndicator;
  }

  public RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation whiteListStatus(String whiteListStatus) {
    
    this.whiteListStatus = whiteListStatus;
    return this;
  }

  /**
   * Enables the communication of trusted beneficiary/whitelist status between the ACS, the DS and the 3DS Requestor.  Possible Values:  Y - 3DS Requestor is whitelisted by cardholder  N - 3DS Requestor is not whitelisted by cardholder 
   * @return whiteListStatus
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WHITE_LIST_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getWhiteListStatus() {
    return whiteListStatus;
  }


  @JsonProperty(JSON_PROPERTY_WHITE_LIST_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWhiteListStatus(String whiteListStatus) {
    this.whiteListStatus = whiteListStatus;
  }

  public RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation whiteListStatusSource(String whiteListStatusSource) {
    
    this.whiteListStatusSource = whiteListStatusSource;
    return this;
  }

  /**
   * This data element will be populated by the system setting Whitelist Status. Possible Values: 01 - 3DS/ Server/ 02 – DS/03 - ACS 
   * @return whiteListStatusSource
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WHITE_LIST_STATUS_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getWhiteListStatusSource() {
    return whiteListStatusSource;
  }


  @JsonProperty(JSON_PROPERTY_WHITE_LIST_STATUS_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWhiteListStatusSource(String whiteListStatusSource) {
    this.whiteListStatusSource = whiteListStatusSource;
  }

  public RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation xid(String xid) {
    
    this.xid = xid;
    return this;
  }

  /**
   * Transaction identifier generated by CyberSource for successful enrollment or validation checks. Use this value, which is in base64, to match an outgoing PAReq with an incoming PARes. CyberSource forwards the XID with the card authorization service to these payment processors in these cases: - Barclays - Streamline (when the **ecommerceIndicator**&#x60;&#x3D;spa&#x60;) 
   * @return xid
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_XID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getXid() {
    return xid;
  }


  @JsonProperty(JSON_PROPERTY_XID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setXid(String xid) {
    this.xid = xid;
  }

  public RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation directoryServerTransactionId(String directoryServerTransactionId) {
    
    this.directoryServerTransactionId = directoryServerTransactionId;
    return this;
  }

  /**
   * The Directory Server Transaction ID is generated by the Mastercard Directory Server during the authentication transaction and passed back to the merchant with the authentication results. For Cybersource Through Visanet Gateway: The value for this field corresponds to the following data in the TC 33 capture file3: Record: CP01 TCR7, Position: 114-149, Field: MC AVV Verification—Directory Server Transaction ID 
   * @return directoryServerTransactionId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DIRECTORY_SERVER_TRANSACTION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDirectoryServerTransactionId() {
    return directoryServerTransactionId;
  }


  @JsonProperty(JSON_PROPERTY_DIRECTORY_SERVER_TRANSACTION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDirectoryServerTransactionId(String directoryServerTransactionId) {
    this.directoryServerTransactionId = directoryServerTransactionId;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation riskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation = (RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation) o;
    return Objects.equals(this.acsRenderingType, riskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.acsRenderingType) &&
        Objects.equals(this.acsReferenceNumber, riskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.acsReferenceNumber) &&
        Objects.equals(this.acsTransactionId, riskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.acsTransactionId) &&
        Objects.equals(this.acsOperatorID, riskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.acsOperatorID) &&
        Objects.equals(this.authenticationResult, riskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.authenticationResult) &&
        Objects.equals(this.authenticationType, riskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.authenticationType) &&
        Objects.equals(this.authenticationStatusMsg, riskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.authenticationStatusMsg) &&
        Objects.equals(this.authenticationTransactionId, riskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.authenticationTransactionId) &&
        Objects.equals(this.authenticationTransactionContextId, riskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.authenticationTransactionContextId) &&
        Objects.equals(this.transactionToken, riskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.transactionToken) &&
        Objects.equals(this.authorizationPayload, riskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.authorizationPayload) &&
        Objects.equals(this.cavv, riskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.cavv) &&
        Objects.equals(this.cavvAlgorithm, riskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.cavvAlgorithm) &&
        Objects.equals(this.challengeCancelCode, riskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.challengeCancelCode) &&
        Objects.equals(this.directoryServerErrorCode, riskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.directoryServerErrorCode) &&
        Objects.equals(this.directoryServerErrorDescription, riskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.directoryServerErrorDescription) &&
        Objects.equals(this.effectiveAuthenticationType, riskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.effectiveAuthenticationType) &&
        Objects.equals(this.indicator, riskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.indicator) &&
        Objects.equals(this.interactionCounter, riskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.interactionCounter) &&
        Objects.equals(this.eci, riskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.eci) &&
        Objects.equals(this.eciRaw, riskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.eciRaw) &&
        Objects.equals(this.paresStatus, riskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.paresStatus) &&
        Objects.equals(this.sdkTransactionId, riskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.sdkTransactionId) &&
        Objects.equals(this.specificationVersion, riskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.specificationVersion) &&
        Objects.equals(this.threeDSServerTransactionId, riskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.threeDSServerTransactionId) &&
        Objects.equals(this.ucafAuthenticationData, riskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.ucafAuthenticationData) &&
        Objects.equals(this.ucafCollectionIndicator, riskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.ucafCollectionIndicator) &&
        Objects.equals(this.whiteListStatus, riskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.whiteListStatus) &&
        Objects.equals(this.whiteListStatusSource, riskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.whiteListStatusSource) &&
        Objects.equals(this.xid, riskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.xid) &&
        Objects.equals(this.directoryServerTransactionId, riskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation.directoryServerTransactionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acsRenderingType, acsReferenceNumber, acsTransactionId, acsOperatorID, authenticationResult, authenticationType, authenticationStatusMsg, authenticationTransactionId, authenticationTransactionContextId, transactionToken, authorizationPayload, cavv, cavvAlgorithm, challengeCancelCode, directoryServerErrorCode, directoryServerErrorDescription, effectiveAuthenticationType, indicator, interactionCounter, eci, eciRaw, paresStatus, sdkTransactionId, specificationVersion, threeDSServerTransactionId, ucafAuthenticationData, ucafCollectionIndicator, whiteListStatus, whiteListStatusSource, xid, directoryServerTransactionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RiskV1AuthenticationResultsPost201ResponseConsumerAuthenticationInformation {\n");
    sb.append("    acsRenderingType: ").append(toIndentedString(acsRenderingType)).append("\n");
    sb.append("    acsReferenceNumber: ").append(toIndentedString(acsReferenceNumber)).append("\n");
    sb.append("    acsTransactionId: ").append(toIndentedString(acsTransactionId)).append("\n");
    sb.append("    acsOperatorID: ").append(toIndentedString(acsOperatorID)).append("\n");
    sb.append("    authenticationResult: ").append(toIndentedString(authenticationResult)).append("\n");
    sb.append("    authenticationType: ").append(toIndentedString(authenticationType)).append("\n");
    sb.append("    authenticationStatusMsg: ").append(toIndentedString(authenticationStatusMsg)).append("\n");
    sb.append("    authenticationTransactionId: ").append(toIndentedString(authenticationTransactionId)).append("\n");
    sb.append("    authenticationTransactionContextId: ").append(toIndentedString(authenticationTransactionContextId)).append("\n");
    sb.append("    transactionToken: ").append(toIndentedString(transactionToken)).append("\n");
    sb.append("    authorizationPayload: ").append(toIndentedString(authorizationPayload)).append("\n");
    sb.append("    cavv: ").append(toIndentedString(cavv)).append("\n");
    sb.append("    cavvAlgorithm: ").append(toIndentedString(cavvAlgorithm)).append("\n");
    sb.append("    challengeCancelCode: ").append(toIndentedString(challengeCancelCode)).append("\n");
    sb.append("    directoryServerErrorCode: ").append(toIndentedString(directoryServerErrorCode)).append("\n");
    sb.append("    directoryServerErrorDescription: ").append(toIndentedString(directoryServerErrorDescription)).append("\n");
    sb.append("    effectiveAuthenticationType: ").append(toIndentedString(effectiveAuthenticationType)).append("\n");
    sb.append("    indicator: ").append(toIndentedString(indicator)).append("\n");
    sb.append("    interactionCounter: ").append(toIndentedString(interactionCounter)).append("\n");
    sb.append("    eci: ").append(toIndentedString(eci)).append("\n");
    sb.append("    eciRaw: ").append(toIndentedString(eciRaw)).append("\n");
    sb.append("    paresStatus: ").append(toIndentedString(paresStatus)).append("\n");
    sb.append("    sdkTransactionId: ").append(toIndentedString(sdkTransactionId)).append("\n");
    sb.append("    specificationVersion: ").append(toIndentedString(specificationVersion)).append("\n");
    sb.append("    threeDSServerTransactionId: ").append(toIndentedString(threeDSServerTransactionId)).append("\n");
    sb.append("    ucafAuthenticationData: ").append(toIndentedString(ucafAuthenticationData)).append("\n");
    sb.append("    ucafCollectionIndicator: ").append(toIndentedString(ucafCollectionIndicator)).append("\n");
    sb.append("    whiteListStatus: ").append(toIndentedString(whiteListStatus)).append("\n");
    sb.append("    whiteListStatusSource: ").append(toIndentedString(whiteListStatusSource)).append("\n");
    sb.append("    xid: ").append(toIndentedString(xid)).append("\n");
    sb.append("    directoryServerTransactionId: ").append(toIndentedString(directoryServerTransactionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

