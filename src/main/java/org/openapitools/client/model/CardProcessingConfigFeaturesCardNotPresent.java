/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.CardProcessingConfigFeaturesCardNotPresentInstallment;
import org.openapitools.client.model.CardProcessingConfigFeaturesCardNotPresentProcessorsValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CardProcessingConfigFeaturesCardNotPresent
 */
@JsonPropertyOrder({
  CardProcessingConfigFeaturesCardNotPresent.JSON_PROPERTY_PROCESSORS,
  CardProcessingConfigFeaturesCardNotPresent.JSON_PROPERTY_IGNORE_ADDRESS_VERIFICATION_SYSTEM,
  CardProcessingConfigFeaturesCardNotPresent.JSON_PROPERTY_VISA_STRAIGHT_THROUGH_PROCESSING_ONLY,
  CardProcessingConfigFeaturesCardNotPresent.JSON_PROPERTY_AMEX_TRANSACTION_ADVICE_ADDENDUM1,
  CardProcessingConfigFeaturesCardNotPresent.JSON_PROPERTY_INSTALLMENT
})
@JsonTypeName("CardProcessingConfig_features_cardNotPresent")
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T19:17:21.826843+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class CardProcessingConfigFeaturesCardNotPresent {
  public static final String JSON_PROPERTY_PROCESSORS = "processors";
  private Map<String, CardProcessingConfigFeaturesCardNotPresentProcessorsValue> processors = new HashMap<>();

  public static final String JSON_PROPERTY_IGNORE_ADDRESS_VERIFICATION_SYSTEM = "ignoreAddressVerificationSystem";
  private Boolean ignoreAddressVerificationSystem;

  public static final String JSON_PROPERTY_VISA_STRAIGHT_THROUGH_PROCESSING_ONLY = "visaStraightThroughProcessingOnly";
  private Boolean visaStraightThroughProcessingOnly;

  public static final String JSON_PROPERTY_AMEX_TRANSACTION_ADVICE_ADDENDUM1 = "amexTransactionAdviceAddendum1";
  private String amexTransactionAdviceAddendum1;

  public static final String JSON_PROPERTY_INSTALLMENT = "installment";
  private CardProcessingConfigFeaturesCardNotPresentInstallment installment;

  public CardProcessingConfigFeaturesCardNotPresent() {
  }

  public CardProcessingConfigFeaturesCardNotPresent processors(Map<String, CardProcessingConfigFeaturesCardNotPresentProcessorsValue> processors) {
    
    this.processors = processors;
    return this;
  }

  public CardProcessingConfigFeaturesCardNotPresent putProcessorsItem(String key, CardProcessingConfigFeaturesCardNotPresentProcessorsValue processorsItem) {
    if (this.processors == null) {
      this.processors = new HashMap<>();
    }
    this.processors.put(key, processorsItem);
    return this;
  }

  /**
   * e.g. * amexdirect * barclays2 * CUP * EFTPOS * fdiglobal * gpx * smartfdc * tsys * vero * VPC  For VPC, CUP and EFTPOS processors, replace the processor name from VPC or CUP or EFTPOS to the actual processor name in the sample request. e.g. replace VPC with &amp;lt;your vpc processor&amp;gt; 
   * @return processors
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROCESSORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, CardProcessingConfigFeaturesCardNotPresentProcessorsValue> getProcessors() {
    return processors;
  }


  @JsonProperty(JSON_PROPERTY_PROCESSORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProcessors(Map<String, CardProcessingConfigFeaturesCardNotPresentProcessorsValue> processors) {
    this.processors = processors;
  }

  public CardProcessingConfigFeaturesCardNotPresent ignoreAddressVerificationSystem(Boolean ignoreAddressVerificationSystem) {
    
    this.ignoreAddressVerificationSystem = ignoreAddressVerificationSystem;
    return this;
  }

  /**
   * Flag for a sale request that indicates whether to allow the capture service to run even when the authorization receives an AVS decline. Applicable for VPC, FDI Global (fdiglobal), GPX (gpx) and GPN (gpn) processors.
   * @return ignoreAddressVerificationSystem
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IGNORE_ADDRESS_VERIFICATION_SYSTEM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIgnoreAddressVerificationSystem() {
    return ignoreAddressVerificationSystem;
  }


  @JsonProperty(JSON_PROPERTY_IGNORE_ADDRESS_VERIFICATION_SYSTEM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIgnoreAddressVerificationSystem(Boolean ignoreAddressVerificationSystem) {
    this.ignoreAddressVerificationSystem = ignoreAddressVerificationSystem;
  }

  public CardProcessingConfigFeaturesCardNotPresent visaStraightThroughProcessingOnly(Boolean visaStraightThroughProcessingOnly) {
    
    this.visaStraightThroughProcessingOnly = visaStraightThroughProcessingOnly;
    return this;
  }

  /**
   * Indicates if a merchant is enabled for Straight Through Processing - B2B invoice payments. Applicable for FDI Global (fdiglobal), TSYS (tsys), VPC and GPX (gpx) processors.
   * @return visaStraightThroughProcessingOnly
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VISA_STRAIGHT_THROUGH_PROCESSING_ONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getVisaStraightThroughProcessingOnly() {
    return visaStraightThroughProcessingOnly;
  }


  @JsonProperty(JSON_PROPERTY_VISA_STRAIGHT_THROUGH_PROCESSING_ONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVisaStraightThroughProcessingOnly(Boolean visaStraightThroughProcessingOnly) {
    this.visaStraightThroughProcessingOnly = visaStraightThroughProcessingOnly;
  }

  public CardProcessingConfigFeaturesCardNotPresent amexTransactionAdviceAddendum1(String amexTransactionAdviceAddendum1) {
    
    this.amexTransactionAdviceAddendum1 = amexTransactionAdviceAddendum1;
    return this;
  }

  /**
   * Advice addendum field. It is used to display descriptive information about a transaction on customer&#39;s American Express card statement. Applicable for TSYS (tsys), FDI Global (fdiglobal) and American Express Direct (amexdirect) processors.
   * @return amexTransactionAdviceAddendum1
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AMEX_TRANSACTION_ADVICE_ADDENDUM1)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAmexTransactionAdviceAddendum1() {
    return amexTransactionAdviceAddendum1;
  }


  @JsonProperty(JSON_PROPERTY_AMEX_TRANSACTION_ADVICE_ADDENDUM1)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAmexTransactionAdviceAddendum1(String amexTransactionAdviceAddendum1) {
    this.amexTransactionAdviceAddendum1 = amexTransactionAdviceAddendum1;
  }

  public CardProcessingConfigFeaturesCardNotPresent installment(CardProcessingConfigFeaturesCardNotPresentInstallment installment) {
    
    this.installment = installment;
    return this;
  }

  /**
   * Get installment
   * @return installment
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INSTALLMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CardProcessingConfigFeaturesCardNotPresentInstallment getInstallment() {
    return installment;
  }


  @JsonProperty(JSON_PROPERTY_INSTALLMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInstallment(CardProcessingConfigFeaturesCardNotPresentInstallment installment) {
    this.installment = installment;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardProcessingConfigFeaturesCardNotPresent cardProcessingConfigFeaturesCardNotPresent = (CardProcessingConfigFeaturesCardNotPresent) o;
    return Objects.equals(this.processors, cardProcessingConfigFeaturesCardNotPresent.processors) &&
        Objects.equals(this.ignoreAddressVerificationSystem, cardProcessingConfigFeaturesCardNotPresent.ignoreAddressVerificationSystem) &&
        Objects.equals(this.visaStraightThroughProcessingOnly, cardProcessingConfigFeaturesCardNotPresent.visaStraightThroughProcessingOnly) &&
        Objects.equals(this.amexTransactionAdviceAddendum1, cardProcessingConfigFeaturesCardNotPresent.amexTransactionAdviceAddendum1) &&
        Objects.equals(this.installment, cardProcessingConfigFeaturesCardNotPresent.installment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(processors, ignoreAddressVerificationSystem, visaStraightThroughProcessingOnly, amexTransactionAdviceAddendum1, installment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardProcessingConfigFeaturesCardNotPresent {\n");
    sb.append("    processors: ").append(toIndentedString(processors)).append("\n");
    sb.append("    ignoreAddressVerificationSystem: ").append(toIndentedString(ignoreAddressVerificationSystem)).append("\n");
    sb.append("    visaStraightThroughProcessingOnly: ").append(toIndentedString(visaStraightThroughProcessingOnly)).append("\n");
    sb.append("    amexTransactionAdviceAddendum1: ").append(toIndentedString(amexTransactionAdviceAddendum1)).append("\n");
    sb.append("    installment: ").append(toIndentedString(installment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

