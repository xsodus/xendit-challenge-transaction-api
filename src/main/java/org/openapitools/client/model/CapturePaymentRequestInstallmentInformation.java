/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CapturePaymentRequestInstallmentInformation
 */
@JsonPropertyOrder({
  CapturePaymentRequestInstallmentInformation.JSON_PROPERTY_AMOUNT,
  CapturePaymentRequestInstallmentInformation.JSON_PROPERTY_FREQUENCY,
  CapturePaymentRequestInstallmentInformation.JSON_PROPERTY_PLAN_TYPE,
  CapturePaymentRequestInstallmentInformation.JSON_PROPERTY_SEQUENCE,
  CapturePaymentRequestInstallmentInformation.JSON_PROPERTY_TOTAL_AMOUNT,
  CapturePaymentRequestInstallmentInformation.JSON_PROPERTY_TOTAL_COUNT,
  CapturePaymentRequestInstallmentInformation.JSON_PROPERTY_FIRST_INSTALLMENT_DATE,
  CapturePaymentRequestInstallmentInformation.JSON_PROPERTY_FIRST_INSTALLMENT_AMOUNT,
  CapturePaymentRequestInstallmentInformation.JSON_PROPERTY_INVOICE_DATA,
  CapturePaymentRequestInstallmentInformation.JSON_PROPERTY_PAYMENT_TYPE,
  CapturePaymentRequestInstallmentInformation.JSON_PROPERTY_ADDITIONAL_COSTS,
  CapturePaymentRequestInstallmentInformation.JSON_PROPERTY_ADDITIONAL_COSTS_PERCENTAGE,
  CapturePaymentRequestInstallmentInformation.JSON_PROPERTY_AMOUNT_FUNDED,
  CapturePaymentRequestInstallmentInformation.JSON_PROPERTY_AMOUNT_REQUESTED_PERCENTAGE,
  CapturePaymentRequestInstallmentInformation.JSON_PROPERTY_ANNUAL_FINANCING_COST,
  CapturePaymentRequestInstallmentInformation.JSON_PROPERTY_ANNUAL_INTEREST_RATE,
  CapturePaymentRequestInstallmentInformation.JSON_PROPERTY_EXPENSES,
  CapturePaymentRequestInstallmentInformation.JSON_PROPERTY_EXPENSES_PERCENTAGE,
  CapturePaymentRequestInstallmentInformation.JSON_PROPERTY_FEES,
  CapturePaymentRequestInstallmentInformation.JSON_PROPERTY_FEES_PERCENTAGE,
  CapturePaymentRequestInstallmentInformation.JSON_PROPERTY_INSURANCE,
  CapturePaymentRequestInstallmentInformation.JSON_PROPERTY_INSURANCE_PERCENTAGE,
  CapturePaymentRequestInstallmentInformation.JSON_PROPERTY_MONTHLY_INTEREST_RATE,
  CapturePaymentRequestInstallmentInformation.JSON_PROPERTY_TAXES,
  CapturePaymentRequestInstallmentInformation.JSON_PROPERTY_TAXES_PERCENTAGE
})
@JsonTypeName("capturePayment_request_installmentInformation")
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T19:17:21.826843+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class CapturePaymentRequestInstallmentInformation {
  public static final String JSON_PROPERTY_AMOUNT = "amount";
  private String amount;

  public static final String JSON_PROPERTY_FREQUENCY = "frequency";
  private String frequency;

  public static final String JSON_PROPERTY_PLAN_TYPE = "planType";
  private String planType;

  public static final String JSON_PROPERTY_SEQUENCE = "sequence";
  private Integer sequence;

  public static final String JSON_PROPERTY_TOTAL_AMOUNT = "totalAmount";
  private String totalAmount;

  public static final String JSON_PROPERTY_TOTAL_COUNT = "totalCount";
  private Integer totalCount;

  public static final String JSON_PROPERTY_FIRST_INSTALLMENT_DATE = "firstInstallmentDate";
  private String firstInstallmentDate;

  public static final String JSON_PROPERTY_FIRST_INSTALLMENT_AMOUNT = "firstInstallmentAmount";
  private String firstInstallmentAmount;

  public static final String JSON_PROPERTY_INVOICE_DATA = "invoiceData";
  private String invoiceData;

  public static final String JSON_PROPERTY_PAYMENT_TYPE = "paymentType";
  private String paymentType;

  public static final String JSON_PROPERTY_ADDITIONAL_COSTS = "additionalCosts";
  private String additionalCosts;

  public static final String JSON_PROPERTY_ADDITIONAL_COSTS_PERCENTAGE = "additionalCostsPercentage";
  private String additionalCostsPercentage;

  public static final String JSON_PROPERTY_AMOUNT_FUNDED = "amountFunded";
  private String amountFunded;

  public static final String JSON_PROPERTY_AMOUNT_REQUESTED_PERCENTAGE = "amountRequestedPercentage";
  private String amountRequestedPercentage;

  public static final String JSON_PROPERTY_ANNUAL_FINANCING_COST = "annualFinancingCost";
  private String annualFinancingCost;

  public static final String JSON_PROPERTY_ANNUAL_INTEREST_RATE = "annualInterestRate";
  private String annualInterestRate;

  public static final String JSON_PROPERTY_EXPENSES = "expenses";
  private String expenses;

  public static final String JSON_PROPERTY_EXPENSES_PERCENTAGE = "expensesPercentage";
  private String expensesPercentage;

  public static final String JSON_PROPERTY_FEES = "fees";
  private String fees;

  public static final String JSON_PROPERTY_FEES_PERCENTAGE = "feesPercentage";
  private String feesPercentage;

  public static final String JSON_PROPERTY_INSURANCE = "insurance";
  private String insurance;

  public static final String JSON_PROPERTY_INSURANCE_PERCENTAGE = "insurancePercentage";
  private String insurancePercentage;

  public static final String JSON_PROPERTY_MONTHLY_INTEREST_RATE = "monthlyInterestRate";
  private String monthlyInterestRate;

  public static final String JSON_PROPERTY_TAXES = "taxes";
  private String taxes;

  public static final String JSON_PROPERTY_TAXES_PERCENTAGE = "taxesPercentage";
  private String taxesPercentage;

  public CapturePaymentRequestInstallmentInformation() {
  }

  public CapturePaymentRequestInstallmentInformation amount(String amount) {
    
    this.amount = amount;
    return this;
  }

  /**
   * Amount for the current installment payment.  This field is supported only for CyberSource through VisaNet. 
   * @return amount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAmount() {
    return amount;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAmount(String amount) {
    this.amount = amount;
  }

  public CapturePaymentRequestInstallmentInformation frequency(String frequency) {
    
    this.frequency = frequency;
    return this;
  }

  /**
   * Frequency of the installment payments. When you do not include this field in a request for a Crediario installment payment, CyberSource sends a space character to the processor.  This field is supported only for CyberSource through VisaNet. Possible values: - &#x60;B&#x60;: Biweekly - &#x60;M&#x60;: Monthly - &#x60;W&#x60;: Weekly  For Crediario installment payments, the value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP01 TCR9 - Position: 41 - Field: Installment Frequency 
   * @return frequency
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FREQUENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFrequency() {
    return frequency;
  }


  @JsonProperty(JSON_PROPERTY_FREQUENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFrequency(String frequency) {
    this.frequency = frequency;
  }

  public CapturePaymentRequestInstallmentInformation planType(String planType) {
    
    this.planType = planType;
    return this;
  }

  /**
   * #### American Express Direct, Cielo, and CyberSource Latin American Processing Flag that indicates the type of funding for the installment plan associated with the payment.  Possible values: - &#x60;1&#x60;: Merchant-funded installment plan - &#x60;2&#x60;: Issuer-funded installment plan If you do not include this field in the request, CyberSource uses the value in your CyberSource account.  To change the value in your CyberSource account, contact CyberSource Customer Service.  #### CyberSource through VisaNet and American Express Defined code that indicates the type of installment plan for this transaction.  Contact American Express for: - Information about the kinds of installment plans that American Express provides - Values for this field  For installment payments with American Express in Brazil, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP07 TCR3 - Position: 5-6 - Field: Plan Type  * The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant&#39;s acquirer, who uses this information to facilitate end-of-day clearing processing with payment card companies.  #### CyberSource through VisaNet with Visa or Mastercard Flag indicating the type of funding for the installment plan associated with the payment. Possible values: - 1 or 01: Merchant-funded installment plan - 2 or 02: Issuer-funded installment plan - 43: Crediario installment planâ€”only with Visa in Brazil  For installment payments with Visa in Brazil, the value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP07 TCR1 - Position: 5-6 - Field: Installment Type  For all other kinds of installment payments, the value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP01 TCR5 - Position: 39-40 - Field: Installment Plan Type (Issuer or Merchant) 
   * @return planType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PLAN_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPlanType() {
    return planType;
  }


  @JsonProperty(JSON_PROPERTY_PLAN_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPlanType(String planType) {
    this.planType = planType;
  }

  public CapturePaymentRequestInstallmentInformation sequence(Integer sequence) {
    
    this.sequence = sequence;
    return this;
  }

  /**
   * Installment number when making payments in installments. Used along with &#x60;totalCount&#x60; to track which payment is being processed.  For example, the second of 5 payments would be passed to CyberSource as &#x60;sequence&#x60; &#x3D; 2 and &#x60;totalCount&#x60; &#x3D; 5.  #### Chase Paymentech Solutions and FDC Compass This field is optional because this value is required in the merchant descriptors.  #### CyberSource through VisaNet When you do not include this field in a request for a Crediario installment payment, CyberSource sends a value of 0 to the processor.  For Crediario installment payments, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP01 TCR9 - Position: 38-40 - Field: Installment Payment Number  * The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant&#39;s acquirer, who uses this information to facilitate end-of-day clearing processing with payment card companies. 
   * maximum: 99
   * @return sequence
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SEQUENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getSequence() {
    return sequence;
  }


  @JsonProperty(JSON_PROPERTY_SEQUENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSequence(Integer sequence) {
    this.sequence = sequence;
  }

  public CapturePaymentRequestInstallmentInformation totalAmount(String totalAmount) {
    
    this.totalAmount = totalAmount;
    return this;
  }

  /**
   * Total amount of the loan that is being paid in installments. This field is supported only for CyberSource through VisaNet. 
   * @return totalAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTotalAmount() {
    return totalAmount;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalAmount(String totalAmount) {
    this.totalAmount = totalAmount;
  }

  public CapturePaymentRequestInstallmentInformation totalCount(Integer totalCount) {
    
    this.totalCount = totalCount;
    return this;
  }

  /**
   * Total number of installments when making payments in installments.  #### Chase Paymentech Solutions and FDC Compass This field is optional because this value is required in the merchant descriptors.  #### American Express Direct, Cielo, and Comercio Latino This value is the total number of installments you approved.  #### CyberSource Latin American Processing in Brazil This value is the total number of installments that you approved. The default is 1.  #### All Other Processors This value is used along with _sequence_ to track which payment is being processed.  For example, the second of 5 payments would be passed to CyberSource as _sequence_ &#x3D; 2 and _totalCount_ &#x3D; 5.  #### CyberSource through VisaNet For Crediario installment payments, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP01 TCR9 - Position: 23-25 - Field: Number of Installments  For installment payments with American Express in Brazil, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP07 TCR3 - Position: 7-8 - Field: Number of Installments  For installment payments with Visa in Brazil, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP07 TCR1 - Position: 7-8 - Field: Number of Installments  For all other kinds of installment payments, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP01 TCR5 - Position: 20-22 - Field: Installment Total Count  **Note** The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant&#39;s acquirer, who uses this information to facilitate end-of-day clearing processing with payment card companies. 
   * maximum: 99
   * @return totalCount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTotalCount() {
    return totalCount;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalCount(Integer totalCount) {
    this.totalCount = totalCount;
  }

  public CapturePaymentRequestInstallmentInformation firstInstallmentDate(String firstInstallmentDate) {
    
    this.firstInstallmentDate = firstInstallmentDate;
    return this;
  }

  /**
   * Date of the first installment payment. Format: YYMMDD. When you do not include this field, CyberSource sends a string of six zeros (000000) to the processor.  This field is supported only for Crediario installment payments in Brazil on CyberSource through VisaNet.  The value for this field corresponds to the following data in the TC 33 capture file: - Record: CP01 TCR9 - Position: 42-47 - Field: Date of First Installment 
   * @return firstInstallmentDate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FIRST_INSTALLMENT_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFirstInstallmentDate() {
    return firstInstallmentDate;
  }


  @JsonProperty(JSON_PROPERTY_FIRST_INSTALLMENT_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFirstInstallmentDate(String firstInstallmentDate) {
    this.firstInstallmentDate = firstInstallmentDate;
  }

  public CapturePaymentRequestInstallmentInformation firstInstallmentAmount(String firstInstallmentAmount) {
    
    this.firstInstallmentAmount = firstInstallmentAmount;
    return this;
  }

  /**
   * Amount of the first installment payment. The issuer provides this value when the first installment payment is successful. This field is supported for Mastercard installment payments on CyberSource through VisaNet in all countries except Brazil,Croatia, Georgia, and Greece. The value for this field corresponds to the following data in the TC 33 capture file: - Record: CP01 TCR5 - Position: 23-34 - Field: Amount of Each Installment 
   * @return firstInstallmentAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FIRST_INSTALLMENT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFirstInstallmentAmount() {
    return firstInstallmentAmount;
  }


  @JsonProperty(JSON_PROPERTY_FIRST_INSTALLMENT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFirstInstallmentAmount(String firstInstallmentAmount) {
    this.firstInstallmentAmount = firstInstallmentAmount;
  }

  public CapturePaymentRequestInstallmentInformation invoiceData(String invoiceData) {
    
    this.invoiceData = invoiceData;
    return this;
  }

  /**
   * Invoice information that you want to provide to the issuer. This value is similar to a tracking number and is the same for all installment payments for one purchase.  This field is supported only for installment payments with Mastercard on CyberSource through VisaNet in Brazil.  The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP07 TCR4 - Position: 51-70 - Field: Purchase Identification 
   * @return invoiceData
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INVOICE_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getInvoiceData() {
    return invoiceData;
  }


  @JsonProperty(JSON_PROPERTY_INVOICE_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInvoiceData(String invoiceData) {
    this.invoiceData = invoiceData;
  }

  public CapturePaymentRequestInstallmentInformation paymentType(String paymentType) {
    
    this.paymentType = paymentType;
    return this;
  }

  /**
   * Payment plan for the installments.  Possible values: - 0 (default): Regular installment. This value is not allowed for airline transactions. - 1: Installment payment with down payment. - 2: Installment payment without down payment. This value is supported only for airline transactions. - 3: Installment payment; down payment and boarding fee will follow. This value is supported only for airline transactions. - 4: Down payment only; regular installment payment will follow. - 5: Boarding fee only. This value is supported only for airline transactions.  This field is supported only for installment payments with Visa on CyberSource through VisaNet in Brazil.  The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP07 TCR1 - Position: 9 - Field: Merchant Installment Supporting Information 
   * @return paymentType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAYMENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPaymentType() {
    return paymentType;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentType(String paymentType) {
    this.paymentType = paymentType;
  }

  public CapturePaymentRequestInstallmentInformation additionalCosts(String additionalCosts) {
    
    this.additionalCosts = additionalCosts;
    return this;
  }

  /**
   * Additional costs charged by the issuer to fund the installment payments.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder&#39;s request for Crediario installment payments in Brazil.  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 128-139 - Field: Total Other Costs 
   * @return additionalCosts
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ADDITIONAL_COSTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAdditionalCosts() {
    return additionalCosts;
  }


  @JsonProperty(JSON_PROPERTY_ADDITIONAL_COSTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAdditionalCosts(String additionalCosts) {
    this.additionalCosts = additionalCosts;
  }

  public CapturePaymentRequestInstallmentInformation additionalCostsPercentage(String additionalCostsPercentage) {
    
    this.additionalCostsPercentage = additionalCostsPercentage;
    return this;
  }

  /**
   * Additional costs divided by the amount funded.  For example: - A value of 1.0 specifies 1%. - A value of 4.0 specifies 4%.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder&#39;s request for Crediario installment payments in Brazil.  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 140-143 - Field: Percent of Total Other Costs 
   * @return additionalCostsPercentage
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ADDITIONAL_COSTS_PERCENTAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAdditionalCostsPercentage() {
    return additionalCostsPercentage;
  }


  @JsonProperty(JSON_PROPERTY_ADDITIONAL_COSTS_PERCENTAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAdditionalCostsPercentage(String additionalCostsPercentage) {
    this.additionalCostsPercentage = additionalCostsPercentage;
  }

  public CapturePaymentRequestInstallmentInformation amountFunded(String amountFunded) {
    
    this.amountFunded = amountFunded;
    return this;
  }

  /**
   * Amount funded.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder&#39;s request for Crediario installment payments in Brazil.  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 48-59 - Field: Total Amount Funded 
   * @return amountFunded
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AMOUNT_FUNDED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAmountFunded() {
    return amountFunded;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT_FUNDED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAmountFunded(String amountFunded) {
    this.amountFunded = amountFunded;
  }

  public CapturePaymentRequestInstallmentInformation amountRequestedPercentage(String amountRequestedPercentage) {
    
    this.amountRequestedPercentage = amountRequestedPercentage;
    return this;
  }

  /**
   * Amount requested divided by the amount funded.  For example: - A value of 90.0 specifies 90%. - A value of 93.7 specifies 93.7%.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder&#39;s request for Crediario installment payments in Brazil.  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 60-63 - Field: Percent of Amount Requested 
   * @return amountRequestedPercentage
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AMOUNT_REQUESTED_PERCENTAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAmountRequestedPercentage() {
    return amountRequestedPercentage;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT_REQUESTED_PERCENTAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAmountRequestedPercentage(String amountRequestedPercentage) {
    this.amountRequestedPercentage = amountRequestedPercentage;
  }

  public CapturePaymentRequestInstallmentInformation annualFinancingCost(String annualFinancingCost) {
    
    this.annualFinancingCost = annualFinancingCost;
    return this;
  }

  /**
   * Annual cost of financing the installment payments.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder&#39;s request for Crediario installment payments in Brazil.  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 158-164 - Field: Annual Total Cost of Financing 
   * @return annualFinancingCost
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ANNUAL_FINANCING_COST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAnnualFinancingCost() {
    return annualFinancingCost;
  }


  @JsonProperty(JSON_PROPERTY_ANNUAL_FINANCING_COST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAnnualFinancingCost(String annualFinancingCost) {
    this.annualFinancingCost = annualFinancingCost;
  }

  public CapturePaymentRequestInstallmentInformation annualInterestRate(String annualInterestRate) {
    
    this.annualInterestRate = annualInterestRate;
    return this;
  }

  /**
   * Annual interest rate.  For example: - A value of 1.0 specifies 1%. - A value of 4.0 specifies 4%.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder&#39;s request for Crediario installment payments in Brazil.  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 151-157 - Field: Annual Interest Rate 
   * @return annualInterestRate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ANNUAL_INTEREST_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAnnualInterestRate() {
    return annualInterestRate;
  }


  @JsonProperty(JSON_PROPERTY_ANNUAL_INTEREST_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAnnualInterestRate(String annualInterestRate) {
    this.annualInterestRate = annualInterestRate;
  }

  public CapturePaymentRequestInstallmentInformation expenses(String expenses) {
    
    this.expenses = expenses;
    return this;
  }

  /**
   * Expenses charged by the issuer to fund the installment payments.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder&#39;s request for Crediario installment payments in Brazil.  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 64-75 - Field: Total Expenses 
   * @return expenses
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXPENSES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExpenses() {
    return expenses;
  }


  @JsonProperty(JSON_PROPERTY_EXPENSES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpenses(String expenses) {
    this.expenses = expenses;
  }

  public CapturePaymentRequestInstallmentInformation expensesPercentage(String expensesPercentage) {
    
    this.expensesPercentage = expensesPercentage;
    return this;
  }

  /**
   * Expenses divided by the amount funded.  For example: - A value of 1.0 specifies 1%. - A value of 4.0 specifies 4%.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder&#39;s request for Crediario installment payments in Brazil.  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 76-79 - Field: Percent of Total Expenses 
   * @return expensesPercentage
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXPENSES_PERCENTAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExpensesPercentage() {
    return expensesPercentage;
  }


  @JsonProperty(JSON_PROPERTY_EXPENSES_PERCENTAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpensesPercentage(String expensesPercentage) {
    this.expensesPercentage = expensesPercentage;
  }

  public CapturePaymentRequestInstallmentInformation fees(String fees) {
    
    this.fees = fees;
    return this;
  }

  /**
   * Fees charged by the issuer to fund the installment payments.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder&#39;s request for Crediario installment payments in Brazil.  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 80-91 - Field: Total Fees 
   * @return fees
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FEES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFees() {
    return fees;
  }


  @JsonProperty(JSON_PROPERTY_FEES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFees(String fees) {
    this.fees = fees;
  }

  public CapturePaymentRequestInstallmentInformation feesPercentage(String feesPercentage) {
    
    this.feesPercentage = feesPercentage;
    return this;
  }

  /**
   * Fees divided by the amount funded.  For example: - A value of 1.0 specifies 1%. - A value of 4.0 specifies 4%.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder&#39;s request for Crediario installment payments in Brazil.  This field is supported only for Crediario installment payments in Brazil on CyberSource through VisaNet.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 92-95 - Field: Percent of Total Fees 
   * @return feesPercentage
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FEES_PERCENTAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFeesPercentage() {
    return feesPercentage;
  }


  @JsonProperty(JSON_PROPERTY_FEES_PERCENTAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFeesPercentage(String feesPercentage) {
    this.feesPercentage = feesPercentage;
  }

  public CapturePaymentRequestInstallmentInformation insurance(String insurance) {
    
    this.insurance = insurance;
    return this;
  }

  /**
   * Insurance charged by the issuer to fund the installment payments.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder&#39;s request for Crediario installment payments in Brazil.  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 112-123 - Field: Total Insurance 
   * @return insurance
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INSURANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getInsurance() {
    return insurance;
  }


  @JsonProperty(JSON_PROPERTY_INSURANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInsurance(String insurance) {
    this.insurance = insurance;
  }

  public CapturePaymentRequestInstallmentInformation insurancePercentage(String insurancePercentage) {
    
    this.insurancePercentage = insurancePercentage;
    return this;
  }

  /**
   * Insurance costs divided by the amount funded.  For example: - A value of 1.0 specifies 1%. - A value of 4.0 specifies 4%.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder&#39;s request for Crediario installment payments in Brazil.  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 124-127 - Field: Percent Of Total Insurance 
   * @return insurancePercentage
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INSURANCE_PERCENTAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getInsurancePercentage() {
    return insurancePercentage;
  }


  @JsonProperty(JSON_PROPERTY_INSURANCE_PERCENTAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInsurancePercentage(String insurancePercentage) {
    this.insurancePercentage = insurancePercentage;
  }

  public CapturePaymentRequestInstallmentInformation monthlyInterestRate(String monthlyInterestRate) {
    
    this.monthlyInterestRate = monthlyInterestRate;
    return this;
  }

  /**
   * Monthly interest rate.  For example: - A value of 1.0 specifies 1%. - A value of 4.0 specifies 4%.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder&#39;s request for Crediario installment payments in Brazil.  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 144-150 - Field: Monthly Interest Rate 
   * @return monthlyInterestRate
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MONTHLY_INTEREST_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMonthlyInterestRate() {
    return monthlyInterestRate;
  }


  @JsonProperty(JSON_PROPERTY_MONTHLY_INTEREST_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMonthlyInterestRate(String monthlyInterestRate) {
    this.monthlyInterestRate = monthlyInterestRate;
  }

  public CapturePaymentRequestInstallmentInformation taxes(String taxes) {
    
    this.taxes = taxes;
    return this;
  }

  /**
   * Taxes collected by the issuer to fund the installment payments.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder&#39;s request for Crediario installment payments in Brazil.  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 96-107 - Field: Total Taxes 
   * @return taxes
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAXES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTaxes() {
    return taxes;
  }


  @JsonProperty(JSON_PROPERTY_TAXES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaxes(String taxes) {
    this.taxes = taxes;
  }

  public CapturePaymentRequestInstallmentInformation taxesPercentage(String taxesPercentage) {
    
    this.taxesPercentage = taxesPercentage;
    return this;
  }

  /**
   * Taxes divided by the amount funded.  For example: - A value of 1.0 specifies 1%. - A value of 4.0 specifies 4%.  This field is included in the authorization reply for the Crediario eligibility request when the issuer approves the cardholder&#39;s request for Crediario installment payments in Brazil.  This field is supported only for Crediario installment payments in Brazil on **CyberSource through VisaNet**.  The value for this field corresponds to the following data in the TC 33 capture file1: - Record: CP01 TCR9 - Position: 108-111 - Field: Percent of Total Taxes 
   * @return taxesPercentage
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAXES_PERCENTAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTaxesPercentage() {
    return taxesPercentage;
  }


  @JsonProperty(JSON_PROPERTY_TAXES_PERCENTAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaxesPercentage(String taxesPercentage) {
    this.taxesPercentage = taxesPercentage;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CapturePaymentRequestInstallmentInformation capturePaymentRequestInstallmentInformation = (CapturePaymentRequestInstallmentInformation) o;
    return Objects.equals(this.amount, capturePaymentRequestInstallmentInformation.amount) &&
        Objects.equals(this.frequency, capturePaymentRequestInstallmentInformation.frequency) &&
        Objects.equals(this.planType, capturePaymentRequestInstallmentInformation.planType) &&
        Objects.equals(this.sequence, capturePaymentRequestInstallmentInformation.sequence) &&
        Objects.equals(this.totalAmount, capturePaymentRequestInstallmentInformation.totalAmount) &&
        Objects.equals(this.totalCount, capturePaymentRequestInstallmentInformation.totalCount) &&
        Objects.equals(this.firstInstallmentDate, capturePaymentRequestInstallmentInformation.firstInstallmentDate) &&
        Objects.equals(this.firstInstallmentAmount, capturePaymentRequestInstallmentInformation.firstInstallmentAmount) &&
        Objects.equals(this.invoiceData, capturePaymentRequestInstallmentInformation.invoiceData) &&
        Objects.equals(this.paymentType, capturePaymentRequestInstallmentInformation.paymentType) &&
        Objects.equals(this.additionalCosts, capturePaymentRequestInstallmentInformation.additionalCosts) &&
        Objects.equals(this.additionalCostsPercentage, capturePaymentRequestInstallmentInformation.additionalCostsPercentage) &&
        Objects.equals(this.amountFunded, capturePaymentRequestInstallmentInformation.amountFunded) &&
        Objects.equals(this.amountRequestedPercentage, capturePaymentRequestInstallmentInformation.amountRequestedPercentage) &&
        Objects.equals(this.annualFinancingCost, capturePaymentRequestInstallmentInformation.annualFinancingCost) &&
        Objects.equals(this.annualInterestRate, capturePaymentRequestInstallmentInformation.annualInterestRate) &&
        Objects.equals(this.expenses, capturePaymentRequestInstallmentInformation.expenses) &&
        Objects.equals(this.expensesPercentage, capturePaymentRequestInstallmentInformation.expensesPercentage) &&
        Objects.equals(this.fees, capturePaymentRequestInstallmentInformation.fees) &&
        Objects.equals(this.feesPercentage, capturePaymentRequestInstallmentInformation.feesPercentage) &&
        Objects.equals(this.insurance, capturePaymentRequestInstallmentInformation.insurance) &&
        Objects.equals(this.insurancePercentage, capturePaymentRequestInstallmentInformation.insurancePercentage) &&
        Objects.equals(this.monthlyInterestRate, capturePaymentRequestInstallmentInformation.monthlyInterestRate) &&
        Objects.equals(this.taxes, capturePaymentRequestInstallmentInformation.taxes) &&
        Objects.equals(this.taxesPercentage, capturePaymentRequestInstallmentInformation.taxesPercentage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, frequency, planType, sequence, totalAmount, totalCount, firstInstallmentDate, firstInstallmentAmount, invoiceData, paymentType, additionalCosts, additionalCostsPercentage, amountFunded, amountRequestedPercentage, annualFinancingCost, annualInterestRate, expenses, expensesPercentage, fees, feesPercentage, insurance, insurancePercentage, monthlyInterestRate, taxes, taxesPercentage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CapturePaymentRequestInstallmentInformation {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    planType: ").append(toIndentedString(planType)).append("\n");
    sb.append("    sequence: ").append(toIndentedString(sequence)).append("\n");
    sb.append("    totalAmount: ").append(toIndentedString(totalAmount)).append("\n");
    sb.append("    totalCount: ").append(toIndentedString(totalCount)).append("\n");
    sb.append("    firstInstallmentDate: ").append(toIndentedString(firstInstallmentDate)).append("\n");
    sb.append("    firstInstallmentAmount: ").append(toIndentedString(firstInstallmentAmount)).append("\n");
    sb.append("    invoiceData: ").append(toIndentedString(invoiceData)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    additionalCosts: ").append(toIndentedString(additionalCosts)).append("\n");
    sb.append("    additionalCostsPercentage: ").append(toIndentedString(additionalCostsPercentage)).append("\n");
    sb.append("    amountFunded: ").append(toIndentedString(amountFunded)).append("\n");
    sb.append("    amountRequestedPercentage: ").append(toIndentedString(amountRequestedPercentage)).append("\n");
    sb.append("    annualFinancingCost: ").append(toIndentedString(annualFinancingCost)).append("\n");
    sb.append("    annualInterestRate: ").append(toIndentedString(annualInterestRate)).append("\n");
    sb.append("    expenses: ").append(toIndentedString(expenses)).append("\n");
    sb.append("    expensesPercentage: ").append(toIndentedString(expensesPercentage)).append("\n");
    sb.append("    fees: ").append(toIndentedString(fees)).append("\n");
    sb.append("    feesPercentage: ").append(toIndentedString(feesPercentage)).append("\n");
    sb.append("    insurance: ").append(toIndentedString(insurance)).append("\n");
    sb.append("    insurancePercentage: ").append(toIndentedString(insurancePercentage)).append("\n");
    sb.append("    monthlyInterestRate: ").append(toIndentedString(monthlyInterestRate)).append("\n");
    sb.append("    taxes: ").append(toIndentedString(taxes)).append("\n");
    sb.append("    taxesPercentage: ").append(toIndentedString(taxesPercentage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

