/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.client.model.OctCreatePaymentRequestProcessingInformationFundingOptions;
import org.openapitools.client.model.OctCreatePaymentRequestProcessingInformationPayoutsOptions;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * OctCreatePaymentRequestProcessingInformation
 */
@JsonPropertyOrder({
  OctCreatePaymentRequestProcessingInformation.JSON_PROPERTY_BUSINESS_APPLICATION_ID,
  OctCreatePaymentRequestProcessingInformation.JSON_PROPERTY_NETWORK_ROUTING_ORDER,
  OctCreatePaymentRequestProcessingInformation.JSON_PROPERTY_COMMERCE_INDICATOR,
  OctCreatePaymentRequestProcessingInformation.JSON_PROPERTY_RECONCILIATION_ID,
  OctCreatePaymentRequestProcessingInformation.JSON_PROPERTY_PAYOUTS_OPTIONS,
  OctCreatePaymentRequestProcessingInformation.JSON_PROPERTY_TRANSACTION_REASON,
  OctCreatePaymentRequestProcessingInformation.JSON_PROPERTY_PURPOSE_OF_PAYMENT,
  OctCreatePaymentRequestProcessingInformation.JSON_PROPERTY_FUNDING_OPTIONS
})
@JsonTypeName("octCreatePayment_request_processingInformation")
//@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-09T19:17:21.826843+07:00[Asia/Bangkok]", comments = "Generator version: 7.9.0")
public class OctCreatePaymentRequestProcessingInformation {
  public static final String JSON_PROPERTY_BUSINESS_APPLICATION_ID = "businessApplicationId";
  private String businessApplicationId;

  public static final String JSON_PROPERTY_NETWORK_ROUTING_ORDER = "networkRoutingOrder";
  private String networkRoutingOrder;

  public static final String JSON_PROPERTY_COMMERCE_INDICATOR = "commerceIndicator";
  private String commerceIndicator;

  public static final String JSON_PROPERTY_RECONCILIATION_ID = "reconciliationId";
  private String reconciliationId;

  public static final String JSON_PROPERTY_PAYOUTS_OPTIONS = "payoutsOptions";
  private OctCreatePaymentRequestProcessingInformationPayoutsOptions payoutsOptions;

  public static final String JSON_PROPERTY_TRANSACTION_REASON = "transactionReason";
  private String transactionReason;

  public static final String JSON_PROPERTY_PURPOSE_OF_PAYMENT = "purposeOfPayment";
  private String purposeOfPayment;

  public static final String JSON_PROPERTY_FUNDING_OPTIONS = "fundingOptions";
  private OctCreatePaymentRequestProcessingInformationFundingOptions fundingOptions;

  public OctCreatePaymentRequestProcessingInformation() {
  }

  public OctCreatePaymentRequestProcessingInformation businessApplicationId(String businessApplicationId) {
    
    this.businessApplicationId = businessApplicationId;
    return this;
  }

  /**
   * Payouts transaction type.  Applicable Processors: FDC Compass, Paymentech, CtV  Possible values:  **Credit Card Bill Payment**   - **CP**: credit card bill payment  **Funds Disbursement**   - **FD**: funds disbursement  - **GD**: government disbursement  - **MD**: merchant disbursement  **Money Transfer**   - **AA**: account to account. Sender and receiver are same person.  - **PP**: person to person. Sender and receiver are different.  **Prepaid Load**   - **TU**: top up 
   * @return businessApplicationId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BUSINESS_APPLICATION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBusinessApplicationId() {
    return businessApplicationId;
  }


  @JsonProperty(JSON_PROPERTY_BUSINESS_APPLICATION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBusinessApplicationId(String businessApplicationId) {
    this.businessApplicationId = businessApplicationId;
  }

  public OctCreatePaymentRequestProcessingInformation networkRoutingOrder(String networkRoutingOrder) {
    
    this.networkRoutingOrder = networkRoutingOrder;
    return this;
  }

  /**
   * This field is optionally used by Push Payments Gateway participants (merchants and acquirers) to get the attributes for specified networks only. The networks specified in this field must be a subset of the information provided during program enrollment. Refer to Sharing Group Code/Network Routing Order. Note: Supported only in US for domestic transactions involving Push Payments Gateway Service.  VisaNet checks to determine if there are issuer routing preferences for any of the networks specified by the network routing order. If an issuer preference exists for one of the specified debit networks, VisaNet makes a routing selection based on the issuer&#39;s preference.  If an issuer preference exists for more than one of the specified debit networks, or if no issuer preference exists, VisaNet makes a selection based on the acquirer&#39;s routing priorities.  
   * @return networkRoutingOrder
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NETWORK_ROUTING_ORDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNetworkRoutingOrder() {
    return networkRoutingOrder;
  }


  @JsonProperty(JSON_PROPERTY_NETWORK_ROUTING_ORDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNetworkRoutingOrder(String networkRoutingOrder) {
    this.networkRoutingOrder = networkRoutingOrder;
  }

  public OctCreatePaymentRequestProcessingInformation commerceIndicator(String commerceIndicator) {
    
    this.commerceIndicator = commerceIndicator;
    return this;
  }

  /**
   * Type of transaction.  Value for an OCT transaction: - &#x60;internet&#x60; 
   * @return commerceIndicator
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMMERCE_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCommerceIndicator() {
    return commerceIndicator;
  }


  @JsonProperty(JSON_PROPERTY_COMMERCE_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCommerceIndicator(String commerceIndicator) {
    this.commerceIndicator = commerceIndicator;
  }

  public OctCreatePaymentRequestProcessingInformation reconciliationId(String reconciliationId) {
    
    this.reconciliationId = reconciliationId;
    return this;
  }

  /**
   * Please check with Cybersource customer support to see if your merchant account is configured correctly so you can include this field in your request. * For Payouts: max length for FDCCompass is String (22). 
   * @return reconciliationId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RECONCILIATION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getReconciliationId() {
    return reconciliationId;
  }


  @JsonProperty(JSON_PROPERTY_RECONCILIATION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReconciliationId(String reconciliationId) {
    this.reconciliationId = reconciliationId;
  }

  public OctCreatePaymentRequestProcessingInformation payoutsOptions(OctCreatePaymentRequestProcessingInformationPayoutsOptions payoutsOptions) {
    
    this.payoutsOptions = payoutsOptions;
    return this;
  }

  /**
   * Get payoutsOptions
   * @return payoutsOptions
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAYOUTS_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OctCreatePaymentRequestProcessingInformationPayoutsOptions getPayoutsOptions() {
    return payoutsOptions;
  }


  @JsonProperty(JSON_PROPERTY_PAYOUTS_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPayoutsOptions(OctCreatePaymentRequestProcessingInformationPayoutsOptions payoutsOptions) {
    this.payoutsOptions = payoutsOptions;
  }

  public OctCreatePaymentRequestProcessingInformation transactionReason(String transactionReason) {
    
    this.transactionReason = transactionReason;
    return this;
  }

  /**
   * Transaction reason code. 
   * @return transactionReason
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRANSACTION_REASON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTransactionReason() {
    return transactionReason;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTION_REASON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransactionReason(String transactionReason) {
    this.transactionReason = transactionReason;
  }

  public OctCreatePaymentRequestProcessingInformation purposeOfPayment(String purposeOfPayment) {
    
    this.purposeOfPayment = purposeOfPayment;
    return this;
  }

  /**
   * This will send purpose of funds code for original credit transactions (OCTs). 
   * @return purposeOfPayment
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PURPOSE_OF_PAYMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPurposeOfPayment() {
    return purposeOfPayment;
  }


  @JsonProperty(JSON_PROPERTY_PURPOSE_OF_PAYMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPurposeOfPayment(String purposeOfPayment) {
    this.purposeOfPayment = purposeOfPayment;
  }

  public OctCreatePaymentRequestProcessingInformation fundingOptions(OctCreatePaymentRequestProcessingInformationFundingOptions fundingOptions) {
    
    this.fundingOptions = fundingOptions;
    return this;
  }

  /**
   * Get fundingOptions
   * @return fundingOptions
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FUNDING_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OctCreatePaymentRequestProcessingInformationFundingOptions getFundingOptions() {
    return fundingOptions;
  }


  @JsonProperty(JSON_PROPERTY_FUNDING_OPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFundingOptions(OctCreatePaymentRequestProcessingInformationFundingOptions fundingOptions) {
    this.fundingOptions = fundingOptions;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OctCreatePaymentRequestProcessingInformation octCreatePaymentRequestProcessingInformation = (OctCreatePaymentRequestProcessingInformation) o;
    return Objects.equals(this.businessApplicationId, octCreatePaymentRequestProcessingInformation.businessApplicationId) &&
        Objects.equals(this.networkRoutingOrder, octCreatePaymentRequestProcessingInformation.networkRoutingOrder) &&
        Objects.equals(this.commerceIndicator, octCreatePaymentRequestProcessingInformation.commerceIndicator) &&
        Objects.equals(this.reconciliationId, octCreatePaymentRequestProcessingInformation.reconciliationId) &&
        Objects.equals(this.payoutsOptions, octCreatePaymentRequestProcessingInformation.payoutsOptions) &&
        Objects.equals(this.transactionReason, octCreatePaymentRequestProcessingInformation.transactionReason) &&
        Objects.equals(this.purposeOfPayment, octCreatePaymentRequestProcessingInformation.purposeOfPayment) &&
        Objects.equals(this.fundingOptions, octCreatePaymentRequestProcessingInformation.fundingOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(businessApplicationId, networkRoutingOrder, commerceIndicator, reconciliationId, payoutsOptions, transactionReason, purposeOfPayment, fundingOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OctCreatePaymentRequestProcessingInformation {\n");
    sb.append("    businessApplicationId: ").append(toIndentedString(businessApplicationId)).append("\n");
    sb.append("    networkRoutingOrder: ").append(toIndentedString(networkRoutingOrder)).append("\n");
    sb.append("    commerceIndicator: ").append(toIndentedString(commerceIndicator)).append("\n");
    sb.append("    reconciliationId: ").append(toIndentedString(reconciliationId)).append("\n");
    sb.append("    payoutsOptions: ").append(toIndentedString(payoutsOptions)).append("\n");
    sb.append("    transactionReason: ").append(toIndentedString(transactionReason)).append("\n");
    sb.append("    purposeOfPayment: ").append(toIndentedString(purposeOfPayment)).append("\n");
    sb.append("    fundingOptions: ").append(toIndentedString(fundingOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

